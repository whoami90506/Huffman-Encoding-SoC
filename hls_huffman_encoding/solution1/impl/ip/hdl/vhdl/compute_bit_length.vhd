-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_bit_length is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    parent_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    parent_V_ce0 : OUT STD_LOGIC;
    parent_V_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    parent_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    parent_V_ce1 : OUT STD_LOGIC;
    parent_V_q1 : IN STD_LOGIC_VECTOR (8 downto 0);
    left_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    left_V_ce0 : OUT STD_LOGIC;
    left_V_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    left_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    left_V_ce1 : OUT STD_LOGIC;
    left_V_q1 : IN STD_LOGIC_VECTOR (8 downto 0);
    right_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    right_V_ce0 : OUT STD_LOGIC;
    right_V_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    right_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    right_V_ce1 : OUT STD_LOGIC;
    right_V_q1 : IN STD_LOGIC_VECTOR (8 downto 0);
    extLd_loc_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    extLd_loc_empty_n : IN STD_LOGIC;
    extLd_loc_read : OUT STD_LOGIC;
    length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    length_histogram_V_ce0 : OUT STD_LOGIC;
    length_histogram_V_we0 : OUT STD_LOGIC;
    length_histogram_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of compute_bit_length is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv10_3FD : STD_LOGIC_VECTOR (9 downto 0) := "1111111101";
    constant ap_const_lv10_3FC : STD_LOGIC_VECTOR (9 downto 0) := "1111111100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal extLd_loc_blk_n : STD_LOGIC;
    signal p_097_0_i_i_reg_293 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0104_0_i_i_reg_303 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_09_0_i_i_reg_312 : STD_LOGIC_VECTOR (8 downto 0);
    signal left_curr_V_1_reg_321 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_07_0_i_i_reg_332 : STD_LOGIC_VECTOR (8 downto 0);
    signal right_curr_V_1_reg_341 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_0106_0_i_i_reg_352 : STD_LOGIC_VECTOR (5 downto 0);
    signal op2_assign_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_384 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state11_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal tmp_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_389_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln13_reg_540 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_5_fu_399_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln23_fu_411_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_reg_555 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_416_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_560 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_fu_421_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_reg_566 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal parent_next_V_reg_601 : STD_LOGIC_VECTOR (8 downto 0);
    signal left_curr_V_reg_607 : STD_LOGIC_VECTOR (8 downto 0);
    signal left_next_V_reg_612 : STD_LOGIC_VECTOR (8 downto 0);
    signal right_curr_V_reg_617 : STD_LOGIC_VECTOR (8 downto 0);
    signal right_next_V_reg_622 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal child_depth_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal child_depth_curr_V_reg_637 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal child_depth_V_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal child_depth_next_V_reg_642 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln25_1_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_reg_652_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal length_V_fu_462_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal length_V_reg_656 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln883_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_1_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_1_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln544_7_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_7_reg_670 : STD_LOGIC_VECTOR (63 downto 0);
    signal internal_length_hist_2_reg_675 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln879_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal internal_length_hist_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal count_V_reg_690 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state10_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal child_depth_curr_V_1_fu_523_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal child_depth_curr_V_1_reg_710 : STD_LOGIC_VECTOR (5 downto 0);
    signal left_next_V_1_reg_715 : STD_LOGIC_VECTOR (8 downto 0);
    signal right_next_V_1_reg_720 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_6_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal child_depth_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal child_depth_V_ce0 : STD_LOGIC;
    signal child_depth_V_we0 : STD_LOGIC;
    signal child_depth_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal child_depth_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal child_depth_V_ce1 : STD_LOGIC;
    signal internal_length_hist_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal internal_length_hist_ce0 : STD_LOGIC;
    signal internal_length_hist_we0 : STD_LOGIC;
    signal internal_length_hist_d0 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_i_i_reg_282 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln17_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_0104_0_i_i_phi_fu_306_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_p_09_0_i_i_phi_fu_315_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_p_07_0_i_i_phi_fu_335_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_p_0106_0_i_i_phi_fu_355_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_op2_assign_phi_fu_364_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter0_phi_ln700_i_i_reg_371 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln19_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln25_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_5_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal sext_ln61_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal zext_ln544_8_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_V_1_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln879_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln544_6_fu_512_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_530 : BOOLEAN;
    signal ap_condition_534 : BOOLEAN;

    component compute_bit_lengtkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component compute_bit_lengtlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (8 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    child_depth_V_U : component compute_bit_lengtkbM
    generic map (
        DataWidth => 6,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => child_depth_V_address0,
        ce0 => child_depth_V_ce0,
        we0 => child_depth_V_we0,
        d0 => child_depth_V_d0,
        q0 => child_depth_V_q0,
        address1 => child_depth_V_address1,
        ce1 => child_depth_V_ce1,
        q1 => child_depth_V_q1);

    internal_length_hist_U : component compute_bit_lengtlbW
    generic map (
        DataWidth => 9,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => internal_length_hist_address0,
        ce0 => internal_length_hist_ce0,
        we0 => internal_length_hist_we0,
        d0 => internal_length_hist_d0,
        q0 => internal_length_hist_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp1_iter0_phi_ln700_i_i_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_534)) then 
                    ap_phi_reg_pp1_iter0_phi_ln700_i_i_reg_371 <= ap_const_lv2_2;
                elsif ((ap_const_boolean_1 = ap_condition_530)) then 
                    ap_phi_reg_pp1_iter0_phi_ln700_i_i_reg_371 <= ap_const_lv2_1;
                end if;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_reg_282 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_393_p2 = ap_const_lv1_0))) then 
                i_0_i_i_reg_282 <= i_5_fu_399_p2;
            end if; 
        end if;
    end process;

    left_curr_V_1_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
                left_curr_V_1_reg_321 <= left_next_V_1_reg_715;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                left_curr_V_1_reg_321 <= left_next_V_reg_612;
            end if; 
        end if;
    end process;

    op2_assign_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
                op2_assign_reg_361 <= i_6_reg_725;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                op2_assign_reg_361 <= sext_ln25_1_fu_451_p1;
            end if; 
        end if;
    end process;

    p_0104_0_i_i_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
                p_0104_0_i_i_reg_303 <= reg_384;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_0104_0_i_i_reg_303 <= parent_next_V_reg_601;
            end if; 
        end if;
    end process;

    p_0106_0_i_i_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
                p_0106_0_i_i_reg_352 <= child_depth_curr_V_1_reg_710;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_0106_0_i_i_reg_352 <= child_depth_curr_V_reg_637;
            end if; 
        end if;
    end process;

    p_07_0_i_i_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
                p_07_0_i_i_reg_332 <= right_curr_V_1_reg_341;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_07_0_i_i_reg_332 <= right_curr_V_reg_617;
            end if; 
        end if;
    end process;

    p_097_0_i_i_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (tmp_reg_652_pp1_iter1_reg = ap_const_lv1_0))) then 
                p_097_0_i_i_reg_293 <= child_depth_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_097_0_i_i_reg_293 <= child_depth_next_V_reg_642;
            end if; 
        end if;
    end process;

    p_09_0_i_i_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
                p_09_0_i_i_reg_312 <= left_curr_V_1_reg_321;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_09_0_i_i_reg_312 <= left_curr_V_reg_607;
            end if; 
        end if;
    end process;

    right_curr_V_1_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
                right_curr_V_1_reg_341 <= right_next_V_1_reg_720;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                right_curr_V_1_reg_341 <= right_next_V_reg_622;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln23_reg_555 <= add_ln23_fu_411_p2;
                add_ln26_reg_566 <= add_ln26_fu_421_p2;
                i_reg_560 <= i_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_fu_454_p3 = ap_const_lv1_0))) then
                add_ln61_reg_685 <= add_ln61_fu_495_p2;
                icmp_ln879_reg_680 <= icmp_ln879_fu_489_p2;
                icmp_ln883_1_reg_666 <= icmp_ln883_1_fu_474_p2;
                icmp_ln883_reg_662 <= icmp_ln883_fu_468_p2;
                length_V_reg_656 <= length_V_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_reg_652 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then
                child_depth_curr_V_1_reg_710 <= child_depth_curr_V_1_fu_523_p3;
                i_6_reg_725 <= i_6_fu_529_p2;
                left_next_V_1_reg_715 <= left_V_q0;
                right_next_V_1_reg_720 <= right_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                child_depth_curr_V_reg_637 <= child_depth_V_q0;
                child_depth_next_V_reg_642 <= child_depth_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (((icmp_ln883_reg_662 = ap_const_lv1_0) and (tmp_reg_652 = ap_const_lv1_0)) or ((icmp_ln883_1_reg_666 = ap_const_lv1_0) and (tmp_reg_652 = ap_const_lv1_0))))) then
                count_V_reg_690 <= internal_length_hist_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (((icmp_ln883_fu_468_p2 = ap_const_lv1_0) and (tmp_fu_454_p3 = ap_const_lv1_0)) or ((icmp_ln883_1_fu_474_p2 = ap_const_lv1_0) and (tmp_fu_454_p3 = ap_const_lv1_0))))) then
                internal_length_hist_2_reg_675 <= zext_ln544_7_fu_480_p1(6 - 1 downto 0);
                    zext_ln544_7_reg_670(5 downto 0) <= zext_ln544_7_fu_480_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                left_curr_V_reg_607 <= left_V_q0;
                left_next_V_reg_612 <= left_V_q1;
                parent_next_V_reg_601 <= parent_V_q1;
                right_curr_V_reg_617 <= right_V_q0;
                right_next_V_reg_622 <= right_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_reg_652 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then
                reg_384 <= parent_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_reg_652 <= ap_phi_mux_op2_assign_phi_fu_364_p4(31 downto 31);
                tmp_reg_652_pp1_iter1_reg <= tmp_reg_652;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln13_reg_540(8 downto 0) <= zext_ln13_fu_389_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_540(9) <= '0';
    zext_ln544_7_reg_670(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, extLd_loc_empty_n, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, tmp_fu_454_p3, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage1_subdone, icmp_ln17_fu_393_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_393_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_fu_454_p3 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_fu_454_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_fu_411_p2 <= std_logic_vector(unsigned(zext_ln13_reg_540) + unsigned(ap_const_lv10_3FE));
    add_ln26_fu_421_p2 <= std_logic_vector(unsigned(zext_ln13_reg_540) + unsigned(ap_const_lv10_3FC));
    add_ln61_fu_495_p2 <= std_logic_vector(unsigned(ap_phi_mux_op2_assign_phi_fu_364_p4) + unsigned(ap_const_lv32_FFFFFFFE));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, extLd_loc_empty_n)
    begin
                ap_block_state1 <= ((extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_530_assign_proc : process(tmp_reg_652, icmp_ln883_reg_662, icmp_ln883_1_reg_666, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
                ap_condition_530 <= ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (((icmp_ln883_1_reg_666 = ap_const_lv1_1) and (icmp_ln883_reg_662 = ap_const_lv1_0) and (tmp_reg_652 = ap_const_lv1_0)) or ((icmp_ln883_reg_662 = ap_const_lv1_1) and (icmp_ln883_1_reg_666 = ap_const_lv1_0) and (tmp_reg_652 = ap_const_lv1_0))));
    end process;


    ap_condition_534_assign_proc : process(tmp_fu_454_p3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln883_fu_468_p2, icmp_ln883_1_fu_474_p2)
    begin
                ap_condition_534 <= ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln883_1_fu_474_p2 = ap_const_lv1_0) and (icmp_ln883_fu_468_p2 = ap_const_lv1_0) and (tmp_fu_454_p3 = ap_const_lv1_0));
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(tmp_fu_454_p3)
    begin
        if ((tmp_fu_454_p3 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_op2_assign_phi_fu_364_p4_assign_proc : process(op2_assign_reg_361, tmp_reg_652, ap_CS_fsm_pp1_stage0, i_6_reg_725, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
            ap_phi_mux_op2_assign_phi_fu_364_p4 <= i_6_reg_725;
        else 
            ap_phi_mux_op2_assign_phi_fu_364_p4 <= op2_assign_reg_361;
        end if; 
    end process;


    ap_phi_mux_p_0104_0_i_i_phi_fu_306_p4_assign_proc : process(p_0104_0_i_i_reg_303, reg_384, tmp_reg_652, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
            ap_phi_mux_p_0104_0_i_i_phi_fu_306_p4 <= reg_384;
        else 
            ap_phi_mux_p_0104_0_i_i_phi_fu_306_p4 <= p_0104_0_i_i_reg_303;
        end if; 
    end process;


    ap_phi_mux_p_0106_0_i_i_phi_fu_355_p4_assign_proc : process(p_0106_0_i_i_reg_352, tmp_reg_652, ap_CS_fsm_pp1_stage0, child_depth_curr_V_1_reg_710, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
            ap_phi_mux_p_0106_0_i_i_phi_fu_355_p4 <= child_depth_curr_V_1_reg_710;
        else 
            ap_phi_mux_p_0106_0_i_i_phi_fu_355_p4 <= p_0106_0_i_i_reg_352;
        end if; 
    end process;


    ap_phi_mux_p_07_0_i_i_phi_fu_335_p4_assign_proc : process(p_07_0_i_i_reg_332, right_curr_V_1_reg_341, tmp_reg_652, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
            ap_phi_mux_p_07_0_i_i_phi_fu_335_p4 <= right_curr_V_1_reg_341;
        else 
            ap_phi_mux_p_07_0_i_i_phi_fu_335_p4 <= p_07_0_i_i_reg_332;
        end if; 
    end process;


    ap_phi_mux_p_09_0_i_i_phi_fu_315_p4_assign_proc : process(p_09_0_i_i_reg_312, left_curr_V_1_reg_321, tmp_reg_652, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_reg_652 = ap_const_lv1_0))) then 
            ap_phi_mux_p_09_0_i_i_phi_fu_315_p4 <= left_curr_V_1_reg_321;
        else 
            ap_phi_mux_p_09_0_i_i_phi_fu_315_p4 <= p_09_0_i_i_reg_312;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    child_depth_V_address0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage1, sext_ln23_fu_426_p1, zext_ln544_fu_442_p1, zext_ln40_fu_501_p1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            child_depth_V_address0 <= zext_ln40_fu_501_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            child_depth_V_address0 <= zext_ln544_fu_442_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            child_depth_V_address0 <= sext_ln23_fu_426_p1(8 - 1 downto 0);
        else 
            child_depth_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    child_depth_V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln544_5_fu_447_p1, zext_ln544_8_fu_535_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            child_depth_V_address1 <= zext_ln544_8_fu_535_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            child_depth_V_address1 <= zext_ln544_5_fu_447_p1(8 - 1 downto 0);
        else 
            child_depth_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    child_depth_V_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            child_depth_V_ce0 <= ap_const_logic_1;
        else 
            child_depth_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    child_depth_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            child_depth_V_ce1 <= ap_const_logic_1;
        else 
            child_depth_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    child_depth_V_d0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, length_V_reg_656, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            child_depth_V_d0 <= length_V_reg_656;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            child_depth_V_d0 <= ap_const_lv6_1;
        else 
            child_depth_V_d0 <= "XXXXXX";
        end if; 
    end process;


    child_depth_V_we0_assign_proc : process(ap_enable_reg_pp1_iter0, tmp_reg_652, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_reg_652 = ap_const_lv1_0)))) then 
            child_depth_V_we0 <= ap_const_logic_1;
        else 
            child_depth_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    child_depth_curr_V_1_fu_523_p3 <= 
        length_V_reg_656 when (icmp_ln879_reg_680(0) = '1') else 
        p_097_0_i_i_reg_293;
    count_V_1_fu_516_p2 <= std_logic_vector(unsigned(count_V_reg_690) + unsigned(zext_ln544_6_fu_512_p1));

    extLd_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, extLd_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            extLd_loc_blk_n <= extLd_loc_empty_n;
        else 
            extLd_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    extLd_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, extLd_loc_empty_n)
    begin
        if ((not(((extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            extLd_loc_read <= ap_const_logic_1;
        else 
            extLd_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    i_5_fu_399_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_282) + unsigned(ap_const_lv7_1));
    i_6_fu_529_p2 <= std_logic_vector(unsigned(op2_assign_reg_361) + unsigned(ap_const_lv32_FFFFFFFF));
    i_fu_416_p2 <= std_logic_vector(unsigned(zext_ln13_reg_540) + unsigned(ap_const_lv10_3FD));
    icmp_ln17_fu_393_p2 <= "1" when (i_0_i_i_reg_282 = ap_const_lv7_40) else "0";
    icmp_ln879_fu_489_p2 <= "1" when (zext_ln879_fu_485_p1 = ap_phi_mux_op2_assign_phi_fu_364_p4) else "0";
    icmp_ln883_1_fu_474_p2 <= "1" when (ap_phi_mux_p_07_0_i_i_phi_fu_335_p4 = ap_const_lv9_1FF) else "0";
    icmp_ln883_fu_468_p2 <= "1" when (ap_phi_mux_p_09_0_i_i_phi_fu_315_p4 = ap_const_lv9_1FF) else "0";

    internal_length_hist_address0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, zext_ln544_7_fu_480_p1, internal_length_hist_2_reg_675, ap_block_pp1_stage0, zext_ln19_fu_405_p1, ap_block_pp1_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            internal_length_hist_address0 <= internal_length_hist_2_reg_675;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            internal_length_hist_address0 <= zext_ln544_7_fu_480_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            internal_length_hist_address0 <= zext_ln19_fu_405_p1(6 - 1 downto 0);
        else 
            internal_length_hist_address0 <= "XXXXXX";
        end if; 
    end process;


    internal_length_hist_ce0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage2_11001, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            internal_length_hist_ce0 <= ap_const_logic_1;
        else 
            internal_length_hist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    internal_length_hist_d0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_block_pp1_stage2, count_V_1_fu_516_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            internal_length_hist_d0 <= count_V_1_fu_516_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            internal_length_hist_d0 <= ap_const_lv9_0;
        else 
            internal_length_hist_d0 <= "XXXXXXXXX";
        end if; 
    end process;


    internal_length_hist_we0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage2_11001, tmp_reg_652, ap_CS_fsm_state2, icmp_ln883_reg_662, icmp_ln883_1_reg_666, icmp_ln17_fu_393_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_393_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (((icmp_ln883_reg_662 = ap_const_lv1_0) and (tmp_reg_652 = ap_const_lv1_0)) or ((icmp_ln883_1_reg_666 = ap_const_lv1_0) and (tmp_reg_652 = ap_const_lv1_0)))))) then 
            internal_length_hist_we0 <= ap_const_logic_1;
        else 
            internal_length_hist_we0 <= ap_const_logic_0;
        end if; 
    end process;


    left_V_address0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage1, sext_ln25_fu_430_p1, ap_block_pp1_stage1, sext_ln61_fu_506_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            left_V_address0 <= sext_ln61_fu_506_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_V_address0 <= sext_ln25_fu_430_p1(8 - 1 downto 0);
        else 
            left_V_address0 <= "XXXXXXXX";
        end if; 
    end process;

    left_V_address1 <= sext_ln26_fu_436_p1(8 - 1 downto 0);

    left_V_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            left_V_ce0 <= ap_const_logic_1;
        else 
            left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    left_V_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_V_ce1 <= ap_const_logic_1;
        else 
            left_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    length_V_fu_462_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_0106_0_i_i_phi_fu_355_p4) + unsigned(ap_const_lv6_1));

    length_histogram_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, zext_ln544_7_reg_670, zext_ln19_fu_405_p1, ap_block_pp1_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            length_histogram_V_address0 <= zext_ln544_7_reg_670(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            length_histogram_V_address0 <= zext_ln19_fu_405_p1(6 - 1 downto 0);
        else 
            length_histogram_V_address0 <= "XXXXXX";
        end if; 
    end process;


    length_histogram_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage2_11001, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            length_histogram_V_ce0 <= ap_const_logic_1;
        else 
            length_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    length_histogram_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_block_pp1_stage2, count_V_1_fu_516_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            length_histogram_V_d0 <= count_V_1_fu_516_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            length_histogram_V_d0 <= ap_const_lv9_0;
        else 
            length_histogram_V_d0 <= "XXXXXXXXX";
        end if; 
    end process;


    length_histogram_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage2_11001, tmp_reg_652, ap_CS_fsm_state2, icmp_ln883_reg_662, icmp_ln883_1_reg_666, icmp_ln17_fu_393_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_393_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (((icmp_ln883_reg_662 = ap_const_lv1_0) and (tmp_reg_652 = ap_const_lv1_0)) or ((icmp_ln883_1_reg_666 = ap_const_lv1_0) and (tmp_reg_652 = ap_const_lv1_0)))))) then 
            length_histogram_V_we0 <= ap_const_logic_1;
        else 
            length_histogram_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    parent_V_address0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage1, sext_ln25_fu_430_p1, ap_block_pp1_stage1, sext_ln61_fu_506_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            parent_V_address0 <= sext_ln61_fu_506_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            parent_V_address0 <= sext_ln25_fu_430_p1(8 - 1 downto 0);
        else 
            parent_V_address0 <= "XXXXXXXX";
        end if; 
    end process;

    parent_V_address1 <= sext_ln26_fu_436_p1(8 - 1 downto 0);

    parent_V_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            parent_V_ce0 <= ap_const_logic_1;
        else 
            parent_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    parent_V_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            parent_V_ce1 <= ap_const_logic_1;
        else 
            parent_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    right_V_address0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage1, sext_ln25_fu_430_p1, ap_block_pp1_stage1, sext_ln61_fu_506_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            right_V_address0 <= sext_ln61_fu_506_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            right_V_address0 <= sext_ln25_fu_430_p1(8 - 1 downto 0);
        else 
            right_V_address0 <= "XXXXXXXX";
        end if; 
    end process;

    right_V_address1 <= sext_ln26_fu_436_p1(8 - 1 downto 0);

    right_V_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            right_V_ce0 <= ap_const_logic_1;
        else 
            right_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    right_V_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            right_V_ce1 <= ap_const_logic_1;
        else 
            right_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln23_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_reg_555),64));

        sext_ln25_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_reg_560),32));

        sext_ln25_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_reg_560),64));

        sext_ln26_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_reg_566),64));

        sext_ln61_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln61_reg_685),64));

    tmp_fu_454_p3 <= ap_phi_mux_op2_assign_phi_fu_364_p4(31 downto 31);
    zext_ln13_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(extLd_loc_dout),10));
    zext_ln19_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_282),64));
    zext_ln40_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_361),64));
    zext_ln544_5_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(parent_next_V_reg_601),64));
    zext_ln544_6_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp1_iter0_phi_ln700_i_i_reg_371),9));
    zext_ln544_7_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_V_fu_462_p2),64));
    zext_ln544_8_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_384),64));
    zext_ln544_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_384),64));
    zext_ln879_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0104_0_i_i_phi_fu_306_p4),32));
end behav;
