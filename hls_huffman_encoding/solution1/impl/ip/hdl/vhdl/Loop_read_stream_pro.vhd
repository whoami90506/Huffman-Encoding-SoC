-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_read_stream_pro is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    symbol_histogram_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
    symbol_histogram_TVALID : IN STD_LOGIC;
    symbol_histogram_TREADY : OUT STD_LOGIC;
    symbol_histogram_TKEEP : IN STD_LOGIC_VECTOR (5 downto 0);
    symbol_histogram_TSTRB : IN STD_LOGIC_VECTOR (5 downto 0);
    symbol_histogram_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    symbol_histogram_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    symbol_histogram_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    symbol_histogram_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_buffer_0_din : OUT STD_LOGIC_VECTOR (40 downto 0);
    stream_buffer_0_full_n : IN STD_LOGIC;
    stream_buffer_0_write : OUT STD_LOGIC;
    stream_buffer_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_buffer_1_ce0 : OUT STD_LOGIC;
    stream_buffer_1_we0 : OUT STD_LOGIC;
    stream_buffer_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    stream_buffer_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_buffer_2_ce0 : OUT STD_LOGIC;
    stream_buffer_2_we0 : OUT STD_LOGIC;
    stream_buffer_2_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    stream_buffer_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_buffer_3_ce0 : OUT STD_LOGIC;
    stream_buffer_3_we0 : OUT STD_LOGIC;
    stream_buffer_3_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_buffer_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_buffer_4_ce0 : OUT STD_LOGIC;
    stream_buffer_4_we0 : OUT STD_LOGIC;
    stream_buffer_4_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_buffer_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_buffer_5_ce0 : OUT STD_LOGIC;
    stream_buffer_5_we0 : OUT STD_LOGIC;
    stream_buffer_5_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_buffer_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_buffer_6_ce0 : OUT STD_LOGIC;
    stream_buffer_6_we0 : OUT STD_LOGIC;
    stream_buffer_6_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Loop_read_stream_pro is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal symbol_histogram_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln25_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_buffer_0_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln25_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_reg_177 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_194_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_data_V_fu_244_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_data_V_reg_257 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal zext_ln27_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_data_V_U_apdone_blk : STD_LOGIC;
    signal symbol_histogram_TDATA_int : STD_LOGIC_VECTOR (47 downto 0);
    signal symbol_histogram_TVALID_int : STD_LOGIC;
    signal symbol_histogram_TREADY_int : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal symbol_histogram_TKEEP_int : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_symbol_histogram_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal symbol_histogram_TSTRB_int : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_symbol_histogram_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_user_V_U_apdone_blk : STD_LOGIC;
    signal symbol_histogram_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_symbol_histogram_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_last_V_U_apdone_blk : STD_LOGIC;
    signal symbol_histogram_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_symbol_histogram_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_id_V_U_apdone_blk : STD_LOGIC;
    signal symbol_histogram_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_symbol_histogram_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal symbol_histogram_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_symbol_histogram_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_symbol_histogram_V_dest_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_symbol_histogram_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 48)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => symbol_histogram_TDATA,
        vld_in => symbol_histogram_TVALID,
        ack_in => regslice_both_symbol_histogram_V_data_V_U_ack_in,
        data_out => symbol_histogram_TDATA_int,
        vld_out => symbol_histogram_TVALID_int,
        ack_out => symbol_histogram_TREADY_int,
        apdone_blk => regslice_both_symbol_histogram_V_data_V_U_apdone_blk);

    regslice_both_symbol_histogram_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => symbol_histogram_TKEEP,
        vld_in => symbol_histogram_TVALID,
        ack_in => regslice_both_symbol_histogram_V_keep_V_U_ack_in,
        data_out => symbol_histogram_TKEEP_int,
        vld_out => regslice_both_symbol_histogram_V_keep_V_U_vld_out,
        ack_out => symbol_histogram_TREADY_int,
        apdone_blk => regslice_both_symbol_histogram_V_keep_V_U_apdone_blk);

    regslice_both_symbol_histogram_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => symbol_histogram_TSTRB,
        vld_in => symbol_histogram_TVALID,
        ack_in => regslice_both_symbol_histogram_V_strb_V_U_ack_in,
        data_out => symbol_histogram_TSTRB_int,
        vld_out => regslice_both_symbol_histogram_V_strb_V_U_vld_out,
        ack_out => symbol_histogram_TREADY_int,
        apdone_blk => regslice_both_symbol_histogram_V_strb_V_U_apdone_blk);

    regslice_both_symbol_histogram_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => symbol_histogram_TUSER,
        vld_in => symbol_histogram_TVALID,
        ack_in => regslice_both_symbol_histogram_V_user_V_U_ack_in,
        data_out => symbol_histogram_TUSER_int,
        vld_out => regslice_both_symbol_histogram_V_user_V_U_vld_out,
        ack_out => symbol_histogram_TREADY_int,
        apdone_blk => regslice_both_symbol_histogram_V_user_V_U_apdone_blk);

    regslice_both_symbol_histogram_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => symbol_histogram_TLAST,
        vld_in => symbol_histogram_TVALID,
        ack_in => regslice_both_symbol_histogram_V_last_V_U_ack_in,
        data_out => symbol_histogram_TLAST_int,
        vld_out => regslice_both_symbol_histogram_V_last_V_U_vld_out,
        ack_out => symbol_histogram_TREADY_int,
        apdone_blk => regslice_both_symbol_histogram_V_last_V_U_apdone_blk);

    regslice_both_symbol_histogram_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => symbol_histogram_TID,
        vld_in => symbol_histogram_TVALID,
        ack_in => regslice_both_symbol_histogram_V_id_V_U_ack_in,
        data_out => symbol_histogram_TID_int,
        vld_out => regslice_both_symbol_histogram_V_id_V_U_vld_out,
        ack_out => symbol_histogram_TREADY_int,
        apdone_blk => regslice_both_symbol_histogram_V_id_V_U_apdone_blk);

    regslice_both_symbol_histogram_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => symbol_histogram_TDEST,
        vld_in => symbol_histogram_TVALID,
        ack_in => regslice_both_symbol_histogram_V_dest_V_U_ack_in,
        data_out => symbol_histogram_TDEST_int,
        vld_out => regslice_both_symbol_histogram_V_dest_V_U_vld_out,
        ack_out => symbol_histogram_TREADY_int,
        apdone_blk => regslice_both_symbol_histogram_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_177 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0))) then 
                i_0_i_reg_177 <= i_fu_194_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln25_reg_248 <= icmp_ln25_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0))) then
                tmp_data_V_reg_257 <= tmp_data_V_fu_244_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln25_fu_188_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln25_fu_188_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_buffer_0_full_n, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_enable_reg_pp0_iter1, icmp_ln25_reg_248, symbol_histogram_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((stream_buffer_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln25_reg_248 = ap_const_lv1_0)) or ((symbol_histogram_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_buffer_0_full_n, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_enable_reg_pp0_iter1, icmp_ln25_reg_248, symbol_histogram_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((stream_buffer_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln25_reg_248 = ap_const_lv1_0)) or ((symbol_histogram_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_buffer_0_full_n, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_enable_reg_pp0_iter1, icmp_ln25_reg_248, symbol_histogram_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((stream_buffer_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln25_reg_248 = ap_const_lv1_0)) or ((symbol_histogram_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln25_fu_188_p2, symbol_histogram_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((symbol_histogram_TVALID_int = ap_const_logic_0) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(stream_buffer_0_full_n, icmp_ln25_reg_248)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((stream_buffer_0_full_n = ap_const_logic_0) and (icmp_ln25_reg_248 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln25_fu_188_p2)
    begin
        if ((icmp_ln25_fu_188_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    i_fu_194_p2 <= std_logic_vector(unsigned(i_0_i_reg_177) + unsigned(ap_const_lv9_1));
    icmp_ln25_fu_188_p2 <= "1" when (i_0_i_reg_177 = ap_const_lv9_100) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    stream_buffer_0_blk_n_assign_proc : process(stream_buffer_0_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_248)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln25_reg_248 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            stream_buffer_0_blk_n <= stream_buffer_0_full_n;
        else 
            stream_buffer_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_buffer_0_din <= tmp_data_V_reg_257;

    stream_buffer_0_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_248, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_248 = ap_const_lv1_0))) then 
            stream_buffer_0_write <= ap_const_logic_1;
        else 
            stream_buffer_0_write <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_1_address0 <= zext_ln27_fu_200_p1(8 - 1 downto 0);

    stream_buffer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_buffer_1_ce0 <= ap_const_logic_1;
        else 
            stream_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_1_d0 <= symbol_histogram_TKEEP_int;

    stream_buffer_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0))) then 
            stream_buffer_1_we0 <= ap_const_logic_1;
        else 
            stream_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_2_address0 <= zext_ln27_fu_200_p1(8 - 1 downto 0);

    stream_buffer_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_buffer_2_ce0 <= ap_const_logic_1;
        else 
            stream_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_2_d0 <= symbol_histogram_TSTRB_int;

    stream_buffer_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0))) then 
            stream_buffer_2_we0 <= ap_const_logic_1;
        else 
            stream_buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_3_address0 <= zext_ln27_fu_200_p1(8 - 1 downto 0);

    stream_buffer_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_buffer_3_ce0 <= ap_const_logic_1;
        else 
            stream_buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_3_d0 <= symbol_histogram_TUSER_int;

    stream_buffer_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0))) then 
            stream_buffer_3_we0 <= ap_const_logic_1;
        else 
            stream_buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_4_address0 <= zext_ln27_fu_200_p1(8 - 1 downto 0);

    stream_buffer_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_buffer_4_ce0 <= ap_const_logic_1;
        else 
            stream_buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_4_d0 <= symbol_histogram_TLAST_int;

    stream_buffer_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0))) then 
            stream_buffer_4_we0 <= ap_const_logic_1;
        else 
            stream_buffer_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_5_address0 <= zext_ln27_fu_200_p1(8 - 1 downto 0);

    stream_buffer_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_buffer_5_ce0 <= ap_const_logic_1;
        else 
            stream_buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_5_d0 <= symbol_histogram_TID_int;

    stream_buffer_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0))) then 
            stream_buffer_5_we0 <= ap_const_logic_1;
        else 
            stream_buffer_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_6_address0 <= zext_ln27_fu_200_p1(8 - 1 downto 0);

    stream_buffer_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_buffer_6_ce0 <= ap_const_logic_1;
        else 
            stream_buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_6_d0 <= symbol_histogram_TDEST_int;

    stream_buffer_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0))) then 
            stream_buffer_6_we0 <= ap_const_logic_1;
        else 
            stream_buffer_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    symbol_histogram_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln25_fu_188_p2, symbol_histogram_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            symbol_histogram_TDATA_blk_n <= symbol_histogram_TVALID_int;
        else 
            symbol_histogram_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    symbol_histogram_TREADY_assign_proc : process(symbol_histogram_TVALID, regslice_both_symbol_histogram_V_data_V_U_ack_in)
    begin
        if (((symbol_histogram_TVALID = ap_const_logic_1) and (regslice_both_symbol_histogram_V_data_V_U_ack_in = ap_const_logic_1))) then 
            symbol_histogram_TREADY <= ap_const_logic_1;
        else 
            symbol_histogram_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    symbol_histogram_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln25_fu_188_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_188_p2 = ap_const_lv1_0))) then 
            symbol_histogram_TREADY_int <= ap_const_logic_1;
        else 
            symbol_histogram_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_V_fu_244_p1 <= symbol_histogram_TDATA_int(41 - 1 downto 0);
    zext_ln27_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_177),64));
end behav;
