-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity truncate_tree is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_length_histogram_V_ce0 : OUT STD_LOGIC;
    input_length_histogram_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    output_length_histogram1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_length_histogram1_V_ce0 : OUT STD_LOGIC;
    output_length_histogram1_V_we0 : OUT STD_LOGIC;
    output_length_histogram1_V_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_length_histogram1_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    output_length_histogram1_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_length_histogram1_V_ce1 : OUT STD_LOGIC;
    output_length_histogram1_V_we1 : OUT STD_LOGIC;
    output_length_histogram1_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_length_histogram1_V_q1 : IN STD_LOGIC_VECTOR (9 downto 0);
    output_length_histogram2_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_length_histogram2_V_ce0 : OUT STD_LOGIC;
    output_length_histogram2_V_we0 : OUT STD_LOGIC;
    output_length_histogram2_V_d0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of truncate_tree is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_1B : STD_LOGIC_VECTOR (9 downto 0) := "0000011011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_206 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_212 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_223_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_361 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln11_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_reg_366 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln10_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_length_histogr_1_reg_384 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_length_histog_1_reg_392 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln16_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_250_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_397 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_length_histog_2_reg_402 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln879_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_267_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_V_reg_414 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal output_length_histog_6_reg_428 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal output_length_histog_8_reg_434 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_fu_347_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_443 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln45_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_448 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln44_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_153 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i1_0_reg_164 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_V_reg_175 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i2_0_reg_186 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln19_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_V_2_fu_60 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_V_3_fu_302_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln701_fu_313_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_fu_320_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln700_1_fu_327_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln701_1_fu_334_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_fu_287_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_291_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln44_fu_341_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_164 <= ap_const_lv6_3F;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fu_197_p2 = ap_const_lv1_1))) then 
                i1_0_reg_164 <= i_1_reg_397;
            end if; 
        end if;
    end process;

    i2_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_0_reg_186 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i2_0_reg_186 <= i_2_reg_443;
            end if; 
        end if;
    end process;

    i_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_153 <= i_reg_361;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_153 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_V_2_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_V_2_fu_60 <= j_V_3_fu_302_p2;
            elsif (((grp_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln879_reg_410 = ap_const_lv1_1))) then 
                j_V_2_fu_60 <= j_V_reg_414;
            elsif (((icmp_ln10_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_V_2_fu_60 <= ap_const_lv10_1B;
            end if; 
        end if;
    end process;

    reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                reg_206 <= output_length_histogram1_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_206 <= output_length_histogram1_V_q0;
            end if; 
        end if;
    end process;

    reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_212 <= output_length_histogram1_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_212 <= output_length_histogram1_V_q1;
            end if; 
        end if;
    end process;

    t_V_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln879_fu_261_p2 = ap_const_lv1_1))) then 
                t_V_reg_175 <= ap_const_lv10_1B;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_fu_197_p2 = ap_const_lv1_1) and (icmp_ln879_reg_410 = ap_const_lv1_1))) then 
                t_V_reg_175 <= j_V_reg_414;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln16_fu_239_p2 = ap_const_lv1_1))) then
                i_1_reg_397 <= i_1_fu_250_p2;
                output_length_histog_1_reg_392 <= zext_ln19_fu_245_p1(6 - 1 downto 0);
                output_length_histog_2_reg_402 <= zext_ln32_fu_256_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_2_reg_443 <= i_2_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_361 <= i_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp_ln879_reg_410 <= icmp_ln879_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                input_length_histogr_1_reg_384 <= input_length_histogram_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_V_reg_414 <= j_V_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                output_length_histog_6_reg_428 <= zext_ln544_1_fu_282_p1(6 - 1 downto 0);
                output_length_histog_8_reg_434 <= zext_ln544_2_fu_297_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_217_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln11_reg_366(6 downto 0) <= zext_ln11_fu_229_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    zext_ln45_reg_448(6 downto 0) <= zext_ln45_fu_353_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln11_reg_366(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_448(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_217_p2, ap_CS_fsm_state5, icmp_ln16_fu_239_p2, icmp_ln879_fu_261_p2, icmp_ln879_reg_410, ap_CS_fsm_state7, grp_fu_197_p2, ap_CS_fsm_state16, icmp_ln44_fu_341_p2, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln16_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fu_197_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((grp_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln879_fu_261_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and ((grp_fu_197_p2 = ap_const_lv1_0) or (icmp_ln879_reg_410 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln44_fu_341_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln700_1_fu_327_p2 <= std_logic_vector(unsigned(reg_206) + unsigned(ap_const_lv10_1));
    add_ln700_fu_320_p2 <= std_logic_vector(unsigned(reg_212) + unsigned(ap_const_lv10_2));
    add_ln701_1_fu_334_p2 <= std_logic_vector(unsigned(reg_212) + unsigned(ap_const_lv10_3FE));
    add_ln701_fu_313_p2 <= std_logic_vector(unsigned(reg_206) + unsigned(ap_const_lv10_3FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state16, icmp_ln44_fu_341_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln44_fu_341_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, icmp_ln44_fu_341_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln44_fu_341_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_197_p2 <= "1" when (output_length_histogram1_V_q0 = ap_const_lv10_0) else "0";
    i_1_fu_250_p2 <= std_logic_vector(unsigned(i1_0_reg_164) + unsigned(ap_const_lv6_3F));
    i_2_fu_347_p2 <= std_logic_vector(unsigned(i2_0_reg_186) + unsigned(ap_const_lv7_1));
    i_fu_223_p2 <= std_logic_vector(unsigned(i_0_reg_153) + unsigned(ap_const_lv7_1));
    icmp_ln10_fu_217_p2 <= "1" when (i_0_reg_153 = ap_const_lv7_40) else "0";
    icmp_ln16_fu_239_p2 <= "1" when (unsigned(i1_0_reg_164) > unsigned(ap_const_lv6_1B)) else "0";
    icmp_ln44_fu_341_p2 <= "1" when (i2_0_reg_186 = ap_const_lv7_40) else "0";
    icmp_ln879_fu_261_p2 <= "1" when (j_V_2_fu_60 = ap_const_lv10_1B) else "0";
    input_length_histogram_V_address0 <= zext_ln11_fu_229_p1(6 - 1 downto 0);

    input_length_histogram_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_length_histogram_V_ce0 <= ap_const_logic_1;
        else 
            input_length_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_V_3_fu_302_p2 <= std_logic_vector(unsigned(j_V_2_fu_60) + unsigned(ap_const_lv10_1));
    j_V_fu_267_p2 <= std_logic_vector(unsigned(t_V_reg_175) + unsigned(ap_const_lv10_3FF));

    output_length_histogram1_V_address0_assign_proc : process(zext_ln11_reg_366, output_length_histog_1_reg_392, ap_CS_fsm_state8, ap_CS_fsm_state10, output_length_histog_8_reg_434, ap_CS_fsm_state4, zext_ln544_fu_273_p1, zext_ln544_1_fu_282_p1, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_length_histogram1_V_address0 <= output_length_histog_8_reg_434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_length_histogram1_V_address0 <= zext_ln544_1_fu_282_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_length_histogram1_V_address0 <= zext_ln544_fu_273_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_length_histogram1_V_address0 <= output_length_histog_1_reg_392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_length_histogram1_V_address0 <= zext_ln11_reg_366(6 - 1 downto 0);
        else 
            output_length_histogram1_V_address0 <= "XXXXXX";
        end if; 
    end process;


    output_length_histogram1_V_address1_assign_proc : process(output_length_histog_2_reg_402, output_length_histog_6_reg_428, ap_CS_fsm_state10, ap_CS_fsm_state16, zext_ln45_fu_353_p1, zext_ln544_2_fu_297_p1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_length_histogram1_V_address1 <= zext_ln45_fu_353_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_length_histogram1_V_address1 <= output_length_histog_2_reg_402;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_length_histogram1_V_address1 <= output_length_histog_6_reg_428;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_length_histogram1_V_address1 <= zext_ln544_2_fu_297_p1(6 - 1 downto 0);
        else 
            output_length_histogram1_V_address1 <= "XXXXXX";
        end if; 
    end process;


    output_length_histogram1_V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_length_histogram1_V_ce0 <= ap_const_logic_1;
        else 
            output_length_histogram1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_length_histogram1_V_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_length_histogram1_V_ce1 <= ap_const_logic_1;
        else 
            output_length_histogram1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_length_histogram1_V_d0_assign_proc : process(input_length_histogr_1_reg_384, ap_CS_fsm_state4, ap_CS_fsm_state12, add_ln700_fu_320_p2, ap_CS_fsm_state15, add_ln701_1_fu_334_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_length_histogram1_V_d0 <= add_ln701_1_fu_334_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_length_histogram1_V_d0 <= add_ln700_fu_320_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_length_histogram1_V_d0 <= input_length_histogr_1_reg_384;
        else 
            output_length_histogram1_V_d0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_length_histogram1_V_d1_assign_proc : process(ap_CS_fsm_state12, add_ln701_fu_313_p2, ap_CS_fsm_state15, add_ln700_1_fu_327_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_length_histogram1_V_d1 <= add_ln700_1_fu_327_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_length_histogram1_V_d1 <= add_ln701_fu_313_p2;
        else 
            output_length_histogram1_V_d1 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_length_histogram1_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_length_histogram1_V_we0 <= ap_const_logic_1;
        else 
            output_length_histogram1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_length_histogram1_V_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_length_histogram1_V_we1 <= ap_const_logic_1;
        else 
            output_length_histogram1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_length_histogram2_V_address0 <= zext_ln45_reg_448(6 - 1 downto 0);

    output_length_histogram2_V_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_length_histogram2_V_ce0 <= ap_const_logic_1;
        else 
            output_length_histogram2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_length_histogram2_V_d0 <= reg_206;

    output_length_histogram2_V_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_length_histogram2_V_we0 <= ap_const_logic_1;
        else 
            output_length_histogram2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_291_p2 <= std_logic_vector(unsigned(zext_ln215_fu_287_p1) + unsigned(ap_const_lv11_1));
    zext_ln11_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_153),64));
    zext_ln19_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_164),64));
    zext_ln215_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_2_fu_60),11));
    zext_ln32_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_250_p2),64));
    zext_ln45_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_186),64));
    zext_ln544_1_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_2_fu_60),64));
    zext_ln544_2_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_291_p2),64));
    zext_ln544_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_fu_267_p2),64));
end behav;
