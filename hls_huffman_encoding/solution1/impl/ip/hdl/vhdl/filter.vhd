-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_value_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in_value_V_TVALID : IN STD_LOGIC;
    in_value_V_TREADY : OUT STD_LOGIC;
    in_frequency_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_frequency_V_TVALID : IN STD_LOGIC;
    in_frequency_V_TREADY : OUT STD_LOGIC;
    out_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_value_V_ce0 : OUT STD_LOGIC;
    out_value_V_we0 : OUT STD_LOGIC;
    out_value_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    out_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_frequency_V_ce0 : OUT STD_LOGIC;
    out_frequency_V_we0 : OUT STD_LOGIC;
    out_frequency_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
    n_out_full_n : IN STD_LOGIC;
    n_out_write : OUT STD_LOGIC );
end;


architecture behav of filter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_value_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln11_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_frequency_V_TDATA_blk_n : STD_LOGIC;
    signal n_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_136_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_predicate_op24_read_state2 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal i_0_i_reg_110 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln544_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_fu_60 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_V_fu_159_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_in_value_V_U_apdone_blk : STD_LOGIC;
    signal in_value_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal in_value_V_TVALID_int : STD_LOGIC;
    signal in_value_V_TREADY_int : STD_LOGIC;
    signal regslice_both_in_value_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_frequency_V_U_apdone_blk : STD_LOGIC;
    signal in_frequency_V_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal in_frequency_V_TVALID_int : STD_LOGIC;
    signal in_frequency_V_TREADY_int : STD_LOGIC;
    signal regslice_both_in_frequency_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_in_value_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_value_V_TDATA,
        vld_in => in_value_V_TVALID,
        ack_in => regslice_both_in_value_V_U_ack_in,
        data_out => in_value_V_TDATA_int,
        vld_out => in_value_V_TVALID_int,
        ack_out => in_value_V_TREADY_int,
        apdone_blk => regslice_both_in_value_V_U_apdone_blk);

    regslice_both_in_frequency_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_frequency_V_TDATA,
        vld_in => in_frequency_V_TVALID,
        ack_in => regslice_both_in_frequency_V_U_ack_in,
        data_out => in_frequency_V_TDATA_int,
        vld_out => in_frequency_V_TVALID_int,
        ack_out => in_frequency_V_TREADY_int,
        apdone_blk => regslice_both_in_frequency_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((n_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_110 <= i_fu_136_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_110 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_V_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln883_fu_142_p2 = ap_const_lv1_0) and (icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_fu_60 <= j_V_fu_159_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_fu_60 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, n_out_full_n, ap_CS_fsm_state2, icmp_ln11_fu_130_p2, ap_CS_fsm_state3, ap_predicate_op24_read_state2, in_value_V_TVALID_int, in_frequency_V_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln11_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((n_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln11_fu_130_p2, ap_predicate_op24_read_state2, in_value_V_TVALID_int, in_frequency_V_TVALID_int)
    begin
                ap_block_state2 <= (((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, n_out_full_n, ap_CS_fsm_state3)
    begin
        if (((n_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op24_read_state2_assign_proc : process(icmp_ln11_fu_130_p2, icmp_ln883_fu_142_p2)
    begin
                ap_predicate_op24_read_state2 <= ((icmp_ln883_fu_142_p2 = ap_const_lv1_0) and (icmp_ln11_fu_130_p2 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    i_fu_136_p2 <= std_logic_vector(unsigned(i_0_i_reg_110) + unsigned(ap_const_lv9_1));
    icmp_ln11_fu_130_p2 <= "1" when (i_0_i_reg_110 = ap_const_lv9_100) else "0";
    icmp_ln883_fu_142_p2 <= "1" when (in_frequency_V_TDATA_int = ap_const_lv32_0) else "0";

    in_frequency_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_130_p2, in_frequency_V_TVALID_int)
    begin
        if (((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_frequency_V_TDATA_blk_n <= in_frequency_V_TVALID_int;
        else 
            in_frequency_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_frequency_V_TREADY_assign_proc : process(in_frequency_V_TVALID, regslice_both_in_frequency_V_U_ack_in)
    begin
        if (((in_frequency_V_TVALID = ap_const_logic_1) and (regslice_both_in_frequency_V_U_ack_in = ap_const_logic_1))) then 
            in_frequency_V_TREADY <= ap_const_logic_1;
        else 
            in_frequency_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_frequency_V_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_130_p2, ap_predicate_op24_read_state2, in_value_V_TVALID_int, in_frequency_V_TVALID_int)
    begin
        if ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_frequency_V_TREADY_int <= ap_const_logic_1;
        else 
            in_frequency_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    in_value_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_130_p2, icmp_ln883_fu_142_p2, in_value_V_TVALID_int)
    begin
        if (((icmp_ln883_fu_142_p2 = ap_const_lv1_0) and (icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_value_V_TDATA_blk_n <= in_value_V_TVALID_int;
        else 
            in_value_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_value_V_TREADY_assign_proc : process(in_value_V_TVALID, regslice_both_in_value_V_U_ack_in)
    begin
        if (((in_value_V_TVALID = ap_const_logic_1) and (regslice_both_in_value_V_U_ack_in = ap_const_logic_1))) then 
            in_value_V_TREADY <= ap_const_logic_1;
        else 
            in_value_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_value_V_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_130_p2, ap_predicate_op24_read_state2, in_value_V_TVALID_int, in_frequency_V_TVALID_int)
    begin
        if ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op24_read_state2 = ap_const_boolean_1))) then 
            in_value_V_TREADY_int <= ap_const_logic_1;
        else 
            in_value_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(n_out_full_n, ap_CS_fsm_state3)
    begin
        if (((n_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_159_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(t_V_fu_60));

    n_out_blk_n_assign_proc : process(n_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            n_out_blk_n <= n_out_full_n;
        else 
            n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    n_out_din <= t_V_fu_60;

    n_out_write_assign_proc : process(n_out_full_n, ap_CS_fsm_state3)
    begin
        if (((n_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            n_out_write <= ap_const_logic_1;
        else 
            n_out_write <= ap_const_logic_0;
        end if; 
    end process;

    out_frequency_V_address0 <= zext_ln544_fu_148_p1(8 - 1 downto 0);

    out_frequency_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_130_p2, ap_predicate_op24_read_state2, in_value_V_TVALID_int, in_frequency_V_TVALID_int)
    begin
        if ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_frequency_V_ce0 <= ap_const_logic_1;
        else 
            out_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_frequency_V_d0 <= in_frequency_V_TDATA_int;

    out_frequency_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_130_p2, icmp_ln883_fu_142_p2, ap_predicate_op24_read_state2, in_value_V_TVALID_int, in_frequency_V_TVALID_int)
    begin
        if ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln883_fu_142_p2 = ap_const_lv1_0) and (icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_frequency_V_we0 <= ap_const_logic_1;
        else 
            out_frequency_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_value_V_address0 <= zext_ln544_fu_148_p1(8 - 1 downto 0);

    out_value_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_130_p2, ap_predicate_op24_read_state2, in_value_V_TVALID_int, in_frequency_V_TVALID_int)
    begin
        if ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_value_V_ce0 <= ap_const_logic_1;
        else 
            out_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_value_V_d0 <= in_value_V_TDATA_int(9 - 1 downto 0);

    out_value_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_130_p2, icmp_ln883_fu_142_p2, ap_predicate_op24_read_state2, in_value_V_TVALID_int, in_frequency_V_TVALID_int)
    begin
        if ((not((((in_value_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or ((icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (in_frequency_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln883_fu_142_p2 = ap_const_lv1_0) and (icmp_ln11_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_value_V_we0 <= ap_const_logic_1;
        else 
            out_value_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln544_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_fu_60),64));
end behav;
