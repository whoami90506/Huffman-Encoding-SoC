-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity create_tree is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_value_V_ce0 : OUT STD_LOGIC;
    in_value_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    in_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_frequency_V_ce0 : OUT STD_LOGIC;
    in_frequency_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    extLd_loc_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    extLd_loc_empty_n : IN STD_LOGIC;
    extLd_loc_read : OUT STD_LOGIC;
    parent_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    parent_V_ce0 : OUT STD_LOGIC;
    parent_V_we0 : OUT STD_LOGIC;
    parent_V_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    left_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    left_V_ce0 : OUT STD_LOGIC;
    left_V_we0 : OUT STD_LOGIC;
    left_V_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    right_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    right_V_ce0 : OUT STD_LOGIC;
    right_V_we0 : OUT STD_LOGIC;
    right_V_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    extLd_loc_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    extLd_loc_out_full_n : IN STD_LOGIC;
    extLd_loc_out_write : OUT STD_LOGIC );
end;


architecture behav of create_tree is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal extLd_loc_blk_n : STD_LOGIC;
    signal extLd_loc_out_blk_n : STD_LOGIC;
    signal frequency_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_313 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_loc_read_reg_490 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal add_ln16_fu_328_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_reg_496 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln16_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_343_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_505 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln544_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_reg_510 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln27_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln29_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_534 : STD_LOGIC_VECTOR (63 downto 0);
    signal left_V_addr_reg_541 : STD_LOGIC_VECTOR (7 downto 0);
    signal tree_count_V_fu_400_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tree_count_V_reg_546 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_count_V_fu_406_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_count_V_reg_551 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln544_5_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_5_reg_556 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln43_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal frequency_V_ce0 : STD_LOGIC;
    signal frequency_V_we0 : STD_LOGIC;
    signal frequency_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_3_reg_215 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_p_0168_2_i_i_phi_fu_288_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal t_V_reg_227 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_p_094_2_i_i_phi_fu_300_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal op_assign_reg_239 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_t_V_5_phi_fu_255_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_V_5_reg_252 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_t_V_4_phi_fu_266_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_V_4_reg_263 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_090_0_i_i_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln43_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tree_count_V_1_fu_464_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_count_V_1_fu_478_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln544_3_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_6_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal frequency_V_addr_2_gep_fu_199_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_4_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln209_1_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_cast_fu_324_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln243_fu_334_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln27_1_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln43_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component create_tree_frequibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    frequency_V_U : component create_tree_frequibs
    generic map (
        DataWidth => 32,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => frequency_V_address0,
        ce0 => frequency_V_ce0,
        we0 => frequency_V_we0,
        d0 => frequency_V_d0,
        q0 => frequency_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    op_assign_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                op_assign_reg_239 <= i_reg_505;
            elsif ((not(((extLd_loc_out_full_n = ap_const_logic_0) or (extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                op_assign_reg_239 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_090_0_i_i_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_reg_501 = ap_const_lv1_1))) then
                if ((or_ln27_reg_530 = ap_const_lv1_0)) then 
                    p_090_0_i_i_reg_274 <= reg_308;
                elsif ((or_ln27_reg_530 = ap_const_lv1_1)) then 
                    p_090_0_i_i_reg_274 <= reg_319;
                end if;
            end if; 
        end if;
    end process;

    t_V_3_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_3_reg_215 <= ap_phi_mux_p_0168_2_i_i_phi_fu_288_p4;
            elsif ((not(((extLd_loc_out_full_n = ap_const_logic_0) or (extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_3_reg_215 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    t_V_4_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_reg_501 = ap_const_lv1_1))) then
                if ((or_ln27_reg_530 = ap_const_lv1_0)) then 
                    t_V_4_reg_263 <= t_V_reg_227;
                elsif ((or_ln27_reg_530 = ap_const_lv1_1)) then 
                    t_V_4_reg_263 <= in_count_V_reg_551;
                end if;
            end if; 
        end if;
    end process;

    t_V_5_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_reg_501 = ap_const_lv1_1))) then
                if ((or_ln27_reg_530 = ap_const_lv1_0)) then 
                    t_V_5_reg_252 <= tree_count_V_reg_546;
                elsif ((or_ln27_reg_530 = ap_const_lv1_1)) then 
                    t_V_5_reg_252 <= t_V_3_reg_215;
                end if;
            end if; 
        end if;
    end process;

    t_V_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_227 <= ap_phi_mux_p_094_2_i_i_phi_fu_300_p4;
            elsif ((not(((extLd_loc_out_full_n = ap_const_logic_0) or (extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_227 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((extLd_loc_out_full_n = ap_const_logic_0) or (extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln16_reg_496 <= add_ln16_fu_328_p2;
                extLd_loc_read_reg_490 <= extLd_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_505 <= i_fu_343_p2;
                icmp_ln16_reg_501 <= icmp_ln16_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_reg_501 = ap_const_lv1_1))) then
                icmp_ln43_reg_576 <= icmp_ln43_fu_423_p2;
                    zext_ln544_5_reg_556(9 downto 0) <= zext_ln544_5_fu_412_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (or_ln27_fu_389_p2 = ap_const_lv1_1))) then
                in_count_V_reg_551 <= in_count_V_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                left_V_addr_reg_541 <= zext_ln29_fu_395_p1(8 - 1 downto 0);
                or_ln27_reg_530 <= or_ln27_fu_389_p2;
                    zext_ln29_reg_534(9 downto 0) <= zext_ln29_fu_395_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_308 <= frequency_V_q0;
                reg_313 <= in_value_V_q0;
                reg_319 <= in_frequency_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (or_ln27_fu_389_p2 = ap_const_lv1_0))) then
                tree_count_V_reg_546 <= tree_count_V_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_338_p2 = ap_const_lv1_1))) then
                    zext_ln544_reg_510(9 downto 0) <= zext_ln544_fu_349_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln544_reg_510(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_534(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln544_5_reg_556(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, extLd_loc_empty_n, extLd_loc_out_full_n, icmp_ln16_fu_338_p2, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((extLd_loc_out_full_n = ap_const_logic_0) or (extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln16_fu_328_p2 <= std_logic_vector(unsigned(extLd_cast_fu_324_p1) + unsigned(ap_const_lv11_7FF));
    add_ln209_1_fu_457_p2 <= std_logic_vector(unsigned(reg_308) + unsigned(p_090_0_i_i_reg_274));
    add_ln209_fu_471_p2 <= std_logic_vector(unsigned(reg_319) + unsigned(p_090_0_i_i_reg_274));
    and_ln27_fu_377_p2 <= (xor_ln27_fu_371_p2 and icmp_ln27_fu_360_p2);
    and_ln43_fu_440_p2 <= (xor_ln43_fu_434_p2 and icmp_ln43_reg_576);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, extLd_loc_empty_n, extLd_loc_out_full_n)
    begin
                ap_block_state1 <= ((extLd_loc_out_full_n = ap_const_logic_0) or (extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0168_2_i_i_phi_fu_288_p4_assign_proc : process(ap_CS_fsm_state6, t_V_5_reg_252, or_ln43_fu_451_p2, tree_count_V_1_fu_464_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((or_ln43_fu_451_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_0168_2_i_i_phi_fu_288_p4 <= tree_count_V_1_fu_464_p2;
            elsif ((or_ln43_fu_451_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_0168_2_i_i_phi_fu_288_p4 <= t_V_5_reg_252;
            else 
                ap_phi_mux_p_0168_2_i_i_phi_fu_288_p4 <= "XXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_0168_2_i_i_phi_fu_288_p4 <= "XXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_p_094_2_i_i_phi_fu_300_p4_assign_proc : process(ap_CS_fsm_state6, t_V_4_reg_263, or_ln43_fu_451_p2, in_count_V_1_fu_478_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((or_ln43_fu_451_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_094_2_i_i_phi_fu_300_p4 <= t_V_4_reg_263;
            elsif ((or_ln43_fu_451_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_094_2_i_i_phi_fu_300_p4 <= in_count_V_1_fu_478_p2;
            else 
                ap_phi_mux_p_094_2_i_i_phi_fu_300_p4 <= "XXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_094_2_i_i_phi_fu_300_p4 <= "XXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_t_V_4_phi_fu_266_p4_assign_proc : process(icmp_ln16_reg_501, or_ln27_reg_530, in_count_V_reg_551, ap_CS_fsm_state4, t_V_reg_227)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_reg_501 = ap_const_lv1_1))) then
            if ((or_ln27_reg_530 = ap_const_lv1_0)) then 
                ap_phi_mux_t_V_4_phi_fu_266_p4 <= t_V_reg_227;
            elsif ((or_ln27_reg_530 = ap_const_lv1_1)) then 
                ap_phi_mux_t_V_4_phi_fu_266_p4 <= in_count_V_reg_551;
            else 
                ap_phi_mux_t_V_4_phi_fu_266_p4 <= "XXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_t_V_4_phi_fu_266_p4 <= "XXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_t_V_5_phi_fu_255_p4_assign_proc : process(icmp_ln16_reg_501, or_ln27_reg_530, tree_count_V_reg_546, ap_CS_fsm_state4, t_V_3_reg_215)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_reg_501 = ap_const_lv1_1))) then
            if ((or_ln27_reg_530 = ap_const_lv1_0)) then 
                ap_phi_mux_t_V_5_phi_fu_255_p4 <= tree_count_V_reg_546;
            elsif ((or_ln27_reg_530 = ap_const_lv1_1)) then 
                ap_phi_mux_t_V_5_phi_fu_255_p4 <= t_V_3_reg_215;
            else 
                ap_phi_mux_t_V_5_phi_fu_255_p4 <= "XXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_t_V_5_phi_fu_255_p4 <= "XXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    extLd_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(extLd_loc_dout),11));

    extLd_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, extLd_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            extLd_loc_blk_n <= extLd_loc_empty_n;
        else 
            extLd_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    extLd_loc_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, extLd_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            extLd_loc_out_blk_n <= extLd_loc_out_full_n;
        else 
            extLd_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    extLd_loc_out_din <= extLd_loc_dout;

    extLd_loc_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, extLd_loc_empty_n, extLd_loc_out_full_n)
    begin
        if ((not(((extLd_loc_out_full_n = ap_const_logic_0) or (extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            extLd_loc_out_write <= ap_const_logic_1;
        else 
            extLd_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    extLd_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, extLd_loc_empty_n, extLd_loc_out_full_n)
    begin
        if ((not(((extLd_loc_out_full_n = ap_const_logic_0) or (extLd_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            extLd_loc_read <= ap_const_logic_1;
        else 
            extLd_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    frequency_V_addr_2_gep_fu_199_p3 <= zext_ln29_reg_534(8 - 1 downto 0);

    frequency_V_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln544_fu_349_p1, zext_ln29_reg_534, zext_ln544_5_fu_412_p1, ap_CS_fsm_state4, ap_CS_fsm_state6, or_ln43_fu_451_p2, frequency_V_addr_2_gep_fu_199_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_1))) then 
            frequency_V_address0 <= frequency_V_addr_2_gep_fu_199_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_0))) then 
            frequency_V_address0 <= zext_ln29_reg_534(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            frequency_V_address0 <= zext_ln544_5_fu_412_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            frequency_V_address0 <= zext_ln544_fu_349_p1(8 - 1 downto 0);
        else 
            frequency_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    frequency_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, or_ln43_fu_451_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_1)))) then 
            frequency_V_ce0 <= ap_const_logic_1;
        else 
            frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    frequency_V_d0_assign_proc : process(ap_CS_fsm_state6, or_ln43_fu_451_p2, add_ln209_1_fu_457_p2, add_ln209_fu_471_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((or_ln43_fu_451_p2 = ap_const_lv1_1)) then 
                frequency_V_d0 <= add_ln209_fu_471_p2;
            elsif ((or_ln43_fu_451_p2 = ap_const_lv1_0)) then 
                frequency_V_d0 <= add_ln209_1_fu_457_p2;
            else 
                frequency_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            frequency_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    frequency_V_we0_assign_proc : process(ap_CS_fsm_state6, or_ln43_fu_451_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_1)))) then 
            frequency_V_we0 <= ap_const_logic_1;
        else 
            frequency_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_343_p2 <= std_logic_vector(unsigned(op_assign_reg_239) + unsigned(ap_const_lv10_1));
    icmp_ln16_fu_338_p2 <= "1" when (signed(zext_ln243_fu_334_p1) < signed(add_ln16_reg_496)) else "0";
    icmp_ln27_1_fu_365_p2 <= "1" when (unsigned(frequency_V_q0) < unsigned(in_frequency_V_q0)) else "0";
    icmp_ln27_fu_360_p2 <= "1" when (unsigned(t_V_reg_227) < unsigned(extLd_loc_read_reg_490)) else "0";
    icmp_ln43_1_fu_428_p2 <= "1" when (unsigned(reg_308) < unsigned(reg_319)) else "0";
    icmp_ln43_fu_423_p2 <= "1" when (unsigned(ap_phi_mux_t_V_4_phi_fu_266_p4) < unsigned(extLd_loc_read_reg_490)) else "0";
    icmp_ln879_2_fu_445_p2 <= "1" when (t_V_5_reg_252 = op_assign_reg_239) else "0";
    icmp_ln879_fu_383_p2 <= "1" when (t_V_3_reg_215 = op_assign_reg_239) else "0";
    in_count_V_1_fu_478_p2 <= std_logic_vector(unsigned(t_V_4_reg_263) + unsigned(ap_const_lv10_1));
    in_count_V_fu_406_p2 <= std_logic_vector(unsigned(t_V_reg_227) + unsigned(ap_const_lv10_1));

    in_frequency_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln544_3_fu_354_p1, zext_ln544_6_fu_417_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_frequency_V_address0 <= zext_ln544_6_fu_417_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_frequency_V_address0 <= zext_ln544_3_fu_354_p1(8 - 1 downto 0);
        else 
            in_frequency_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    in_frequency_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_frequency_V_ce0 <= ap_const_logic_1;
        else 
            in_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_value_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln544_3_fu_354_p1, zext_ln544_6_fu_417_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_value_V_address0 <= zext_ln544_6_fu_417_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_value_V_address0 <= zext_ln544_3_fu_354_p1(8 - 1 downto 0);
        else 
            in_value_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    in_value_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_value_V_ce0 <= ap_const_logic_1;
        else 
            in_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    left_V_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln29_fu_395_p1, left_V_addr_reg_541, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_V_address0 <= left_V_addr_reg_541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            left_V_address0 <= zext_ln29_fu_395_p1(8 - 1 downto 0);
        else 
            left_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    left_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            left_V_ce0 <= ap_const_logic_1;
        else 
            left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    left_V_d0_assign_proc : process(ap_CS_fsm_state3, reg_313, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_V_d0 <= reg_313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            left_V_d0 <= ap_const_lv10_3FF;
        else 
            left_V_d0 <= "XXXXXXXXXX";
        end if; 
    end process;


    left_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln16_reg_501, or_ln27_fu_389_p2, or_ln27_reg_530, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (or_ln27_fu_389_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (or_ln27_reg_530 = ap_const_lv1_1) and (icmp_ln16_reg_501 = ap_const_lv1_1)))) then 
            left_V_we0 <= ap_const_logic_1;
        else 
            left_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln27_fu_389_p2 <= (icmp_ln879_fu_383_p2 or and_ln27_fu_377_p2);
    or_ln43_fu_451_p2 <= (icmp_ln879_2_fu_445_p2 or and_ln43_fu_440_p2);

    parent_V_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln544_reg_510, zext_ln544_5_reg_556, ap_CS_fsm_state6, zext_ln544_4_fu_485_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            parent_V_address0 <= zext_ln544_4_fu_485_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            parent_V_address0 <= zext_ln544_5_reg_556(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            parent_V_address0 <= zext_ln544_reg_510(8 - 1 downto 0);
        else 
            parent_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    parent_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            parent_V_ce0 <= ap_const_logic_1;
        else 
            parent_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    parent_V_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, op_assign_reg_239, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            parent_V_d0 <= ap_const_lv10_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            parent_V_d0 <= op_assign_reg_239;
        else 
            parent_V_d0 <= "XXXXXXXXXX";
        end if; 
    end process;


    parent_V_we0_assign_proc : process(ap_CS_fsm_state3, or_ln27_fu_389_p2, ap_CS_fsm_state6, or_ln43_fu_451_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (or_ln27_fu_389_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_0)))) then 
            parent_V_we0 <= ap_const_logic_1;
        else 
            parent_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    right_V_address0 <= zext_ln29_reg_534(8 - 1 downto 0);

    right_V_ce0_assign_proc : process(ap_CS_fsm_state6, or_ln43_fu_451_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_1)))) then 
            right_V_ce0 <= ap_const_logic_1;
        else 
            right_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    right_V_d0_assign_proc : process(reg_313, ap_CS_fsm_state6, or_ln43_fu_451_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((or_ln43_fu_451_p2 = ap_const_lv1_1)) then 
                right_V_d0 <= reg_313;
            elsif ((or_ln43_fu_451_p2 = ap_const_lv1_0)) then 
                right_V_d0 <= ap_const_lv10_3FF;
            else 
                right_V_d0 <= "XXXXXXXXXX";
            end if;
        else 
            right_V_d0 <= "XXXXXXXXXX";
        end if; 
    end process;


    right_V_we0_assign_proc : process(ap_CS_fsm_state6, or_ln43_fu_451_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln43_fu_451_p2 = ap_const_lv1_1)))) then 
            right_V_we0 <= ap_const_logic_1;
        else 
            right_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tree_count_V_1_fu_464_p2 <= std_logic_vector(unsigned(t_V_5_reg_252) + unsigned(ap_const_lv10_1));
    tree_count_V_fu_400_p2 <= std_logic_vector(unsigned(t_V_3_reg_215) + unsigned(ap_const_lv10_1));
    xor_ln27_fu_371_p2 <= (icmp_ln27_1_fu_365_p2 xor ap_const_lv1_1);
    xor_ln43_fu_434_p2 <= (icmp_ln43_1_fu_428_p2 xor ap_const_lv1_1);
    zext_ln243_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op_assign_reg_239),11));
    zext_ln29_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op_assign_reg_239),64));
    zext_ln544_3_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_227),64));
    zext_ln544_4_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_reg_215),64));
    zext_ln544_5_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_5_phi_fu_255_p4),64));
    zext_ln544_6_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_4_phi_fu_266_p4),64));
    zext_ln544_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_reg_215),64));
end behav;
