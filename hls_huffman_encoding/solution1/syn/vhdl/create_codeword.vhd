-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity create_codeword is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    symbol_bits_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    symbol_bits_V_ce0 : OUT STD_LOGIC;
    symbol_bits_V_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    codeword_length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    codeword_length_histogram_V_ce0 : OUT STD_LOGIC;
    codeword_length_histogram_V_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    stream_buffer_user_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_buffer_user_V_ce0 : OUT STD_LOGIC;
    stream_buffer_user_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_buffer_id_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_buffer_id_V_ce0 : OUT STD_LOGIC;
    stream_buffer_id_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_buffer_dest_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_buffer_dest_V_ce0 : OUT STD_LOGIC;
    stream_buffer_dest_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    encoding_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    encoding_TVALID : OUT STD_LOGIC;
    encoding_TREADY : IN STD_LOGIC;
    encoding_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    encoding_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    encoding_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    encoding_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    encoding_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    encoding_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of create_codeword is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal encoding_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln26_reg_458 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_0199_0_reg_217 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_0_reg_230 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln18_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_428 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_258_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln21_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_437 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_V_fu_283_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln26_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_4_fu_297_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_462 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_last_V_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_last_V_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_V_reg_492 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln883_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_codeword_V_add_1_reg_502 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_user_V_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_id_V_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_dest_V_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal first_codeword_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal first_codeword_V_ce0 : STD_LOGIC;
    signal first_codeword_V_we0 : STD_LOGIC;
    signal first_codeword_V_d0 : STD_LOGIC_VECTOR (26 downto 0);
    signal first_codeword_V_q0 : STD_LOGIC_VECTOR (26 downto 0);
    signal i1_0_reg_241 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state9_io : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln28_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_V_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_data_V_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln700_fu_412_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln1503_fu_273_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln1503_fu_269_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1503_fu_277_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln215_fu_338_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_fu_341_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln790_fu_355_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln556_fu_359_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_s_fu_328_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln556_fu_365_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln808_fu_375_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_fu_369_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln808_fu_379_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Result_1_fu_347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln796_fu_385_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln796_1_fu_389_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln796_fu_393_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_fu_401_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal regslice_both_encoding_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal encoding_TVALID_int : STD_LOGIC;
    signal encoding_TREADY_int : STD_LOGIC;
    signal regslice_both_encoding_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_encoding_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_encoding_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_encoding_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_encoding_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_encoding_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_encoding_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_encoding_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_encoding_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_encoding_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_encoding_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_encoding_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_encoding_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_encoding_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_encoding_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_encoding_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_encoding_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_encoding_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_encoding_V_dest_V_U_vld_out : STD_LOGIC;

    component create_codeword_flbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (26 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    first_codeword_V_U : component create_codeword_flbW
    generic map (
        DataWidth => 27,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => first_codeword_V_address0,
        ce0 => first_codeword_V_ce0,
        we0 => first_codeword_V_we0,
        d0 => first_codeword_V_d0,
        q0 => first_codeword_V_q0);

    regslice_both_encoding_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_V_fu_102,
        vld_in => encoding_TVALID_int,
        ack_in => encoding_TREADY_int,
        data_out => encoding_TDATA,
        vld_out => regslice_both_encoding_V_data_V_U_vld_out,
        ack_out => encoding_TREADY,
        apdone_blk => regslice_both_encoding_V_data_V_U_apdone_blk);

    regslice_both_encoding_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv4_F,
        vld_in => encoding_TVALID_int,
        ack_in => regslice_both_encoding_V_keep_V_U_ack_in_dummy,
        data_out => encoding_TKEEP,
        vld_out => regslice_both_encoding_V_keep_V_U_vld_out,
        ack_out => encoding_TREADY,
        apdone_blk => regslice_both_encoding_V_keep_V_U_apdone_blk);

    regslice_both_encoding_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv4_F,
        vld_in => encoding_TVALID_int,
        ack_in => regslice_both_encoding_V_strb_V_U_ack_in_dummy,
        data_out => encoding_TSTRB,
        vld_out => regslice_both_encoding_V_strb_V_U_vld_out,
        ack_out => encoding_TREADY,
        apdone_blk => regslice_both_encoding_V_strb_V_U_apdone_blk);

    regslice_both_encoding_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => result_user_V_reg_507,
        vld_in => encoding_TVALID_int,
        ack_in => regslice_both_encoding_V_user_V_U_ack_in_dummy,
        data_out => encoding_TUSER,
        vld_out => regslice_both_encoding_V_user_V_U_vld_out,
        ack_out => encoding_TREADY,
        apdone_blk => regslice_both_encoding_V_user_V_U_apdone_blk);

    regslice_both_encoding_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => result_last_V_reg_477,
        vld_in => encoding_TVALID_int,
        ack_in => regslice_both_encoding_V_last_V_U_ack_in_dummy,
        data_out => encoding_TLAST,
        vld_out => regslice_both_encoding_V_last_V_U_vld_out,
        ack_out => encoding_TREADY,
        apdone_blk => regslice_both_encoding_V_last_V_U_apdone_blk);

    regslice_both_encoding_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => result_id_V_reg_512,
        vld_in => encoding_TVALID_int,
        ack_in => regslice_both_encoding_V_id_V_U_ack_in_dummy,
        data_out => encoding_TID,
        vld_out => regslice_both_encoding_V_id_V_U_vld_out,
        ack_out => encoding_TREADY,
        apdone_blk => regslice_both_encoding_V_id_V_U_apdone_blk);

    regslice_both_encoding_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => result_dest_V_reg_517,
        vld_in => encoding_TVALID_int,
        ack_in => regslice_both_encoding_V_dest_V_U_ack_in_dummy,
        data_out => encoding_TDEST,
        vld_out => regslice_both_encoding_V_dest_V_U_vld_out,
        ack_out => encoding_TREADY,
        apdone_blk => regslice_both_encoding_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((regslice_both_encoding_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_reg_241 <= ap_const_lv9_0;
            elsif (((icmp_ln26_reg_458 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state9_io) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i1_0_reg_241 <= i_4_reg_462;
            end if; 
        end if;
    end process;

    i_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_230 <= ap_const_lv5_0;
            elsif (((icmp_ln18_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_230 <= i_fu_258_p2;
            end if; 
        end if;
    end process;

    p_0199_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0199_0_reg_217(1) <= '0';
                p_0199_0_reg_217(2) <= '0';
                p_0199_0_reg_217(3) <= '0';
                p_0199_0_reg_217(4) <= '0';
                p_0199_0_reg_217(5) <= '0';
                p_0199_0_reg_217(6) <= '0';
                p_0199_0_reg_217(7) <= '0';
                p_0199_0_reg_217(8) <= '0';
                p_0199_0_reg_217(9) <= '0';
                p_0199_0_reg_217(10) <= '0';
                p_0199_0_reg_217(11) <= '0';
                p_0199_0_reg_217(12) <= '0';
                p_0199_0_reg_217(13) <= '0';
                p_0199_0_reg_217(14) <= '0';
                p_0199_0_reg_217(15) <= '0';
                p_0199_0_reg_217(16) <= '0';
                p_0199_0_reg_217(17) <= '0';
                p_0199_0_reg_217(18) <= '0';
                p_0199_0_reg_217(19) <= '0';
                p_0199_0_reg_217(20) <= '0';
                p_0199_0_reg_217(21) <= '0';
                p_0199_0_reg_217(22) <= '0';
                p_0199_0_reg_217(23) <= '0';
                p_0199_0_reg_217(24) <= '0';
                p_0199_0_reg_217(25) <= '0';
                p_0199_0_reg_217(26) <= '0';
            elsif (((icmp_ln18_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                                p_0199_0_reg_217(26 downto 1) <= temp_V_fu_283_p3(26 downto 1);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln883_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                first_codeword_V_add_1_reg_502 <= zext_ln544_fu_323_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_4_reg_462 <= i_4_fu_297_p2;
                icmp_ln26_reg_458 <= icmp_ln26_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_428 <= icmp_ln18_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln883_reg_498 <= icmp_ln883_fu_317_p2;
                length_V_reg_492 <= symbol_bits_V_q0;
                result_dest_V_reg_517 <= stream_buffer_dest_V_q0;
                result_id_V_reg_512 <= stream_buffer_id_V_q0;
                result_user_V_reg_507 <= stream_buffer_user_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                result_last_V_reg_477 <= result_last_V_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln883_reg_498 = ap_const_lv1_0) and (icmp_ln26_reg_458 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_data_V_fu_102(26 downto 0) <= result_data_V_fu_408_p1(26 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln21_reg_437(4 downto 0) <= zext_ln21_fu_264_p1(4 downto 0);
            end if;
        end if;
    end process;
    p_0199_0_reg_217(0) <= '0';
    zext_ln21_reg_437(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_data_V_fu_102(31 downto 27) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln18_fu_252_p2, ap_enable_reg_pp0_iter0, icmp_ln26_fu_291_p2, ap_CS_fsm_state5, ap_block_state8_io, ap_block_pp0_stage0_subdone, ap_block_state9_io, ap_CS_fsm_state10, regslice_both_encoding_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln18_fu_252_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln18_fu_252_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln26_fu_291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_io) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((regslice_both_encoding_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln1503_fu_277_p2 <= std_logic_vector(unsigned(trunc_ln1503_fu_273_p1) + unsigned(zext_ln1503_fu_269_p1));
    add_ln700_fu_412_p2 <= std_logic_vector(unsigned(ap_const_lv27_1) + unsigned(first_codeword_V_q0));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(icmp_ln26_reg_458, encoding_TREADY_int)
    begin
                ap_block_state8_io <= ((icmp_ln26_reg_458 = ap_const_lv1_0) and (encoding_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state9_io_assign_proc : process(icmp_ln26_reg_458, encoding_TREADY_int)
    begin
                ap_block_state9_io <= ((icmp_ln26_reg_458 = ap_const_lv1_0) and (encoding_TREADY_int = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln18_fu_252_p2)
    begin
        if ((icmp_ln18_fu_252_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10, regslice_both_encoding_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_encoding_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, regslice_both_encoding_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_encoding_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    codeword_length_histogram_V_address0 <= zext_ln21_fu_264_p1(6 - 1 downto 0);

    codeword_length_histogram_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            codeword_length_histogram_V_ce0 <= ap_const_logic_1;
        else 
            codeword_length_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    encoding_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state8, icmp_ln26_reg_458, ap_CS_fsm_state9, encoding_TREADY_int)
    begin
        if ((((icmp_ln26_reg_458 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln26_reg_458 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            encoding_TDATA_blk_n <= encoding_TREADY_int;
        else 
            encoding_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    encoding_TVALID <= regslice_both_encoding_V_data_V_U_vld_out;

    encoding_TVALID_int_assign_proc : process(ap_CS_fsm_state8, icmp_ln26_reg_458, ap_block_state8_io)
    begin
        if (((icmp_ln26_reg_458 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io))) then 
            encoding_TVALID_int <= ap_const_logic_1;
        else 
            encoding_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    first_codeword_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln21_reg_437, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, first_codeword_V_add_1_reg_502, ap_block_pp0_stage0, zext_ln544_fu_323_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            first_codeword_V_address0 <= first_codeword_V_add_1_reg_502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            first_codeword_V_address0 <= zext_ln544_fu_323_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            first_codeword_V_address0 <= zext_ln21_reg_437(5 - 1 downto 0);
        else 
            first_codeword_V_address0 <= "XXXXX";
        end if; 
    end process;


    first_codeword_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            first_codeword_V_ce0 <= ap_const_logic_1;
        else 
            first_codeword_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    first_codeword_V_d0_assign_proc : process(p_0199_0_reg_217, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state7, add_ln700_fu_412_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            first_codeword_V_d0 <= add_ln700_fu_412_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            first_codeword_V_d0 <= p_0199_0_reg_217;
        else 
            first_codeword_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    first_codeword_V_we0_assign_proc : process(icmp_ln26_reg_458, icmp_ln18_reg_428, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, icmp_ln883_reg_498, ap_CS_fsm_state7)
    begin
        if ((((icmp_ln18_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln883_reg_498 = ap_const_lv1_0) and (icmp_ln26_reg_458 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            first_codeword_V_we0 <= ap_const_logic_1;
        else 
            first_codeword_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_4_fu_297_p2 <= std_logic_vector(unsigned(i1_0_reg_241) + unsigned(ap_const_lv9_1));
    i_fu_258_p2 <= std_logic_vector(unsigned(i_0_reg_230) + unsigned(ap_const_lv5_1));
    icmp_ln18_fu_252_p2 <= "1" when (i_0_reg_230 = ap_const_lv5_1B) else "0";
    icmp_ln26_fu_291_p2 <= "1" when (i1_0_reg_241 = ap_const_lv9_100) else "0";
    icmp_ln883_fu_317_p2 <= "1" when (symbol_bits_V_q0 = ap_const_lv5_0) else "0";
    lshr_ln808_fu_379_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_328_p4),to_integer(unsigned('0' & zext_ln808_fu_375_p1(27-1 downto 0)))));
    p_Result_1_fu_347_p3 <= ret_V_fu_341_p2(5 downto 5);
    
    p_Result_s_fu_328_p4_proc : process(first_codeword_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(27+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(27+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(27 - 1 downto 0);
    variable p_Result_s_fu_328_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(27 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(27 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(27 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1A(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := first_codeword_V_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(27-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(27-1-unsigned(ap_const_lv32_1A(5-1 downto 0)));
            for p_Result_s_fu_328_p4_i in 0 to 27-1 loop
                v0_cpy(p_Result_s_fu_328_p4_i) := first_codeword_V_q0(27-1-p_Result_s_fu_328_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(27-1 downto 0)))));
        res_mask := res_mask(27-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_328_p4 <= resvalue(27-1 downto 0);
    end process;

    r_V_fu_369_p2 <= std_logic_vector(shift_left(unsigned(p_Result_s_fu_328_p4),to_integer(unsigned('0' & zext_ln556_fu_365_p1(27-1 downto 0)))));
    result_data_V_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_401_p3),32));
    result_last_V_fu_311_p2 <= "1" when (i1_0_reg_241 = ap_const_lv9_FF) else "0";
    ret_V_fu_341_p2 <= std_logic_vector(unsigned(ap_const_lv6_1B) - unsigned(zext_ln215_fu_338_p1));
    select_ln796_fu_393_p3 <= 
        trunc_ln796_fu_385_p1 when (p_Result_1_fu_347_p3(0) = '1') else 
        trunc_ln796_1_fu_389_p1;
    stream_buffer_dest_V_address0 <= zext_ln28_fu_303_p1(8 - 1 downto 0);

    stream_buffer_dest_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stream_buffer_dest_V_ce0 <= ap_const_logic_1;
        else 
            stream_buffer_dest_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_id_V_address0 <= zext_ln28_fu_303_p1(8 - 1 downto 0);

    stream_buffer_id_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stream_buffer_id_V_ce0 <= ap_const_logic_1;
        else 
            stream_buffer_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stream_buffer_user_V_address0 <= zext_ln28_fu_303_p1(8 - 1 downto 0);

    stream_buffer_user_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stream_buffer_user_V_ce0 <= ap_const_logic_1;
        else 
            stream_buffer_user_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln556_fu_359_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln790_fu_355_p1));
    symbol_bits_V_address0 <= zext_ln28_fu_303_p1(8 - 1 downto 0);

    symbol_bits_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            symbol_bits_V_ce0 <= ap_const_logic_1;
        else 
            symbol_bits_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_fu_283_p3 <= (add_ln1503_fu_277_p2 & ap_const_lv1_0);
    tmp_2_fu_401_p3 <= (select_ln796_fu_393_p3 & length_V_reg_492);
    trunc_ln1503_fu_273_p1 <= p_0199_0_reg_217(26 - 1 downto 0);
    trunc_ln790_fu_355_p1 <= ret_V_fu_341_p2(3 - 1 downto 0);
    trunc_ln796_1_fu_389_p1 <= lshr_ln808_fu_379_p2(22 - 1 downto 0);
    trunc_ln796_fu_385_p1 <= r_V_fu_369_p2(22 - 1 downto 0);
    zext_ln1503_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(codeword_length_histogram_V_q0),26));
    zext_ln215_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_V_reg_492),6));
    zext_ln21_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_230),64));
    zext_ln28_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_241),64));
    zext_ln544_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(symbol_bits_V_q0),64));
    zext_ln556_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln556_fu_359_p2),27));
    zext_ln808_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_341_p2),27));
end behav;
