// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "filter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic filter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic filter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> filter::ap_ST_fsm_state1 = "1";
const sc_lv<3> filter::ap_ST_fsm_state2 = "10";
const sc_lv<3> filter::ap_ST_fsm_state3 = "100";
const sc_lv<32> filter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> filter::ap_const_lv32_1 = "1";
const sc_lv<1> filter::ap_const_lv1_0 = "0";
const sc_lv<32> filter::ap_const_lv32_2 = "10";
const sc_lv<9> filter::ap_const_lv9_0 = "000000000";
const sc_lv<9> filter::ap_const_lv9_100 = "100000000";
const sc_lv<9> filter::ap_const_lv9_1 = "1";
const sc_lv<32> filter::ap_const_lv32_20 = "100000";
const sc_lv<32> filter::ap_const_lv32_28 = "101000";
const sc_lv<1> filter::ap_const_lv1_1 = "1";
const bool filter::ap_const_boolean_1 = true;

filter::filter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_in_V_data_V_U = new regslice_both<48>("regslice_both_in_V_data_V_U");
    regslice_both_in_V_data_V_U->ap_clk(ap_clk);
    regslice_both_in_V_data_V_U->ap_rst(ap_rst);
    regslice_both_in_V_data_V_U->data_in(symbol_histogram_TDATA);
    regslice_both_in_V_data_V_U->vld_in(symbol_histogram_TVALID);
    regslice_both_in_V_data_V_U->ack_in(regslice_both_in_V_data_V_U_ack_in);
    regslice_both_in_V_data_V_U->data_out(symbol_histogram_TDATA_int);
    regslice_both_in_V_data_V_U->vld_out(symbol_histogram_TVALID_int);
    regslice_both_in_V_data_V_U->ack_out(symbol_histogram_TREADY_int);
    regslice_both_in_V_data_V_U->apdone_blk(regslice_both_in_V_data_V_U_apdone_blk);
    regslice_both_in_V_keep_V_U = new regslice_both<6>("regslice_both_in_V_keep_V_U");
    regslice_both_in_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_in_V_keep_V_U->ap_rst(ap_rst);
    regslice_both_in_V_keep_V_U->data_in(symbol_histogram_TKEEP);
    regslice_both_in_V_keep_V_U->vld_in(symbol_histogram_TVALID);
    regslice_both_in_V_keep_V_U->ack_in(regslice_both_in_V_keep_V_U_ack_in);
    regslice_both_in_V_keep_V_U->data_out(symbol_histogram_TKEEP_int);
    regslice_both_in_V_keep_V_U->vld_out(regslice_both_in_V_keep_V_U_vld_out);
    regslice_both_in_V_keep_V_U->ack_out(symbol_histogram_TREADY_int);
    regslice_both_in_V_keep_V_U->apdone_blk(regslice_both_in_V_keep_V_U_apdone_blk);
    regslice_both_in_V_strb_V_U = new regslice_both<6>("regslice_both_in_V_strb_V_U");
    regslice_both_in_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_in_V_strb_V_U->ap_rst(ap_rst);
    regslice_both_in_V_strb_V_U->data_in(symbol_histogram_TSTRB);
    regslice_both_in_V_strb_V_U->vld_in(symbol_histogram_TVALID);
    regslice_both_in_V_strb_V_U->ack_in(regslice_both_in_V_strb_V_U_ack_in);
    regslice_both_in_V_strb_V_U->data_out(symbol_histogram_TSTRB_int);
    regslice_both_in_V_strb_V_U->vld_out(regslice_both_in_V_strb_V_U_vld_out);
    regslice_both_in_V_strb_V_U->ack_out(symbol_histogram_TREADY_int);
    regslice_both_in_V_strb_V_U->apdone_blk(regslice_both_in_V_strb_V_U_apdone_blk);
    regslice_both_in_V_user_V_U = new regslice_both<1>("regslice_both_in_V_user_V_U");
    regslice_both_in_V_user_V_U->ap_clk(ap_clk);
    regslice_both_in_V_user_V_U->ap_rst(ap_rst);
    regslice_both_in_V_user_V_U->data_in(symbol_histogram_TUSER);
    regslice_both_in_V_user_V_U->vld_in(symbol_histogram_TVALID);
    regslice_both_in_V_user_V_U->ack_in(regslice_both_in_V_user_V_U_ack_in);
    regslice_both_in_V_user_V_U->data_out(symbol_histogram_TUSER_int);
    regslice_both_in_V_user_V_U->vld_out(regslice_both_in_V_user_V_U_vld_out);
    regslice_both_in_V_user_V_U->ack_out(symbol_histogram_TREADY_int);
    regslice_both_in_V_user_V_U->apdone_blk(regslice_both_in_V_user_V_U_apdone_blk);
    regslice_both_in_V_last_V_U = new regslice_both<1>("regslice_both_in_V_last_V_U");
    regslice_both_in_V_last_V_U->ap_clk(ap_clk);
    regslice_both_in_V_last_V_U->ap_rst(ap_rst);
    regslice_both_in_V_last_V_U->data_in(symbol_histogram_TLAST);
    regslice_both_in_V_last_V_U->vld_in(symbol_histogram_TVALID);
    regslice_both_in_V_last_V_U->ack_in(regslice_both_in_V_last_V_U_ack_in);
    regslice_both_in_V_last_V_U->data_out(symbol_histogram_TLAST_int);
    regslice_both_in_V_last_V_U->vld_out(regslice_both_in_V_last_V_U_vld_out);
    regslice_both_in_V_last_V_U->ack_out(symbol_histogram_TREADY_int);
    regslice_both_in_V_last_V_U->apdone_blk(regslice_both_in_V_last_V_U_apdone_blk);
    regslice_both_in_V_id_V_U = new regslice_both<1>("regslice_both_in_V_id_V_U");
    regslice_both_in_V_id_V_U->ap_clk(ap_clk);
    regslice_both_in_V_id_V_U->ap_rst(ap_rst);
    regslice_both_in_V_id_V_U->data_in(symbol_histogram_TID);
    regslice_both_in_V_id_V_U->vld_in(symbol_histogram_TVALID);
    regslice_both_in_V_id_V_U->ack_in(regslice_both_in_V_id_V_U_ack_in);
    regslice_both_in_V_id_V_U->data_out(symbol_histogram_TID_int);
    regslice_both_in_V_id_V_U->vld_out(regslice_both_in_V_id_V_U_vld_out);
    regslice_both_in_V_id_V_U->ack_out(symbol_histogram_TREADY_int);
    regslice_both_in_V_id_V_U->apdone_blk(regslice_both_in_V_id_V_U_apdone_blk);
    regslice_both_in_V_dest_V_U = new regslice_both<1>("regslice_both_in_V_dest_V_U");
    regslice_both_in_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_in_V_dest_V_U->ap_rst(ap_rst);
    regslice_both_in_V_dest_V_U->data_in(symbol_histogram_TDEST);
    regslice_both_in_V_dest_V_U->vld_in(symbol_histogram_TVALID);
    regslice_both_in_V_dest_V_U->ack_in(regslice_both_in_V_dest_V_U_ack_in);
    regslice_both_in_V_dest_V_U->data_out(symbol_histogram_TDEST_int);
    regslice_both_in_V_dest_V_U->vld_out(regslice_both_in_V_dest_V_U_vld_out);
    regslice_both_in_V_dest_V_U->ack_out(symbol_histogram_TREADY_int);
    regslice_both_in_V_dest_V_U->apdone_blk(regslice_both_in_V_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( symbol_histogram_TVALID_int );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( n_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_frequency_V_fu_174_p1);
    sensitive << ( symbol_histogram_TDATA_int );

    SC_METHOD(thread_i_fu_153_p2);
    sensitive << ( i_0_i_reg_127 );

    SC_METHOD(thread_icmp_ln13_fu_147_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( i_0_i_reg_127 );
    sensitive << ( symbol_histogram_TVALID_int );

    SC_METHOD(thread_icmp_ln883_fu_179_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( frequency_V_fu_174_p1 );
    sensitive << ( symbol_histogram_TVALID_int );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( n_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_V_fu_191_p2);
    sensitive << ( t_V_fu_72 );

    SC_METHOD(thread_n_out_blk_n);
    sensitive << ( n_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_n_out_din);
    sensitive << ( n_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( t_V_fu_72 );

    SC_METHOD(thread_n_out_write);
    sensitive << ( n_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_frequency_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln544_fu_185_p1 );

    SC_METHOD(thread_out_frequency_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( symbol_histogram_TVALID_int );

    SC_METHOD(thread_out_frequency_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( frequency_V_fu_174_p1 );

    SC_METHOD(thread_out_frequency_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( icmp_ln883_fu_179_p2 );
    sensitive << ( symbol_histogram_TVALID_int );

    SC_METHOD(thread_out_value_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln544_fu_185_p1 );

    SC_METHOD(thread_out_value_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( symbol_histogram_TVALID_int );

    SC_METHOD(thread_out_value_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( symbol_histogram_TDATA_int );

    SC_METHOD(thread_out_value_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( icmp_ln883_fu_179_p2 );
    sensitive << ( symbol_histogram_TVALID_int );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_symbol_histogram_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( symbol_histogram_TVALID_int );

    SC_METHOD(thread_symbol_histogram_TREADY);
    sensitive << ( symbol_histogram_TVALID );
    sensitive << ( regslice_both_in_V_data_V_U_ack_in );

    SC_METHOD(thread_symbol_histogram_TREADY_int);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( symbol_histogram_TVALID_int );

    SC_METHOD(thread_zext_ln544_fu_185_p1);
    sensitive << ( t_V_fu_72 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_147_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( symbol_histogram_TVALID_int );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "filter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, symbol_histogram_TDATA, "(port)symbol_histogram_TDATA");
    sc_trace(mVcdFile, symbol_histogram_TVALID, "(port)symbol_histogram_TVALID");
    sc_trace(mVcdFile, symbol_histogram_TREADY, "(port)symbol_histogram_TREADY");
    sc_trace(mVcdFile, symbol_histogram_TKEEP, "(port)symbol_histogram_TKEEP");
    sc_trace(mVcdFile, symbol_histogram_TSTRB, "(port)symbol_histogram_TSTRB");
    sc_trace(mVcdFile, symbol_histogram_TUSER, "(port)symbol_histogram_TUSER");
    sc_trace(mVcdFile, symbol_histogram_TLAST, "(port)symbol_histogram_TLAST");
    sc_trace(mVcdFile, symbol_histogram_TID, "(port)symbol_histogram_TID");
    sc_trace(mVcdFile, symbol_histogram_TDEST, "(port)symbol_histogram_TDEST");
    sc_trace(mVcdFile, out_value_V_address0, "(port)out_value_V_address0");
    sc_trace(mVcdFile, out_value_V_ce0, "(port)out_value_V_ce0");
    sc_trace(mVcdFile, out_value_V_we0, "(port)out_value_V_we0");
    sc_trace(mVcdFile, out_value_V_d0, "(port)out_value_V_d0");
    sc_trace(mVcdFile, out_frequency_V_address0, "(port)out_frequency_V_address0");
    sc_trace(mVcdFile, out_frequency_V_ce0, "(port)out_frequency_V_ce0");
    sc_trace(mVcdFile, out_frequency_V_we0, "(port)out_frequency_V_we0");
    sc_trace(mVcdFile, out_frequency_V_d0, "(port)out_frequency_V_d0");
    sc_trace(mVcdFile, n_out_din, "(port)n_out_din");
    sc_trace(mVcdFile, n_out_full_n, "(port)n_out_full_n");
    sc_trace(mVcdFile, n_out_write, "(port)n_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, symbol_histogram_TDATA_blk_n, "symbol_histogram_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln13_fu_147_p2, "icmp_ln13_fu_147_p2");
    sc_trace(mVcdFile, n_out_blk_n, "n_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_153_p2, "i_fu_153_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, i_0_i_reg_127, "i_0_i_reg_127");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, zext_ln544_fu_185_p1, "zext_ln544_fu_185_p1");
    sc_trace(mVcdFile, icmp_ln883_fu_179_p2, "icmp_ln883_fu_179_p2");
    sc_trace(mVcdFile, t_V_fu_72, "t_V_fu_72");
    sc_trace(mVcdFile, j_V_fu_191_p2, "j_V_fu_191_p2");
    sc_trace(mVcdFile, frequency_V_fu_174_p1, "frequency_V_fu_174_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, regslice_both_in_V_data_V_U_apdone_blk, "regslice_both_in_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, symbol_histogram_TDATA_int, "symbol_histogram_TDATA_int");
    sc_trace(mVcdFile, symbol_histogram_TVALID_int, "symbol_histogram_TVALID_int");
    sc_trace(mVcdFile, symbol_histogram_TREADY_int, "symbol_histogram_TREADY_int");
    sc_trace(mVcdFile, regslice_both_in_V_data_V_U_ack_in, "regslice_both_in_V_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_V_keep_V_U_apdone_blk, "regslice_both_in_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, symbol_histogram_TKEEP_int, "symbol_histogram_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_in_V_keep_V_U_vld_out, "regslice_both_in_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_V_keep_V_U_ack_in, "regslice_both_in_V_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_V_strb_V_U_apdone_blk, "regslice_both_in_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, symbol_histogram_TSTRB_int, "symbol_histogram_TSTRB_int");
    sc_trace(mVcdFile, regslice_both_in_V_strb_V_U_vld_out, "regslice_both_in_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_V_strb_V_U_ack_in, "regslice_both_in_V_strb_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_V_user_V_U_apdone_blk, "regslice_both_in_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, symbol_histogram_TUSER_int, "symbol_histogram_TUSER_int");
    sc_trace(mVcdFile, regslice_both_in_V_user_V_U_vld_out, "regslice_both_in_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_V_user_V_U_ack_in, "regslice_both_in_V_user_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_V_last_V_U_apdone_blk, "regslice_both_in_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, symbol_histogram_TLAST_int, "symbol_histogram_TLAST_int");
    sc_trace(mVcdFile, regslice_both_in_V_last_V_U_vld_out, "regslice_both_in_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_V_last_V_U_ack_in, "regslice_both_in_V_last_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_V_id_V_U_apdone_blk, "regslice_both_in_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, symbol_histogram_TID_int, "symbol_histogram_TID_int");
    sc_trace(mVcdFile, regslice_both_in_V_id_V_U_vld_out, "regslice_both_in_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_V_id_V_U_ack_in, "regslice_both_in_V_id_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_V_dest_V_U_apdone_blk, "regslice_both_in_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, symbol_histogram_TDEST_int, "symbol_histogram_TDEST_int");
    sc_trace(mVcdFile, regslice_both_in_V_dest_V_U_vld_out, "regslice_both_in_V_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_V_dest_V_U_ack_in, "regslice_both_in_V_dest_V_U_ack_in");
#endif

    }
}

filter::~filter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_in_V_data_V_U;
    delete regslice_both_in_V_keep_V_U;
    delete regslice_both_in_V_strb_V_U;
    delete regslice_both_in_V_user_V_U;
    delete regslice_both_in_V_last_V_U;
    delete regslice_both_in_V_id_V_U;
    delete regslice_both_in_V_dest_V_U;
}

void filter::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(n_out_full_n.read(), ap_const_logic_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read())))) {
        i_0_i_reg_127 = i_fu_153_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_i_reg_127 = ap_const_lv9_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_fu_179_p2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read())))) {
        t_V_fu_72 = j_V_fu_191_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        t_V_fu_72 = ap_const_lv9_0;
    }
}

void filter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void filter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void filter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void filter::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void filter::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read()));
}

void filter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(n_out_full_n.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void filter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void filter::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void filter::thread_frequency_V_fu_174_p1() {
    frequency_V_fu_174_p1 = symbol_histogram_TDATA_int.read().range(32-1, 0);
}

void filter::thread_i_fu_153_p2() {
    i_fu_153_p2 = (!i_0_i_reg_127.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_0_i_reg_127.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void filter::thread_icmp_ln13_fu_147_p2() {
    icmp_ln13_fu_147_p2 = (!i_0_i_reg_127.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_127.read() == ap_const_lv9_100);
}

void filter::thread_icmp_ln883_fu_179_p2() {
    icmp_ln883_fu_179_p2 = (!frequency_V_fu_174_p1.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(frequency_V_fu_174_p1.read() == ap_const_lv32_0);
}

void filter::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(n_out_full_n.read(), ap_const_logic_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void filter::thread_j_V_fu_191_p2() {
    j_V_fu_191_p2 = (!t_V_fu_72.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(t_V_fu_72.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void filter::thread_n_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        n_out_blk_n = n_out_full_n.read();
    } else {
        n_out_blk_n = ap_const_logic_1;
    }
}

void filter::thread_n_out_din() {
    n_out_din = t_V_fu_72.read();
}

void filter::thread_n_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(n_out_full_n.read(), ap_const_logic_1))) {
        n_out_write = ap_const_logic_1;
    } else {
        n_out_write = ap_const_logic_0;
    }
}

void filter::thread_out_frequency_V_address0() {
    out_frequency_V_address0 =  (sc_lv<8>) (zext_ln544_fu_185_p1.read());
}

void filter::thread_out_frequency_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read())))) {
        out_frequency_V_ce0 = ap_const_logic_1;
    } else {
        out_frequency_V_ce0 = ap_const_logic_0;
    }
}

void filter::thread_out_frequency_V_d0() {
    out_frequency_V_d0 = frequency_V_fu_174_p1.read();
}

void filter::thread_out_frequency_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_fu_179_p2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read())))) {
        out_frequency_V_we0 = ap_const_logic_1;
    } else {
        out_frequency_V_we0 = ap_const_logic_0;
    }
}

void filter::thread_out_value_V_address0() {
    out_value_V_address0 =  (sc_lv<8>) (zext_ln544_fu_185_p1.read());
}

void filter::thread_out_value_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read())))) {
        out_value_V_ce0 = ap_const_logic_1;
    } else {
        out_value_V_ce0 = ap_const_logic_0;
    }
}

void filter::thread_out_value_V_d0() {
    out_value_V_d0 = symbol_histogram_TDATA_int.read().range(40, 32);
}

void filter::thread_out_value_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_fu_179_p2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read())))) {
        out_value_V_we0 = ap_const_logic_1;
    } else {
        out_value_V_we0 = ap_const_logic_0;
    }
}

void filter::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void filter::thread_start_out() {
    start_out = real_start.read();
}

void filter::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void filter::thread_symbol_histogram_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0))) {
        symbol_histogram_TDATA_blk_n = symbol_histogram_TVALID_int.read();
    } else {
        symbol_histogram_TDATA_blk_n = ap_const_logic_1;
    }
}

void filter::thread_symbol_histogram_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, symbol_histogram_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_in_V_data_V_U_ack_in.read()))) {
        symbol_histogram_TREADY = ap_const_logic_1;
    } else {
        symbol_histogram_TREADY = ap_const_logic_0;
    }
}

void filter::thread_symbol_histogram_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read())))) {
        symbol_histogram_TREADY_int = ap_const_logic_1;
    } else {
        symbol_histogram_TREADY_int = ap_const_logic_0;
    }
}

void filter::thread_zext_ln544_fu_185_p1() {
    zext_ln544_fu_185_p1 = esl_zext<64,9>(t_V_fu_72.read());
}

void filter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(icmp_ln13_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, symbol_histogram_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(n_out_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

