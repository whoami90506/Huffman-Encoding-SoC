// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "huffman_encoding.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int huffman_encoding::C_S_AXI_DATA_WIDTH = "100000";
const int huffman_encoding::C_S_AXI_WSTRB_WIDTH = "100";
const int huffman_encoding::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic huffman_encoding::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> huffman_encoding::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> huffman_encoding::ap_const_lv4_0 = "0000";
const sc_lv<1> huffman_encoding::ap_const_lv1_0 = "0";
const sc_logic huffman_encoding::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> huffman_encoding::ap_const_lv9_0 = "000000000";
const sc_lv<5> huffman_encoding::ap_const_lv5_0 = "00000";
const sc_lv<8> huffman_encoding::ap_const_lv8_0 = "00000000";
const sc_lv<8> huffman_encoding::ap_const_lv8_1 = "1";
const sc_lv<6> huffman_encoding::ap_const_lv6_0 = "000000";
const sc_lv<6> huffman_encoding::ap_const_lv6_1 = "1";
const sc_lv<9> huffman_encoding::ap_const_lv9_1 = "1";
const bool huffman_encoding::ap_const_boolean_1 = true;

huffman_encoding::huffman_encoding(sc_module_name name) : sc_module(name), mVcdFile(0) {
    huffman_encoding_AXILiteS_s_axi_U = new huffman_encoding_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("huffman_encoding_AXILiteS_s_axi_U");
    huffman_encoding_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    huffman_encoding_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    huffman_encoding_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    huffman_encoding_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    huffman_encoding_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    huffman_encoding_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    huffman_encoding_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    huffman_encoding_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    huffman_encoding_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    huffman_encoding_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    huffman_encoding_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    huffman_encoding_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    huffman_encoding_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    huffman_encoding_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    huffman_encoding_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    huffman_encoding_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    huffman_encoding_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    huffman_encoding_AXILiteS_s_axi_U->ACLK(ap_clk);
    huffman_encoding_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    huffman_encoding_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    huffman_encoding_AXILiteS_s_axi_U->ap_start(ap_start);
    huffman_encoding_AXILiteS_s_axi_U->interrupt(interrupt);
    huffman_encoding_AXILiteS_s_axi_U->ap_ready(ap_ready);
    huffman_encoding_AXILiteS_s_axi_U->ap_done(ap_done);
    huffman_encoding_AXILiteS_s_axi_U->ap_idle(ap_idle);
    huffman_encoding_AXILiteS_s_axi_U->num_nonzero_symbols(Block_proc_U0_num_nonzero_symbols);
    huffman_encoding_AXILiteS_s_axi_U->num_nonzero_symbols_ap_vld(Block_proc_U0_num_nonzero_symbols_ap_vld);
    filtered_value_V_U = new huffman_encoding_ncg("filtered_value_V_U");
    filtered_value_V_U->clk(ap_clk);
    filtered_value_V_U->reset(ap_rst_n_inv);
    filtered_value_V_U->i_address0(filter_U0_out_value_V_address0);
    filtered_value_V_U->i_ce0(filter_U0_out_value_V_ce0);
    filtered_value_V_U->i_we0(filter_U0_out_value_V_we0);
    filtered_value_V_U->i_d0(filter_U0_out_value_V_d0);
    filtered_value_V_U->i_q0(filtered_value_V_i_q0);
    filtered_value_V_U->t_address0(sort_U0_in_value_V_address0);
    filtered_value_V_U->t_ce0(sort_U0_in_value_V_ce0);
    filtered_value_V_U->t_we0(ap_var_for_const1);
    filtered_value_V_U->t_d0(ap_var_for_const2);
    filtered_value_V_U->t_q0(filtered_value_V_t_q0);
    filtered_value_V_U->i_ce(ap_var_for_const0);
    filtered_value_V_U->t_ce(ap_var_for_const0);
    filtered_value_V_U->i_full_n(filtered_value_V_i_full_n);
    filtered_value_V_U->i_write(ap_channel_done_filtered_value_V);
    filtered_value_V_U->t_empty_n(filtered_value_V_t_empty_n);
    filtered_value_V_U->t_read(sort_U0_ap_ready);
    filtered_frequency_V_U = new huffman_encoding_ocq("filtered_frequency_V_U");
    filtered_frequency_V_U->clk(ap_clk);
    filtered_frequency_V_U->reset(ap_rst_n_inv);
    filtered_frequency_V_U->i_address0(filter_U0_out_frequency_V_address0);
    filtered_frequency_V_U->i_ce0(filter_U0_out_frequency_V_ce0);
    filtered_frequency_V_U->i_we0(filter_U0_out_frequency_V_we0);
    filtered_frequency_V_U->i_d0(filter_U0_out_frequency_V_d0);
    filtered_frequency_V_U->i_q0(filtered_frequency_V_i_q0);
    filtered_frequency_V_U->t_address0(sort_U0_in_frequency_V_address0);
    filtered_frequency_V_U->t_ce0(sort_U0_in_frequency_V_ce0);
    filtered_frequency_V_U->t_we0(ap_var_for_const1);
    filtered_frequency_V_U->t_d0(ap_var_for_const3);
    filtered_frequency_V_U->t_q0(filtered_frequency_V_t_q0);
    filtered_frequency_V_U->i_ce(ap_var_for_const0);
    filtered_frequency_V_U->t_ce(ap_var_for_const0);
    filtered_frequency_V_U->i_full_n(filtered_frequency_V_i_full_n);
    filtered_frequency_V_U->i_write(ap_channel_done_filtered_frequency_V);
    filtered_frequency_V_U->t_empty_n(filtered_frequency_V_t_empty_n);
    filtered_frequency_V_U->t_read(sort_U0_ap_ready);
    sorted_0_U = new huffman_encoding_ncg("sorted_0_U");
    sorted_0_U->clk(ap_clk);
    sorted_0_U->reset(ap_rst_n_inv);
    sorted_0_U->i_address0(sort_U0_out_value_V_address0);
    sorted_0_U->i_ce0(sort_U0_out_value_V_ce0);
    sorted_0_U->i_we0(sort_U0_out_value_V_we0);
    sorted_0_U->i_d0(sort_U0_out_value_V_d0);
    sorted_0_U->i_q0(sorted_0_i_q0);
    sorted_0_U->t_address0(Loop_copy_sorted_pro_U0_sorted_0_address0);
    sorted_0_U->t_ce0(Loop_copy_sorted_pro_U0_sorted_0_ce0);
    sorted_0_U->t_we0(ap_var_for_const1);
    sorted_0_U->t_d0(ap_var_for_const2);
    sorted_0_U->t_q0(sorted_0_t_q0);
    sorted_0_U->i_ce(ap_var_for_const0);
    sorted_0_U->t_ce(ap_var_for_const0);
    sorted_0_U->i_full_n(sorted_0_i_full_n);
    sorted_0_U->i_write(ap_channel_done_sorted_0);
    sorted_0_U->t_empty_n(sorted_0_t_empty_n);
    sorted_0_U->t_read(Loop_copy_sorted_pro_U0_ap_ready);
    sorted_1_U = new huffman_encoding_ocq("sorted_1_U");
    sorted_1_U->clk(ap_clk);
    sorted_1_U->reset(ap_rst_n_inv);
    sorted_1_U->i_address0(sort_U0_out_frequency_V_address0);
    sorted_1_U->i_ce0(sort_U0_out_frequency_V_ce0);
    sorted_1_U->i_we0(sort_U0_out_frequency_V_we0);
    sorted_1_U->i_d0(sort_U0_out_frequency_V_d0);
    sorted_1_U->i_q0(sorted_1_i_q0);
    sorted_1_U->t_address0(Loop_copy_sorted_pro_U0_sorted_1_address0);
    sorted_1_U->t_ce0(Loop_copy_sorted_pro_U0_sorted_1_ce0);
    sorted_1_U->t_we0(ap_var_for_const1);
    sorted_1_U->t_d0(ap_var_for_const3);
    sorted_1_U->t_q0(sorted_1_t_q0);
    sorted_1_U->i_ce(ap_var_for_const0);
    sorted_1_U->t_ce(ap_var_for_const0);
    sorted_1_U->i_full_n(sorted_1_i_full_n);
    sorted_1_U->i_write(ap_channel_done_sorted_1);
    sorted_1_U->t_empty_n(sorted_1_t_empty_n);
    sorted_1_U->t_read(Loop_copy_sorted_pro_U0_ap_ready);
    sorted_copy2_value_V_U = new huffman_encoding_ncg("sorted_copy2_value_V_U");
    sorted_copy2_value_V_U->clk(ap_clk);
    sorted_copy2_value_V_U->reset(ap_rst_n_inv);
    sorted_copy2_value_V_U->i_address0(Loop_copy_sorted_pro_U0_sorted_copy2_value_V_address0);
    sorted_copy2_value_V_U->i_ce0(Loop_copy_sorted_pro_U0_sorted_copy2_value_V_ce0);
    sorted_copy2_value_V_U->i_we0(Loop_copy_sorted_pro_U0_sorted_copy2_value_V_we0);
    sorted_copy2_value_V_U->i_d0(Loop_copy_sorted_pro_U0_sorted_copy2_value_V_d0);
    sorted_copy2_value_V_U->i_q0(sorted_copy2_value_V_i_q0);
    sorted_copy2_value_V_U->t_address0(canonize_tree_U0_sorted_value_V_address0);
    sorted_copy2_value_V_U->t_ce0(canonize_tree_U0_sorted_value_V_ce0);
    sorted_copy2_value_V_U->t_we0(ap_var_for_const1);
    sorted_copy2_value_V_U->t_d0(ap_var_for_const2);
    sorted_copy2_value_V_U->t_q0(sorted_copy2_value_V_t_q0);
    sorted_copy2_value_V_U->i_ce(ap_var_for_const0);
    sorted_copy2_value_V_U->t_ce(ap_var_for_const0);
    sorted_copy2_value_V_U->i_full_n(sorted_copy2_value_V_i_full_n);
    sorted_copy2_value_V_U->i_write(Loop_copy_sorted_pro_U0_ap_done);
    sorted_copy2_value_V_U->t_empty_n(sorted_copy2_value_V_t_empty_n);
    sorted_copy2_value_V_U->t_read(canonize_tree_U0_ap_ready);
    parent_V_U = new huffman_encoding_sc4("parent_V_U");
    parent_V_U->clk(ap_clk);
    parent_V_U->reset(ap_rst_n_inv);
    parent_V_U->i_address0(create_tree_U0_parent_V_address0);
    parent_V_U->i_ce0(create_tree_U0_parent_V_ce0);
    parent_V_U->i_we0(create_tree_U0_parent_V_we0);
    parent_V_U->i_d0(create_tree_U0_parent_V_d0);
    parent_V_U->i_q0(parent_V_i_q0);
    parent_V_U->i_address1(ap_var_for_const4);
    parent_V_U->i_ce1(ap_var_for_const1);
    parent_V_U->i_q1(parent_V_i_q1);
    parent_V_U->t_address0(compute_bit_length_U0_parent_V_address0);
    parent_V_U->t_ce0(compute_bit_length_U0_parent_V_ce0);
    parent_V_U->t_we0(ap_var_for_const1);
    parent_V_U->t_d0(ap_var_for_const2);
    parent_V_U->t_q0(parent_V_t_q0);
    parent_V_U->t_address1(compute_bit_length_U0_parent_V_address1);
    parent_V_U->t_ce1(compute_bit_length_U0_parent_V_ce1);
    parent_V_U->t_q1(parent_V_t_q1);
    parent_V_U->i_ce(ap_var_for_const0);
    parent_V_U->t_ce(ap_var_for_const0);
    parent_V_U->i_full_n(parent_V_i_full_n);
    parent_V_U->i_write(ap_channel_done_parent_V);
    parent_V_U->t_empty_n(parent_V_t_empty_n);
    parent_V_U->t_read(compute_bit_length_U0_ap_ready);
    left_V_U = new huffman_encoding_sc4("left_V_U");
    left_V_U->clk(ap_clk);
    left_V_U->reset(ap_rst_n_inv);
    left_V_U->i_address0(create_tree_U0_left_V_address0);
    left_V_U->i_ce0(create_tree_U0_left_V_ce0);
    left_V_U->i_we0(create_tree_U0_left_V_we0);
    left_V_U->i_d0(create_tree_U0_left_V_d0);
    left_V_U->i_q0(left_V_i_q0);
    left_V_U->i_address1(ap_var_for_const4);
    left_V_U->i_ce1(ap_var_for_const1);
    left_V_U->i_q1(left_V_i_q1);
    left_V_U->t_address0(compute_bit_length_U0_left_V_address0);
    left_V_U->t_ce0(compute_bit_length_U0_left_V_ce0);
    left_V_U->t_we0(ap_var_for_const1);
    left_V_U->t_d0(ap_var_for_const2);
    left_V_U->t_q0(left_V_t_q0);
    left_V_U->t_address1(compute_bit_length_U0_left_V_address1);
    left_V_U->t_ce1(compute_bit_length_U0_left_V_ce1);
    left_V_U->t_q1(left_V_t_q1);
    left_V_U->i_ce(ap_var_for_const0);
    left_V_U->t_ce(ap_var_for_const0);
    left_V_U->i_full_n(left_V_i_full_n);
    left_V_U->i_write(ap_channel_done_left_V);
    left_V_U->t_empty_n(left_V_t_empty_n);
    left_V_U->t_read(compute_bit_length_U0_ap_ready);
    right_V_U = new huffman_encoding_sc4("right_V_U");
    right_V_U->clk(ap_clk);
    right_V_U->reset(ap_rst_n_inv);
    right_V_U->i_address0(create_tree_U0_right_V_address0);
    right_V_U->i_ce0(create_tree_U0_right_V_ce0);
    right_V_U->i_we0(create_tree_U0_right_V_we0);
    right_V_U->i_d0(create_tree_U0_right_V_d0);
    right_V_U->i_q0(right_V_i_q0);
    right_V_U->i_address1(ap_var_for_const4);
    right_V_U->i_ce1(ap_var_for_const1);
    right_V_U->i_q1(right_V_i_q1);
    right_V_U->t_address0(compute_bit_length_U0_right_V_address0);
    right_V_U->t_ce0(compute_bit_length_U0_right_V_ce0);
    right_V_U->t_we0(ap_var_for_const1);
    right_V_U->t_d0(ap_var_for_const2);
    right_V_U->t_q0(right_V_t_q0);
    right_V_U->t_address1(compute_bit_length_U0_right_V_address1);
    right_V_U->t_ce1(compute_bit_length_U0_right_V_ce1);
    right_V_U->t_q1(right_V_t_q1);
    right_V_U->i_ce(ap_var_for_const0);
    right_V_U->t_ce(ap_var_for_const0);
    right_V_U->i_full_n(right_V_i_full_n);
    right_V_U->i_write(ap_channel_done_right_V);
    right_V_U->t_empty_n(right_V_t_empty_n);
    right_V_U->t_read(compute_bit_length_U0_ap_ready);
    length_histogram_V_U = new huffman_encoding_vdy("length_histogram_V_U");
    length_histogram_V_U->clk(ap_clk);
    length_histogram_V_U->reset(ap_rst_n_inv);
    length_histogram_V_U->i_address0(compute_bit_length_U0_length_histogram_V_address0);
    length_histogram_V_U->i_ce0(compute_bit_length_U0_length_histogram_V_ce0);
    length_histogram_V_U->i_we0(compute_bit_length_U0_length_histogram_V_we0);
    length_histogram_V_U->i_d0(compute_bit_length_U0_length_histogram_V_d0);
    length_histogram_V_U->i_q0(length_histogram_V_i_q0);
    length_histogram_V_U->t_address0(truncate_tree_U0_input_length_histogram_V_address0);
    length_histogram_V_U->t_ce0(truncate_tree_U0_input_length_histogram_V_ce0);
    length_histogram_V_U->t_we0(ap_var_for_const1);
    length_histogram_V_U->t_d0(ap_var_for_const2);
    length_histogram_V_U->t_q0(length_histogram_V_t_q0);
    length_histogram_V_U->i_ce(ap_var_for_const0);
    length_histogram_V_U->t_ce(ap_var_for_const0);
    length_histogram_V_U->i_full_n(length_histogram_V_i_full_n);
    length_histogram_V_U->i_write(compute_bit_length_U0_ap_done);
    length_histogram_V_U->t_empty_n(length_histogram_V_t_empty_n);
    length_histogram_V_U->t_read(truncate_tree_U0_ap_ready);
    truncated_length_his_U = new huffman_encoding_wdI("truncated_length_his_U");
    truncated_length_his_U->clk(ap_clk);
    truncated_length_his_U->reset(ap_rst_n_inv);
    truncated_length_his_U->i_address0(truncate_tree_U0_output_length_histogram1_V_address0);
    truncated_length_his_U->i_ce0(truncate_tree_U0_output_length_histogram1_V_ce0);
    truncated_length_his_U->i_we0(truncate_tree_U0_output_length_histogram1_V_we0);
    truncated_length_his_U->i_d0(truncate_tree_U0_output_length_histogram1_V_d0);
    truncated_length_his_U->i_q0(truncated_length_his_i_q0);
    truncated_length_his_U->i_address1(truncate_tree_U0_output_length_histogram1_V_address1);
    truncated_length_his_U->i_ce1(truncate_tree_U0_output_length_histogram1_V_ce1);
    truncated_length_his_U->i_we1(truncate_tree_U0_output_length_histogram1_V_we1);
    truncated_length_his_U->i_d1(truncate_tree_U0_output_length_histogram1_V_d1);
    truncated_length_his_U->i_q1(truncated_length_his_i_q1);
    truncated_length_his_U->t_address0(canonize_tree_U0_codeword_length_histogram_V_address0);
    truncated_length_his_U->t_ce0(canonize_tree_U0_codeword_length_histogram_V_ce0);
    truncated_length_his_U->t_we0(ap_var_for_const1);
    truncated_length_his_U->t_d0(ap_var_for_const2);
    truncated_length_his_U->t_q0(truncated_length_his_t_q0);
    truncated_length_his_U->t_address1(ap_var_for_const5);
    truncated_length_his_U->t_ce1(ap_var_for_const1);
    truncated_length_his_U->t_we1(ap_var_for_const1);
    truncated_length_his_U->t_d1(ap_var_for_const2);
    truncated_length_his_U->t_q1(truncated_length_his_t_q1);
    truncated_length_his_U->i_ce(ap_var_for_const0);
    truncated_length_his_U->t_ce(ap_var_for_const0);
    truncated_length_his_U->i_full_n(truncated_length_his_i_full_n);
    truncated_length_his_U->i_write(ap_channel_done_truncated_length_his);
    truncated_length_his_U->t_empty_n(truncated_length_his_t_empty_n);
    truncated_length_his_U->t_read(canonize_tree_U0_ap_ready);
    truncated_length_his_1_U = new huffman_encoding_vdy("truncated_length_his_1_U");
    truncated_length_his_1_U->clk(ap_clk);
    truncated_length_his_1_U->reset(ap_rst_n_inv);
    truncated_length_his_1_U->i_address0(truncate_tree_U0_output_length_histogram2_V_address0);
    truncated_length_his_1_U->i_ce0(truncate_tree_U0_output_length_histogram2_V_ce0);
    truncated_length_his_1_U->i_we0(truncate_tree_U0_output_length_histogram2_V_we0);
    truncated_length_his_1_U->i_d0(truncate_tree_U0_output_length_histogram2_V_d0);
    truncated_length_his_1_U->i_q0(truncated_length_his_1_i_q0);
    truncated_length_his_1_U->t_address0(create_codeword_U0_codeword_length_histogram_V_address0);
    truncated_length_his_1_U->t_ce0(create_codeword_U0_codeword_length_histogram_V_ce0);
    truncated_length_his_1_U->t_we0(ap_var_for_const1);
    truncated_length_his_1_U->t_d0(ap_var_for_const2);
    truncated_length_his_1_U->t_q0(truncated_length_his_1_t_q0);
    truncated_length_his_1_U->i_ce(ap_var_for_const0);
    truncated_length_his_1_U->t_ce(ap_var_for_const0);
    truncated_length_his_1_U->i_full_n(truncated_length_his_1_i_full_n);
    truncated_length_his_1_U->i_write(ap_channel_done_truncated_length_his_1);
    truncated_length_his_1_U->t_empty_n(truncated_length_his_1_t_empty_n);
    truncated_length_his_1_U->t_read(create_codeword_U0_ap_ready);
    symbol_bits_V_U = new huffman_encoding_yd2("symbol_bits_V_U");
    symbol_bits_V_U->clk(ap_clk);
    symbol_bits_V_U->reset(ap_rst_n_inv);
    symbol_bits_V_U->i_address0(canonize_tree_U0_symbol_bits_V_address0);
    symbol_bits_V_U->i_ce0(canonize_tree_U0_symbol_bits_V_ce0);
    symbol_bits_V_U->i_we0(canonize_tree_U0_symbol_bits_V_we0);
    symbol_bits_V_U->i_d0(canonize_tree_U0_symbol_bits_V_d0);
    symbol_bits_V_U->i_q0(symbol_bits_V_i_q0);
    symbol_bits_V_U->t_address0(create_codeword_U0_symbol_bits_V_address0);
    symbol_bits_V_U->t_ce0(create_codeword_U0_symbol_bits_V_ce0);
    symbol_bits_V_U->t_we0(ap_var_for_const1);
    symbol_bits_V_U->t_d0(ap_var_for_const6);
    symbol_bits_V_U->t_q0(symbol_bits_V_t_q0);
    symbol_bits_V_U->i_ce(ap_var_for_const0);
    symbol_bits_V_U->t_ce(ap_var_for_const0);
    symbol_bits_V_U->i_full_n(symbol_bits_V_i_full_n);
    symbol_bits_V_U->i_write(canonize_tree_U0_ap_done);
    symbol_bits_V_U->t_empty_n(symbol_bits_V_t_empty_n);
    symbol_bits_V_U->t_read(create_codeword_U0_ap_ready);
    filter_U0 = new filter("filter_U0");
    filter_U0->ap_clk(ap_clk);
    filter_U0->ap_rst(ap_rst_n_inv);
    filter_U0->ap_start(filter_U0_ap_start);
    filter_U0->start_full_n(start_for_Block_codeRepl810_pr_U0_full_n);
    filter_U0->ap_done(filter_U0_ap_done);
    filter_U0->ap_continue(filter_U0_ap_continue);
    filter_U0->ap_idle(filter_U0_ap_idle);
    filter_U0->ap_ready(filter_U0_ap_ready);
    filter_U0->start_out(filter_U0_start_out);
    filter_U0->start_write(filter_U0_start_write);
    filter_U0->symbol_histogram_TDATA(symbol_histogram_TDATA);
    filter_U0->symbol_histogram_TVALID(symbol_histogram_TVALID);
    filter_U0->symbol_histogram_TREADY(filter_U0_symbol_histogram_TREADY);
    filter_U0->symbol_histogram_TKEEP(symbol_histogram_TKEEP);
    filter_U0->symbol_histogram_TSTRB(symbol_histogram_TSTRB);
    filter_U0->symbol_histogram_TUSER(symbol_histogram_TUSER);
    filter_U0->symbol_histogram_TLAST(symbol_histogram_TLAST);
    filter_U0->symbol_histogram_TID(symbol_histogram_TID);
    filter_U0->symbol_histogram_TDEST(symbol_histogram_TDEST);
    filter_U0->out_value_V_address0(filter_U0_out_value_V_address0);
    filter_U0->out_value_V_ce0(filter_U0_out_value_V_ce0);
    filter_U0->out_value_V_we0(filter_U0_out_value_V_we0);
    filter_U0->out_value_V_d0(filter_U0_out_value_V_d0);
    filter_U0->out_frequency_V_address0(filter_U0_out_frequency_V_address0);
    filter_U0->out_frequency_V_ce0(filter_U0_out_frequency_V_ce0);
    filter_U0->out_frequency_V_we0(filter_U0_out_frequency_V_we0);
    filter_U0->out_frequency_V_d0(filter_U0_out_frequency_V_d0);
    filter_U0->n_out_din(filter_U0_n_out_din);
    filter_U0->n_out_full_n(n_c_full_n);
    filter_U0->n_out_write(filter_U0_n_out_write);
    Block_codeRepl810_pr_U0 = new Block_codeRepl810_pr("Block_codeRepl810_pr_U0");
    Block_codeRepl810_pr_U0->ap_clk(ap_clk);
    Block_codeRepl810_pr_U0->ap_rst(ap_rst_n_inv);
    Block_codeRepl810_pr_U0->ap_start(Block_codeRepl810_pr_U0_ap_start);
    Block_codeRepl810_pr_U0->ap_done(Block_codeRepl810_pr_U0_ap_done);
    Block_codeRepl810_pr_U0->ap_continue(Block_codeRepl810_pr_U0_ap_continue);
    Block_codeRepl810_pr_U0->ap_idle(Block_codeRepl810_pr_U0_ap_idle);
    Block_codeRepl810_pr_U0->ap_ready(Block_codeRepl810_pr_U0_ap_ready);
    Block_codeRepl810_pr_U0->n_dout(n_c_dout);
    Block_codeRepl810_pr_U0->n_empty_n(n_c_empty_n);
    Block_codeRepl810_pr_U0->n_read(Block_codeRepl810_pr_U0_n_read);
    Block_codeRepl810_pr_U0->n_out_din(Block_codeRepl810_pr_U0_n_out_din);
    Block_codeRepl810_pr_U0->n_out_full_n(n_c18_full_n);
    Block_codeRepl810_pr_U0->n_out_write(Block_codeRepl810_pr_U0_n_out_write);
    Block_codeRepl810_pr_U0->ap_return(Block_codeRepl810_pr_U0_ap_return);
    sort_U0 = new sort("sort_U0");
    sort_U0->ap_clk(ap_clk);
    sort_U0->ap_rst(ap_rst_n_inv);
    sort_U0->ap_start(sort_U0_ap_start);
    sort_U0->ap_done(sort_U0_ap_done);
    sort_U0->ap_continue(sort_U0_ap_continue);
    sort_U0->ap_idle(sort_U0_ap_idle);
    sort_U0->ap_ready(sort_U0_ap_ready);
    sort_U0->in_value_V_address0(sort_U0_in_value_V_address0);
    sort_U0->in_value_V_ce0(sort_U0_in_value_V_ce0);
    sort_U0->in_value_V_q0(filtered_value_V_t_q0);
    sort_U0->in_frequency_V_address0(sort_U0_in_frequency_V_address0);
    sort_U0->in_frequency_V_ce0(sort_U0_in_frequency_V_ce0);
    sort_U0->in_frequency_V_q0(filtered_frequency_V_t_q0);
    sort_U0->extLd7_loc_channel(extLd7_loc_channel_dout);
    sort_U0->out_value_V_address0(sort_U0_out_value_V_address0);
    sort_U0->out_value_V_ce0(sort_U0_out_value_V_ce0);
    sort_U0->out_value_V_we0(sort_U0_out_value_V_we0);
    sort_U0->out_value_V_d0(sort_U0_out_value_V_d0);
    sort_U0->out_frequency_V_address0(sort_U0_out_frequency_V_address0);
    sort_U0->out_frequency_V_ce0(sort_U0_out_frequency_V_ce0);
    sort_U0->out_frequency_V_we0(sort_U0_out_frequency_V_we0);
    sort_U0->out_frequency_V_d0(sort_U0_out_frequency_V_d0);
    Loop_copy_sorted_pro_U0 = new Loop_copy_sorted_pro("Loop_copy_sorted_pro_U0");
    Loop_copy_sorted_pro_U0->ap_clk(ap_clk);
    Loop_copy_sorted_pro_U0->ap_rst(ap_rst_n_inv);
    Loop_copy_sorted_pro_U0->ap_start(Loop_copy_sorted_pro_U0_ap_start);
    Loop_copy_sorted_pro_U0->start_full_n(Loop_copy_sorted_pro_U0_start_full_n);
    Loop_copy_sorted_pro_U0->ap_done(Loop_copy_sorted_pro_U0_ap_done);
    Loop_copy_sorted_pro_U0->ap_continue(Loop_copy_sorted_pro_U0_ap_continue);
    Loop_copy_sorted_pro_U0->ap_idle(Loop_copy_sorted_pro_U0_ap_idle);
    Loop_copy_sorted_pro_U0->ap_ready(Loop_copy_sorted_pro_U0_ap_ready);
    Loop_copy_sorted_pro_U0->start_out(Loop_copy_sorted_pro_U0_start_out);
    Loop_copy_sorted_pro_U0->start_write(Loop_copy_sorted_pro_U0_start_write);
    Loop_copy_sorted_pro_U0->n_dout(n_c18_dout);
    Loop_copy_sorted_pro_U0->n_empty_n(n_c18_empty_n);
    Loop_copy_sorted_pro_U0->n_read(Loop_copy_sorted_pro_U0_n_read);
    Loop_copy_sorted_pro_U0->sorted_0_address0(Loop_copy_sorted_pro_U0_sorted_0_address0);
    Loop_copy_sorted_pro_U0->sorted_0_ce0(Loop_copy_sorted_pro_U0_sorted_0_ce0);
    Loop_copy_sorted_pro_U0->sorted_0_q0(sorted_0_t_q0);
    Loop_copy_sorted_pro_U0->sorted_copy1_0_din(Loop_copy_sorted_pro_U0_sorted_copy1_0_din);
    Loop_copy_sorted_pro_U0->sorted_copy1_0_full_n(sorted_copy1_0_chann_full_n);
    Loop_copy_sorted_pro_U0->sorted_copy1_0_write(Loop_copy_sorted_pro_U0_sorted_copy1_0_write);
    Loop_copy_sorted_pro_U0->sorted_1_address0(Loop_copy_sorted_pro_U0_sorted_1_address0);
    Loop_copy_sorted_pro_U0->sorted_1_ce0(Loop_copy_sorted_pro_U0_sorted_1_ce0);
    Loop_copy_sorted_pro_U0->sorted_1_q0(sorted_1_t_q0);
    Loop_copy_sorted_pro_U0->sorted_copy1_1_din(Loop_copy_sorted_pro_U0_sorted_copy1_1_din);
    Loop_copy_sorted_pro_U0->sorted_copy1_1_full_n(sorted_copy1_1_chann_full_n);
    Loop_copy_sorted_pro_U0->sorted_copy1_1_write(Loop_copy_sorted_pro_U0_sorted_copy1_1_write);
    Loop_copy_sorted_pro_U0->sorted_copy2_value_V_address0(Loop_copy_sorted_pro_U0_sorted_copy2_value_V_address0);
    Loop_copy_sorted_pro_U0->sorted_copy2_value_V_ce0(Loop_copy_sorted_pro_U0_sorted_copy2_value_V_ce0);
    Loop_copy_sorted_pro_U0->sorted_copy2_value_V_we0(Loop_copy_sorted_pro_U0_sorted_copy2_value_V_we0);
    Loop_copy_sorted_pro_U0->sorted_copy2_value_V_d0(Loop_copy_sorted_pro_U0_sorted_copy2_value_V_d0);
    Loop_copy_sorted_pro_U0->val_assign5_out_out_din(Loop_copy_sorted_pro_U0_val_assign5_out_out_din);
    Loop_copy_sorted_pro_U0->val_assign5_out_out_full_n(val_assign5_loc_c_full_n);
    Loop_copy_sorted_pro_U0->val_assign5_out_out_write(Loop_copy_sorted_pro_U0_val_assign5_out_out_write);
    Loop_copy_sorted_pro_U0->extLd_out_out_din(Loop_copy_sorted_pro_U0_extLd_out_out_din);
    Loop_copy_sorted_pro_U0->extLd_out_out_full_n(extLd_loc_c_full_n);
    Loop_copy_sorted_pro_U0->extLd_out_out_write(Loop_copy_sorted_pro_U0_extLd_out_out_write);
    Loop_copy_sorted_pro_U0->extLd_out_out1_din(Loop_copy_sorted_pro_U0_extLd_out_out1_din);
    Loop_copy_sorted_pro_U0->extLd_out_out1_full_n(extLd_loc_c19_full_n);
    Loop_copy_sorted_pro_U0->extLd_out_out1_write(Loop_copy_sorted_pro_U0_extLd_out_out1_write);
    create_tree_U0 = new create_tree("create_tree_U0");
    create_tree_U0->ap_clk(ap_clk);
    create_tree_U0->ap_rst(ap_rst_n_inv);
    create_tree_U0->ap_start(create_tree_U0_ap_start);
    create_tree_U0->ap_done(create_tree_U0_ap_done);
    create_tree_U0->ap_continue(create_tree_U0_ap_continue);
    create_tree_U0->ap_idle(create_tree_U0_ap_idle);
    create_tree_U0->ap_ready(create_tree_U0_ap_ready);
    create_tree_U0->in_value_V_dout(sorted_copy1_0_chann_dout);
    create_tree_U0->in_value_V_empty_n(sorted_copy1_0_chann_empty_n);
    create_tree_U0->in_value_V_read(create_tree_U0_in_value_V_read);
    create_tree_U0->in_frequency_V_dout(sorted_copy1_1_chann_dout);
    create_tree_U0->in_frequency_V_empty_n(sorted_copy1_1_chann_empty_n);
    create_tree_U0->in_frequency_V_read(create_tree_U0_in_frequency_V_read);
    create_tree_U0->extLd_loc_dout(extLd_loc_c_dout);
    create_tree_U0->extLd_loc_empty_n(extLd_loc_c_empty_n);
    create_tree_U0->extLd_loc_read(create_tree_U0_extLd_loc_read);
    create_tree_U0->parent_V_address0(create_tree_U0_parent_V_address0);
    create_tree_U0->parent_V_ce0(create_tree_U0_parent_V_ce0);
    create_tree_U0->parent_V_we0(create_tree_U0_parent_V_we0);
    create_tree_U0->parent_V_d0(create_tree_U0_parent_V_d0);
    create_tree_U0->left_V_address0(create_tree_U0_left_V_address0);
    create_tree_U0->left_V_ce0(create_tree_U0_left_V_ce0);
    create_tree_U0->left_V_we0(create_tree_U0_left_V_we0);
    create_tree_U0->left_V_d0(create_tree_U0_left_V_d0);
    create_tree_U0->right_V_address0(create_tree_U0_right_V_address0);
    create_tree_U0->right_V_ce0(create_tree_U0_right_V_ce0);
    create_tree_U0->right_V_we0(create_tree_U0_right_V_we0);
    create_tree_U0->right_V_d0(create_tree_U0_right_V_d0);
    create_tree_U0->extLd_loc_out_din(create_tree_U0_extLd_loc_out_din);
    create_tree_U0->extLd_loc_out_full_n(extLd_loc_c20_full_n);
    create_tree_U0->extLd_loc_out_write(create_tree_U0_extLd_loc_out_write);
    compute_bit_length_U0 = new compute_bit_length("compute_bit_length_U0");
    compute_bit_length_U0->ap_clk(ap_clk);
    compute_bit_length_U0->ap_rst(ap_rst_n_inv);
    compute_bit_length_U0->ap_start(compute_bit_length_U0_ap_start);
    compute_bit_length_U0->ap_done(compute_bit_length_U0_ap_done);
    compute_bit_length_U0->ap_continue(compute_bit_length_U0_ap_continue);
    compute_bit_length_U0->ap_idle(compute_bit_length_U0_ap_idle);
    compute_bit_length_U0->ap_ready(compute_bit_length_U0_ap_ready);
    compute_bit_length_U0->parent_V_address0(compute_bit_length_U0_parent_V_address0);
    compute_bit_length_U0->parent_V_ce0(compute_bit_length_U0_parent_V_ce0);
    compute_bit_length_U0->parent_V_q0(parent_V_t_q0);
    compute_bit_length_U0->parent_V_address1(compute_bit_length_U0_parent_V_address1);
    compute_bit_length_U0->parent_V_ce1(compute_bit_length_U0_parent_V_ce1);
    compute_bit_length_U0->parent_V_q1(parent_V_t_q1);
    compute_bit_length_U0->left_V_address0(compute_bit_length_U0_left_V_address0);
    compute_bit_length_U0->left_V_ce0(compute_bit_length_U0_left_V_ce0);
    compute_bit_length_U0->left_V_q0(left_V_t_q0);
    compute_bit_length_U0->left_V_address1(compute_bit_length_U0_left_V_address1);
    compute_bit_length_U0->left_V_ce1(compute_bit_length_U0_left_V_ce1);
    compute_bit_length_U0->left_V_q1(left_V_t_q1);
    compute_bit_length_U0->right_V_address0(compute_bit_length_U0_right_V_address0);
    compute_bit_length_U0->right_V_ce0(compute_bit_length_U0_right_V_ce0);
    compute_bit_length_U0->right_V_q0(right_V_t_q0);
    compute_bit_length_U0->right_V_address1(compute_bit_length_U0_right_V_address1);
    compute_bit_length_U0->right_V_ce1(compute_bit_length_U0_right_V_ce1);
    compute_bit_length_U0->right_V_q1(right_V_t_q1);
    compute_bit_length_U0->extLd_loc_dout(extLd_loc_c20_dout);
    compute_bit_length_U0->extLd_loc_empty_n(extLd_loc_c20_empty_n);
    compute_bit_length_U0->extLd_loc_read(compute_bit_length_U0_extLd_loc_read);
    compute_bit_length_U0->length_histogram_V_address0(compute_bit_length_U0_length_histogram_V_address0);
    compute_bit_length_U0->length_histogram_V_ce0(compute_bit_length_U0_length_histogram_V_ce0);
    compute_bit_length_U0->length_histogram_V_we0(compute_bit_length_U0_length_histogram_V_we0);
    compute_bit_length_U0->length_histogram_V_d0(compute_bit_length_U0_length_histogram_V_d0);
    truncate_tree_U0 = new truncate_tree("truncate_tree_U0");
    truncate_tree_U0->ap_clk(ap_clk);
    truncate_tree_U0->ap_rst(ap_rst_n_inv);
    truncate_tree_U0->ap_start(truncate_tree_U0_ap_start);
    truncate_tree_U0->ap_done(truncate_tree_U0_ap_done);
    truncate_tree_U0->ap_continue(truncate_tree_U0_ap_continue);
    truncate_tree_U0->ap_idle(truncate_tree_U0_ap_idle);
    truncate_tree_U0->ap_ready(truncate_tree_U0_ap_ready);
    truncate_tree_U0->input_length_histogram_V_address0(truncate_tree_U0_input_length_histogram_V_address0);
    truncate_tree_U0->input_length_histogram_V_ce0(truncate_tree_U0_input_length_histogram_V_ce0);
    truncate_tree_U0->input_length_histogram_V_q0(length_histogram_V_t_q0);
    truncate_tree_U0->output_length_histogram1_V_address0(truncate_tree_U0_output_length_histogram1_V_address0);
    truncate_tree_U0->output_length_histogram1_V_ce0(truncate_tree_U0_output_length_histogram1_V_ce0);
    truncate_tree_U0->output_length_histogram1_V_we0(truncate_tree_U0_output_length_histogram1_V_we0);
    truncate_tree_U0->output_length_histogram1_V_d0(truncate_tree_U0_output_length_histogram1_V_d0);
    truncate_tree_U0->output_length_histogram1_V_q0(truncated_length_his_i_q0);
    truncate_tree_U0->output_length_histogram1_V_address1(truncate_tree_U0_output_length_histogram1_V_address1);
    truncate_tree_U0->output_length_histogram1_V_ce1(truncate_tree_U0_output_length_histogram1_V_ce1);
    truncate_tree_U0->output_length_histogram1_V_we1(truncate_tree_U0_output_length_histogram1_V_we1);
    truncate_tree_U0->output_length_histogram1_V_d1(truncate_tree_U0_output_length_histogram1_V_d1);
    truncate_tree_U0->output_length_histogram1_V_q1(truncated_length_his_i_q1);
    truncate_tree_U0->output_length_histogram2_V_address0(truncate_tree_U0_output_length_histogram2_V_address0);
    truncate_tree_U0->output_length_histogram2_V_ce0(truncate_tree_U0_output_length_histogram2_V_ce0);
    truncate_tree_U0->output_length_histogram2_V_we0(truncate_tree_U0_output_length_histogram2_V_we0);
    truncate_tree_U0->output_length_histogram2_V_d0(truncate_tree_U0_output_length_histogram2_V_d0);
    canonize_tree_U0 = new canonize_tree("canonize_tree_U0");
    canonize_tree_U0->ap_clk(ap_clk);
    canonize_tree_U0->ap_rst(ap_rst_n_inv);
    canonize_tree_U0->ap_start(canonize_tree_U0_ap_start);
    canonize_tree_U0->ap_done(canonize_tree_U0_ap_done);
    canonize_tree_U0->ap_continue(canonize_tree_U0_ap_continue);
    canonize_tree_U0->ap_idle(canonize_tree_U0_ap_idle);
    canonize_tree_U0->ap_ready(canonize_tree_U0_ap_ready);
    canonize_tree_U0->sorted_value_V_address0(canonize_tree_U0_sorted_value_V_address0);
    canonize_tree_U0->sorted_value_V_ce0(canonize_tree_U0_sorted_value_V_ce0);
    canonize_tree_U0->sorted_value_V_q0(sorted_copy2_value_V_t_q0);
    canonize_tree_U0->val_assign5_loc_dout(val_assign5_loc_c_dout);
    canonize_tree_U0->val_assign5_loc_empty_n(val_assign5_loc_c_empty_n);
    canonize_tree_U0->val_assign5_loc_read(canonize_tree_U0_val_assign5_loc_read);
    canonize_tree_U0->codeword_length_histogram_V_address0(canonize_tree_U0_codeword_length_histogram_V_address0);
    canonize_tree_U0->codeword_length_histogram_V_ce0(canonize_tree_U0_codeword_length_histogram_V_ce0);
    canonize_tree_U0->codeword_length_histogram_V_q0(truncated_length_his_t_q0);
    canonize_tree_U0->symbol_bits_V_address0(canonize_tree_U0_symbol_bits_V_address0);
    canonize_tree_U0->symbol_bits_V_ce0(canonize_tree_U0_symbol_bits_V_ce0);
    canonize_tree_U0->symbol_bits_V_we0(canonize_tree_U0_symbol_bits_V_we0);
    canonize_tree_U0->symbol_bits_V_d0(canonize_tree_U0_symbol_bits_V_d0);
    create_codeword_U0 = new create_codeword("create_codeword_U0");
    create_codeword_U0->ap_clk(ap_clk);
    create_codeword_U0->ap_rst(ap_rst_n_inv);
    create_codeword_U0->ap_start(create_codeword_U0_ap_start);
    create_codeword_U0->ap_done(create_codeword_U0_ap_done);
    create_codeword_U0->ap_continue(create_codeword_U0_ap_continue);
    create_codeword_U0->ap_idle(create_codeword_U0_ap_idle);
    create_codeword_U0->ap_ready(create_codeword_U0_ap_ready);
    create_codeword_U0->symbol_bits_V_address0(create_codeword_U0_symbol_bits_V_address0);
    create_codeword_U0->symbol_bits_V_ce0(create_codeword_U0_symbol_bits_V_ce0);
    create_codeword_U0->symbol_bits_V_q0(symbol_bits_V_t_q0);
    create_codeword_U0->codeword_length_histogram_V_address0(create_codeword_U0_codeword_length_histogram_V_address0);
    create_codeword_U0->codeword_length_histogram_V_ce0(create_codeword_U0_codeword_length_histogram_V_ce0);
    create_codeword_U0->codeword_length_histogram_V_q0(truncated_length_his_1_t_q0);
    create_codeword_U0->encoding_TDATA(create_codeword_U0_encoding_TDATA);
    create_codeword_U0->encoding_TVALID(create_codeword_U0_encoding_TVALID);
    create_codeword_U0->encoding_TREADY(encoding_TREADY);
    create_codeword_U0->encoding_TKEEP(create_codeword_U0_encoding_TKEEP);
    create_codeword_U0->encoding_TSTRB(create_codeword_U0_encoding_TSTRB);
    create_codeword_U0->encoding_TUSER(create_codeword_U0_encoding_TUSER);
    create_codeword_U0->encoding_TLAST(create_codeword_U0_encoding_TLAST);
    create_codeword_U0->encoding_TID(create_codeword_U0_encoding_TID);
    create_codeword_U0->encoding_TDEST(create_codeword_U0_encoding_TDEST);
    Block_proc_U0 = new Block_proc("Block_proc_U0");
    Block_proc_U0->ap_clk(ap_clk);
    Block_proc_U0->ap_rst(ap_rst_n_inv);
    Block_proc_U0->ap_start(Block_proc_U0_ap_start);
    Block_proc_U0->ap_done(Block_proc_U0_ap_done);
    Block_proc_U0->ap_continue(Block_proc_U0_ap_continue);
    Block_proc_U0->ap_idle(Block_proc_U0_ap_idle);
    Block_proc_U0->ap_ready(Block_proc_U0_ap_ready);
    Block_proc_U0->extLd_loc_dout(extLd_loc_c19_dout);
    Block_proc_U0->extLd_loc_empty_n(extLd_loc_c19_empty_n);
    Block_proc_U0->extLd_loc_read(Block_proc_U0_extLd_loc_read);
    Block_proc_U0->num_nonzero_symbols(Block_proc_U0_num_nonzero_symbols);
    Block_proc_U0->num_nonzero_symbols_ap_vld(Block_proc_U0_num_nonzero_symbols_ap_vld);
    n_c_U = new fifo_w9_d2_A("n_c_U");
    n_c_U->clk(ap_clk);
    n_c_U->reset(ap_rst_n_inv);
    n_c_U->if_read_ce(ap_var_for_const0);
    n_c_U->if_write_ce(ap_var_for_const0);
    n_c_U->if_din(filter_U0_n_out_din);
    n_c_U->if_full_n(n_c_full_n);
    n_c_U->if_write(filter_U0_n_out_write);
    n_c_U->if_dout(n_c_dout);
    n_c_U->if_empty_n(n_c_empty_n);
    n_c_U->if_read(Block_codeRepl810_pr_U0_n_read);
    n_c18_U = new fifo_w9_d3_A("n_c18_U");
    n_c18_U->clk(ap_clk);
    n_c18_U->reset(ap_rst_n_inv);
    n_c18_U->if_read_ce(ap_var_for_const0);
    n_c18_U->if_write_ce(ap_var_for_const0);
    n_c18_U->if_din(Block_codeRepl810_pr_U0_n_out_din);
    n_c18_U->if_full_n(n_c18_full_n);
    n_c18_U->if_write(Block_codeRepl810_pr_U0_n_out_write);
    n_c18_U->if_dout(n_c18_dout);
    n_c18_U->if_empty_n(n_c18_empty_n);
    n_c18_U->if_read(Loop_copy_sorted_pro_U0_n_read);
    extLd7_loc_channel_U = new fifo_w9_d2_A("extLd7_loc_channel_U");
    extLd7_loc_channel_U->clk(ap_clk);
    extLd7_loc_channel_U->reset(ap_rst_n_inv);
    extLd7_loc_channel_U->if_read_ce(ap_var_for_const0);
    extLd7_loc_channel_U->if_write_ce(ap_var_for_const0);
    extLd7_loc_channel_U->if_din(Block_codeRepl810_pr_U0_ap_return);
    extLd7_loc_channel_U->if_full_n(extLd7_loc_channel_full_n);
    extLd7_loc_channel_U->if_write(Block_codeRepl810_pr_U0_ap_done);
    extLd7_loc_channel_U->if_dout(extLd7_loc_channel_dout);
    extLd7_loc_channel_U->if_empty_n(extLd7_loc_channel_empty_n);
    extLd7_loc_channel_U->if_read(sort_U0_ap_ready);
    sorted_copy1_0_chann_U = new fifo_w9_d256_A("sorted_copy1_0_chann_U");
    sorted_copy1_0_chann_U->clk(ap_clk);
    sorted_copy1_0_chann_U->reset(ap_rst_n_inv);
    sorted_copy1_0_chann_U->if_read_ce(ap_var_for_const0);
    sorted_copy1_0_chann_U->if_write_ce(ap_var_for_const0);
    sorted_copy1_0_chann_U->if_din(Loop_copy_sorted_pro_U0_sorted_copy1_0_din);
    sorted_copy1_0_chann_U->if_full_n(sorted_copy1_0_chann_full_n);
    sorted_copy1_0_chann_U->if_write(Loop_copy_sorted_pro_U0_sorted_copy1_0_write);
    sorted_copy1_0_chann_U->if_dout(sorted_copy1_0_chann_dout);
    sorted_copy1_0_chann_U->if_empty_n(sorted_copy1_0_chann_empty_n);
    sorted_copy1_0_chann_U->if_read(create_tree_U0_in_value_V_read);
    sorted_copy1_1_chann_U = new fifo_w32_d256_A("sorted_copy1_1_chann_U");
    sorted_copy1_1_chann_U->clk(ap_clk);
    sorted_copy1_1_chann_U->reset(ap_rst_n_inv);
    sorted_copy1_1_chann_U->if_read_ce(ap_var_for_const0);
    sorted_copy1_1_chann_U->if_write_ce(ap_var_for_const0);
    sorted_copy1_1_chann_U->if_din(Loop_copy_sorted_pro_U0_sorted_copy1_1_din);
    sorted_copy1_1_chann_U->if_full_n(sorted_copy1_1_chann_full_n);
    sorted_copy1_1_chann_U->if_write(Loop_copy_sorted_pro_U0_sorted_copy1_1_write);
    sorted_copy1_1_chann_U->if_dout(sorted_copy1_1_chann_dout);
    sorted_copy1_1_chann_U->if_empty_n(sorted_copy1_1_chann_empty_n);
    sorted_copy1_1_chann_U->if_read(create_tree_U0_in_frequency_V_read);
    val_assign5_loc_c_U = new fifo_w9_d5_A("val_assign5_loc_c_U");
    val_assign5_loc_c_U->clk(ap_clk);
    val_assign5_loc_c_U->reset(ap_rst_n_inv);
    val_assign5_loc_c_U->if_read_ce(ap_var_for_const0);
    val_assign5_loc_c_U->if_write_ce(ap_var_for_const0);
    val_assign5_loc_c_U->if_din(Loop_copy_sorted_pro_U0_val_assign5_out_out_din);
    val_assign5_loc_c_U->if_full_n(val_assign5_loc_c_full_n);
    val_assign5_loc_c_U->if_write(Loop_copy_sorted_pro_U0_val_assign5_out_out_write);
    val_assign5_loc_c_U->if_dout(val_assign5_loc_c_dout);
    val_assign5_loc_c_U->if_empty_n(val_assign5_loc_c_empty_n);
    val_assign5_loc_c_U->if_read(canonize_tree_U0_val_assign5_loc_read);
    extLd_loc_c_U = new fifo_w9_d2_A("extLd_loc_c_U");
    extLd_loc_c_U->clk(ap_clk);
    extLd_loc_c_U->reset(ap_rst_n_inv);
    extLd_loc_c_U->if_read_ce(ap_var_for_const0);
    extLd_loc_c_U->if_write_ce(ap_var_for_const0);
    extLd_loc_c_U->if_din(Loop_copy_sorted_pro_U0_extLd_out_out_din);
    extLd_loc_c_U->if_full_n(extLd_loc_c_full_n);
    extLd_loc_c_U->if_write(Loop_copy_sorted_pro_U0_extLd_out_out_write);
    extLd_loc_c_U->if_dout(extLd_loc_c_dout);
    extLd_loc_c_U->if_empty_n(extLd_loc_c_empty_n);
    extLd_loc_c_U->if_read(create_tree_U0_extLd_loc_read);
    extLd_loc_c19_U = new fifo_w9_d2_A("extLd_loc_c19_U");
    extLd_loc_c19_U->clk(ap_clk);
    extLd_loc_c19_U->reset(ap_rst_n_inv);
    extLd_loc_c19_U->if_read_ce(ap_var_for_const0);
    extLd_loc_c19_U->if_write_ce(ap_var_for_const0);
    extLd_loc_c19_U->if_din(Loop_copy_sorted_pro_U0_extLd_out_out1_din);
    extLd_loc_c19_U->if_full_n(extLd_loc_c19_full_n);
    extLd_loc_c19_U->if_write(Loop_copy_sorted_pro_U0_extLd_out_out1_write);
    extLd_loc_c19_U->if_dout(extLd_loc_c19_dout);
    extLd_loc_c19_U->if_empty_n(extLd_loc_c19_empty_n);
    extLd_loc_c19_U->if_read(Block_proc_U0_extLd_loc_read);
    extLd_loc_c20_U = new fifo_w9_d2_A("extLd_loc_c20_U");
    extLd_loc_c20_U->clk(ap_clk);
    extLd_loc_c20_U->reset(ap_rst_n_inv);
    extLd_loc_c20_U->if_read_ce(ap_var_for_const0);
    extLd_loc_c20_U->if_write_ce(ap_var_for_const0);
    extLd_loc_c20_U->if_din(create_tree_U0_extLd_loc_out_din);
    extLd_loc_c20_U->if_full_n(extLd_loc_c20_full_n);
    extLd_loc_c20_U->if_write(create_tree_U0_extLd_loc_out_write);
    extLd_loc_c20_U->if_dout(extLd_loc_c20_dout);
    extLd_loc_c20_U->if_empty_n(extLd_loc_c20_empty_n);
    extLd_loc_c20_U->if_read(compute_bit_length_U0_extLd_loc_read);
    start_for_Block_czec_U = new start_for_Block_czec("start_for_Block_czec_U");
    start_for_Block_czec_U->clk(ap_clk);
    start_for_Block_czec_U->reset(ap_rst_n_inv);
    start_for_Block_czec_U->if_read_ce(ap_var_for_const0);
    start_for_Block_czec_U->if_write_ce(ap_var_for_const0);
    start_for_Block_czec_U->if_din(start_for_Block_codeRepl810_pr_U0_din);
    start_for_Block_czec_U->if_full_n(start_for_Block_codeRepl810_pr_U0_full_n);
    start_for_Block_czec_U->if_write(filter_U0_start_write);
    start_for_Block_czec_U->if_dout(start_for_Block_codeRepl810_pr_U0_dout);
    start_for_Block_czec_U->if_empty_n(start_for_Block_codeRepl810_pr_U0_empty_n);
    start_for_Block_czec_U->if_read(Block_codeRepl810_pr_U0_ap_ready);
    start_for_create_Aem_U = new start_for_create_Aem("start_for_create_Aem_U");
    start_for_create_Aem_U->clk(ap_clk);
    start_for_create_Aem_U->reset(ap_rst_n_inv);
    start_for_create_Aem_U->if_read_ce(ap_var_for_const0);
    start_for_create_Aem_U->if_write_ce(ap_var_for_const0);
    start_for_create_Aem_U->if_din(start_for_create_tree_U0_din);
    start_for_create_Aem_U->if_full_n(start_for_create_tree_U0_full_n);
    start_for_create_Aem_U->if_write(Loop_copy_sorted_pro_U0_start_write);
    start_for_create_Aem_U->if_dout(start_for_create_tree_U0_dout);
    start_for_create_Aem_U->if_empty_n(start_for_create_tree_U0_empty_n);
    start_for_create_Aem_U->if_read(create_tree_U0_ap_ready);
    start_for_Block_pBew_U = new start_for_Block_pBew("start_for_Block_pBew_U");
    start_for_Block_pBew_U->clk(ap_clk);
    start_for_Block_pBew_U->reset(ap_rst_n_inv);
    start_for_Block_pBew_U->if_read_ce(ap_var_for_const0);
    start_for_Block_pBew_U->if_write_ce(ap_var_for_const0);
    start_for_Block_pBew_U->if_din(start_for_Block_proc_U0_din);
    start_for_Block_pBew_U->if_full_n(start_for_Block_proc_U0_full_n);
    start_for_Block_pBew_U->if_write(Loop_copy_sorted_pro_U0_start_write);
    start_for_Block_pBew_U->if_dout(start_for_Block_proc_U0_dout);
    start_for_Block_pBew_U->if_empty_n(start_for_Block_proc_U0_empty_n);
    start_for_Block_pBew_U->if_read(Block_proc_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Block_codeRepl810_pr_U0_ap_continue);
    sensitive << ( extLd7_loc_channel_full_n );

    SC_METHOD(thread_Block_codeRepl810_pr_U0_ap_start);
    sensitive << ( start_for_Block_codeRepl810_pr_U0_empty_n );

    SC_METHOD(thread_Block_codeRepl810_pr_U0_start_full_n);

    SC_METHOD(thread_Block_codeRepl810_pr_U0_start_write);

    SC_METHOD(thread_Block_proc_U0_ap_continue);
    sensitive << ( ap_sync_done );

    SC_METHOD(thread_Block_proc_U0_ap_start);
    sensitive << ( start_for_Block_proc_U0_empty_n );

    SC_METHOD(thread_Block_proc_U0_start_full_n);

    SC_METHOD(thread_Block_proc_U0_start_write);

    SC_METHOD(thread_Loop_copy_sorted_pro_U0_ap_continue);
    sensitive << ( sorted_copy2_value_V_i_full_n );

    SC_METHOD(thread_Loop_copy_sorted_pro_U0_ap_start);
    sensitive << ( sorted_0_t_empty_n );
    sensitive << ( sorted_1_t_empty_n );

    SC_METHOD(thread_Loop_copy_sorted_pro_U0_sorted_copy2_value_V_full_n);
    sensitive << ( sorted_copy2_value_V_i_full_n );

    SC_METHOD(thread_Loop_copy_sorted_pro_U0_start_full_n);
    sensitive << ( start_for_create_tree_U0_full_n );
    sensitive << ( start_for_Block_proc_U0_full_n );

    SC_METHOD(thread_ap_channel_done_extLd7_loc_channel);
    sensitive << ( Block_codeRepl810_pr_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_filtered_frequency_V);
    sensitive << ( filter_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_filtered_frequency_V );

    SC_METHOD(thread_ap_channel_done_filtered_value_V);
    sensitive << ( filter_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_filtered_value_V );

    SC_METHOD(thread_ap_channel_done_left_V);
    sensitive << ( create_tree_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_left_V );

    SC_METHOD(thread_ap_channel_done_length_histogram_V);
    sensitive << ( compute_bit_length_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_parent_V);
    sensitive << ( create_tree_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_parent_V );

    SC_METHOD(thread_ap_channel_done_right_V);
    sensitive << ( create_tree_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_right_V );

    SC_METHOD(thread_ap_channel_done_sorted_0);
    sensitive << ( sort_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_sorted_0 );

    SC_METHOD(thread_ap_channel_done_sorted_1);
    sensitive << ( sort_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_sorted_1 );

    SC_METHOD(thread_ap_channel_done_sorted_copy2_value_V);
    sensitive << ( Loop_copy_sorted_pro_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_symbol_bits_V);
    sensitive << ( canonize_tree_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_truncated_length_his);
    sensitive << ( truncate_tree_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_truncated_length_his );

    SC_METHOD(thread_ap_channel_done_truncated_length_his_1);
    sensitive << ( truncate_tree_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_truncated_length_his_1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sync_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( filter_U0_ap_idle );
    sensitive << ( Block_codeRepl810_pr_U0_ap_idle );
    sensitive << ( sort_U0_ap_idle );
    sensitive << ( Loop_copy_sorted_pro_U0_ap_idle );
    sensitive << ( create_tree_U0_ap_idle );
    sensitive << ( compute_bit_length_U0_ap_idle );
    sensitive << ( truncate_tree_U0_ap_idle );
    sensitive << ( canonize_tree_U0_ap_idle );
    sensitive << ( create_codeword_U0_ap_idle );
    sensitive << ( Block_proc_U0_ap_idle );
    sensitive << ( filtered_value_V_t_empty_n );
    sensitive << ( filtered_frequency_V_t_empty_n );
    sensitive << ( sorted_0_t_empty_n );
    sensitive << ( sorted_1_t_empty_n );
    sensitive << ( sorted_copy2_value_V_t_empty_n );
    sensitive << ( parent_V_t_empty_n );
    sensitive << ( left_V_t_empty_n );
    sensitive << ( right_V_t_empty_n );
    sensitive << ( length_histogram_V_t_empty_n );
    sensitive << ( truncated_length_his_t_empty_n );
    sensitive << ( truncated_length_his_1_t_empty_n );
    sensitive << ( symbol_bits_V_t_empty_n );
    sensitive << ( extLd7_loc_channel_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( filter_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_channel_write_filtered_frequency_V);
    sensitive << ( ap_channel_done_filtered_frequency_V );
    sensitive << ( filter_U0_out_frequency_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_filtered_frequency_V );

    SC_METHOD(thread_ap_sync_channel_write_filtered_value_V);
    sensitive << ( ap_channel_done_filtered_value_V );
    sensitive << ( filter_U0_out_value_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_filtered_value_V );

    SC_METHOD(thread_ap_sync_channel_write_left_V);
    sensitive << ( ap_channel_done_left_V );
    sensitive << ( create_tree_U0_left_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_left_V );

    SC_METHOD(thread_ap_sync_channel_write_parent_V);
    sensitive << ( ap_channel_done_parent_V );
    sensitive << ( create_tree_U0_parent_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_parent_V );

    SC_METHOD(thread_ap_sync_channel_write_right_V);
    sensitive << ( ap_channel_done_right_V );
    sensitive << ( create_tree_U0_right_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_right_V );

    SC_METHOD(thread_ap_sync_channel_write_sorted_0);
    sensitive << ( ap_channel_done_sorted_0 );
    sensitive << ( sort_U0_out_value_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_sorted_0 );

    SC_METHOD(thread_ap_sync_channel_write_sorted_1);
    sensitive << ( ap_channel_done_sorted_1 );
    sensitive << ( sort_U0_out_frequency_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_sorted_1 );

    SC_METHOD(thread_ap_sync_channel_write_truncated_length_his);
    sensitive << ( ap_channel_done_truncated_length_his );
    sensitive << ( truncate_tree_U0_output_length_histogram1_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_truncated_length_his );

    SC_METHOD(thread_ap_sync_channel_write_truncated_length_his_1);
    sensitive << ( ap_channel_done_truncated_length_his_1 );
    sensitive << ( truncate_tree_U0_output_length_histogram2_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_truncated_length_his_1 );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_sync_done );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( create_codeword_U0_ap_done );
    sensitive << ( Block_proc_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( filter_U0_ap_ready );

    SC_METHOD(thread_canonize_tree_U0_ap_continue);
    sensitive << ( symbol_bits_V_i_full_n );

    SC_METHOD(thread_canonize_tree_U0_ap_start);
    sensitive << ( sorted_copy2_value_V_t_empty_n );
    sensitive << ( truncated_length_his_t_empty_n );

    SC_METHOD(thread_canonize_tree_U0_start_full_n);

    SC_METHOD(thread_canonize_tree_U0_start_write);

    SC_METHOD(thread_canonize_tree_U0_symbol_bits_V_full_n);
    sensitive << ( symbol_bits_V_i_full_n );

    SC_METHOD(thread_compute_bit_length_U0_ap_continue);
    sensitive << ( length_histogram_V_i_full_n );

    SC_METHOD(thread_compute_bit_length_U0_ap_start);
    sensitive << ( parent_V_t_empty_n );
    sensitive << ( left_V_t_empty_n );
    sensitive << ( right_V_t_empty_n );

    SC_METHOD(thread_compute_bit_length_U0_length_histogram_V_full_n);
    sensitive << ( length_histogram_V_i_full_n );

    SC_METHOD(thread_compute_bit_length_U0_start_full_n);

    SC_METHOD(thread_compute_bit_length_U0_start_write);

    SC_METHOD(thread_create_codeword_U0_ap_continue);
    sensitive << ( ap_sync_done );

    SC_METHOD(thread_create_codeword_U0_ap_start);
    sensitive << ( truncated_length_his_1_t_empty_n );
    sensitive << ( symbol_bits_V_t_empty_n );

    SC_METHOD(thread_create_codeword_U0_start_full_n);

    SC_METHOD(thread_create_codeword_U0_start_write);

    SC_METHOD(thread_create_tree_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_right_V );
    sensitive << ( ap_sync_channel_write_left_V );
    sensitive << ( ap_sync_channel_write_parent_V );

    SC_METHOD(thread_create_tree_U0_ap_start);
    sensitive << ( start_for_create_tree_U0_empty_n );

    SC_METHOD(thread_create_tree_U0_left_V_full_n);
    sensitive << ( left_V_i_full_n );

    SC_METHOD(thread_create_tree_U0_parent_V_full_n);
    sensitive << ( parent_V_i_full_n );

    SC_METHOD(thread_create_tree_U0_right_V_full_n);
    sensitive << ( right_V_i_full_n );

    SC_METHOD(thread_create_tree_U0_start_full_n);

    SC_METHOD(thread_create_tree_U0_start_write);

    SC_METHOD(thread_encoding_TDATA);
    sensitive << ( create_codeword_U0_encoding_TDATA );

    SC_METHOD(thread_encoding_TDEST);
    sensitive << ( create_codeword_U0_encoding_TDEST );

    SC_METHOD(thread_encoding_TID);
    sensitive << ( create_codeword_U0_encoding_TID );

    SC_METHOD(thread_encoding_TKEEP);
    sensitive << ( create_codeword_U0_encoding_TKEEP );

    SC_METHOD(thread_encoding_TLAST);
    sensitive << ( create_codeword_U0_encoding_TLAST );

    SC_METHOD(thread_encoding_TSTRB);
    sensitive << ( create_codeword_U0_encoding_TSTRB );

    SC_METHOD(thread_encoding_TUSER);
    sensitive << ( create_codeword_U0_encoding_TUSER );

    SC_METHOD(thread_encoding_TVALID);
    sensitive << ( create_codeword_U0_encoding_TVALID );

    SC_METHOD(thread_filter_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_filtered_frequency_V );
    sensitive << ( ap_sync_channel_write_filtered_value_V );

    SC_METHOD(thread_filter_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_filter_U0_out_frequency_V_full_n);
    sensitive << ( filtered_frequency_V_i_full_n );

    SC_METHOD(thread_filter_U0_out_value_V_full_n);
    sensitive << ( filtered_value_V_i_full_n );

    SC_METHOD(thread_left_V_t_d1);

    SC_METHOD(thread_left_V_t_we1);

    SC_METHOD(thread_parent_V_t_d1);

    SC_METHOD(thread_parent_V_t_we1);

    SC_METHOD(thread_right_V_t_d1);

    SC_METHOD(thread_right_V_t_we1);

    SC_METHOD(thread_sort_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_sorted_1 );
    sensitive << ( ap_sync_channel_write_sorted_0 );

    SC_METHOD(thread_sort_U0_ap_start);
    sensitive << ( filtered_value_V_t_empty_n );
    sensitive << ( filtered_frequency_V_t_empty_n );
    sensitive << ( extLd7_loc_channel_empty_n );

    SC_METHOD(thread_sort_U0_out_frequency_V_full_n);
    sensitive << ( sorted_1_i_full_n );

    SC_METHOD(thread_sort_U0_out_value_V_full_n);
    sensitive << ( sorted_0_i_full_n );

    SC_METHOD(thread_sort_U0_start_full_n);

    SC_METHOD(thread_sort_U0_start_write);

    SC_METHOD(thread_start_for_Block_codeRepl810_pr_U0_din);

    SC_METHOD(thread_start_for_Block_proc_U0_din);

    SC_METHOD(thread_start_for_create_tree_U0_din);

    SC_METHOD(thread_symbol_histogram_TREADY);
    sensitive << ( filter_U0_symbol_histogram_TREADY );

    SC_METHOD(thread_truncate_tree_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_truncated_length_his_1 );
    sensitive << ( ap_sync_channel_write_truncated_length_his );

    SC_METHOD(thread_truncate_tree_U0_ap_start);
    sensitive << ( length_histogram_V_t_empty_n );

    SC_METHOD(thread_truncate_tree_U0_output_length_histogram1_V_full_n);
    sensitive << ( truncated_length_his_i_full_n );

    SC_METHOD(thread_truncate_tree_U0_output_length_histogram2_V_full_n);
    sensitive << ( truncated_length_his_1_i_full_n );

    SC_METHOD(thread_truncate_tree_U0_start_full_n);

    SC_METHOD(thread_truncate_tree_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    ap_sync_reg_channel_write_filtered_frequency_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_filtered_value_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_sorted_1 = SC_LOGIC_0;
    ap_sync_reg_channel_write_sorted_0 = SC_LOGIC_0;
    ap_sync_reg_channel_write_right_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_left_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_parent_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_truncated_length_his_1 = SC_LOGIC_0;
    ap_sync_reg_channel_write_truncated_length_his = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "huffman_encoding_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, symbol_histogram_TDATA, "(port)symbol_histogram_TDATA");
    sc_trace(mVcdFile, symbol_histogram_TKEEP, "(port)symbol_histogram_TKEEP");
    sc_trace(mVcdFile, symbol_histogram_TSTRB, "(port)symbol_histogram_TSTRB");
    sc_trace(mVcdFile, symbol_histogram_TUSER, "(port)symbol_histogram_TUSER");
    sc_trace(mVcdFile, symbol_histogram_TLAST, "(port)symbol_histogram_TLAST");
    sc_trace(mVcdFile, symbol_histogram_TID, "(port)symbol_histogram_TID");
    sc_trace(mVcdFile, symbol_histogram_TDEST, "(port)symbol_histogram_TDEST");
    sc_trace(mVcdFile, encoding_TDATA, "(port)encoding_TDATA");
    sc_trace(mVcdFile, encoding_TKEEP, "(port)encoding_TKEEP");
    sc_trace(mVcdFile, encoding_TSTRB, "(port)encoding_TSTRB");
    sc_trace(mVcdFile, encoding_TUSER, "(port)encoding_TUSER");
    sc_trace(mVcdFile, encoding_TLAST, "(port)encoding_TLAST");
    sc_trace(mVcdFile, encoding_TID, "(port)encoding_TID");
    sc_trace(mVcdFile, encoding_TDEST, "(port)encoding_TDEST");
    sc_trace(mVcdFile, symbol_histogram_TVALID, "(port)symbol_histogram_TVALID");
    sc_trace(mVcdFile, symbol_histogram_TREADY, "(port)symbol_histogram_TREADY");
    sc_trace(mVcdFile, encoding_TVALID, "(port)encoding_TVALID");
    sc_trace(mVcdFile, encoding_TREADY, "(port)encoding_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, filtered_value_V_i_q0, "filtered_value_V_i_q0");
    sc_trace(mVcdFile, filtered_value_V_t_q0, "filtered_value_V_t_q0");
    sc_trace(mVcdFile, filtered_frequency_V_i_q0, "filtered_frequency_V_i_q0");
    sc_trace(mVcdFile, filtered_frequency_V_t_q0, "filtered_frequency_V_t_q0");
    sc_trace(mVcdFile, sorted_0_i_q0, "sorted_0_i_q0");
    sc_trace(mVcdFile, sorted_0_t_q0, "sorted_0_t_q0");
    sc_trace(mVcdFile, sorted_1_i_q0, "sorted_1_i_q0");
    sc_trace(mVcdFile, sorted_1_t_q0, "sorted_1_t_q0");
    sc_trace(mVcdFile, sorted_copy2_value_V_i_q0, "sorted_copy2_value_V_i_q0");
    sc_trace(mVcdFile, sorted_copy2_value_V_t_q0, "sorted_copy2_value_V_t_q0");
    sc_trace(mVcdFile, parent_V_i_q0, "parent_V_i_q0");
    sc_trace(mVcdFile, parent_V_i_q1, "parent_V_i_q1");
    sc_trace(mVcdFile, parent_V_t_q0, "parent_V_t_q0");
    sc_trace(mVcdFile, parent_V_t_q1, "parent_V_t_q1");
    sc_trace(mVcdFile, left_V_i_q0, "left_V_i_q0");
    sc_trace(mVcdFile, left_V_i_q1, "left_V_i_q1");
    sc_trace(mVcdFile, left_V_t_q0, "left_V_t_q0");
    sc_trace(mVcdFile, left_V_t_q1, "left_V_t_q1");
    sc_trace(mVcdFile, right_V_i_q0, "right_V_i_q0");
    sc_trace(mVcdFile, right_V_i_q1, "right_V_i_q1");
    sc_trace(mVcdFile, right_V_t_q0, "right_V_t_q0");
    sc_trace(mVcdFile, right_V_t_q1, "right_V_t_q1");
    sc_trace(mVcdFile, length_histogram_V_i_q0, "length_histogram_V_i_q0");
    sc_trace(mVcdFile, length_histogram_V_t_q0, "length_histogram_V_t_q0");
    sc_trace(mVcdFile, truncated_length_his_i_q0, "truncated_length_his_i_q0");
    sc_trace(mVcdFile, truncated_length_his_i_q1, "truncated_length_his_i_q1");
    sc_trace(mVcdFile, truncated_length_his_t_q0, "truncated_length_his_t_q0");
    sc_trace(mVcdFile, truncated_length_his_t_q1, "truncated_length_his_t_q1");
    sc_trace(mVcdFile, truncated_length_his_1_i_q0, "truncated_length_his_1_i_q0");
    sc_trace(mVcdFile, truncated_length_his_1_t_q0, "truncated_length_his_1_t_q0");
    sc_trace(mVcdFile, symbol_bits_V_i_q0, "symbol_bits_V_i_q0");
    sc_trace(mVcdFile, symbol_bits_V_t_q0, "symbol_bits_V_t_q0");
    sc_trace(mVcdFile, filter_U0_ap_start, "filter_U0_ap_start");
    sc_trace(mVcdFile, filter_U0_ap_done, "filter_U0_ap_done");
    sc_trace(mVcdFile, filter_U0_ap_continue, "filter_U0_ap_continue");
    sc_trace(mVcdFile, filter_U0_ap_idle, "filter_U0_ap_idle");
    sc_trace(mVcdFile, filter_U0_ap_ready, "filter_U0_ap_ready");
    sc_trace(mVcdFile, filter_U0_start_out, "filter_U0_start_out");
    sc_trace(mVcdFile, filter_U0_start_write, "filter_U0_start_write");
    sc_trace(mVcdFile, filter_U0_symbol_histogram_TREADY, "filter_U0_symbol_histogram_TREADY");
    sc_trace(mVcdFile, filter_U0_out_value_V_address0, "filter_U0_out_value_V_address0");
    sc_trace(mVcdFile, filter_U0_out_value_V_ce0, "filter_U0_out_value_V_ce0");
    sc_trace(mVcdFile, filter_U0_out_value_V_we0, "filter_U0_out_value_V_we0");
    sc_trace(mVcdFile, filter_U0_out_value_V_d0, "filter_U0_out_value_V_d0");
    sc_trace(mVcdFile, filter_U0_out_frequency_V_address0, "filter_U0_out_frequency_V_address0");
    sc_trace(mVcdFile, filter_U0_out_frequency_V_ce0, "filter_U0_out_frequency_V_ce0");
    sc_trace(mVcdFile, filter_U0_out_frequency_V_we0, "filter_U0_out_frequency_V_we0");
    sc_trace(mVcdFile, filter_U0_out_frequency_V_d0, "filter_U0_out_frequency_V_d0");
    sc_trace(mVcdFile, filter_U0_n_out_din, "filter_U0_n_out_din");
    sc_trace(mVcdFile, filter_U0_n_out_write, "filter_U0_n_out_write");
    sc_trace(mVcdFile, ap_channel_done_filtered_frequency_V, "ap_channel_done_filtered_frequency_V");
    sc_trace(mVcdFile, filter_U0_out_frequency_V_full_n, "filter_U0_out_frequency_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_filtered_frequency_V, "ap_sync_reg_channel_write_filtered_frequency_V");
    sc_trace(mVcdFile, ap_sync_channel_write_filtered_frequency_V, "ap_sync_channel_write_filtered_frequency_V");
    sc_trace(mVcdFile, ap_channel_done_filtered_value_V, "ap_channel_done_filtered_value_V");
    sc_trace(mVcdFile, filter_U0_out_value_V_full_n, "filter_U0_out_value_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_filtered_value_V, "ap_sync_reg_channel_write_filtered_value_V");
    sc_trace(mVcdFile, ap_sync_channel_write_filtered_value_V, "ap_sync_channel_write_filtered_value_V");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_ap_start, "Block_codeRepl810_pr_U0_ap_start");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_ap_done, "Block_codeRepl810_pr_U0_ap_done");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_ap_continue, "Block_codeRepl810_pr_U0_ap_continue");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_ap_idle, "Block_codeRepl810_pr_U0_ap_idle");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_ap_ready, "Block_codeRepl810_pr_U0_ap_ready");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_n_read, "Block_codeRepl810_pr_U0_n_read");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_n_out_din, "Block_codeRepl810_pr_U0_n_out_din");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_n_out_write, "Block_codeRepl810_pr_U0_n_out_write");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_ap_return, "Block_codeRepl810_pr_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_extLd7_loc_channel, "ap_channel_done_extLd7_loc_channel");
    sc_trace(mVcdFile, extLd7_loc_channel_full_n, "extLd7_loc_channel_full_n");
    sc_trace(mVcdFile, sort_U0_ap_start, "sort_U0_ap_start");
    sc_trace(mVcdFile, sort_U0_ap_done, "sort_U0_ap_done");
    sc_trace(mVcdFile, sort_U0_ap_continue, "sort_U0_ap_continue");
    sc_trace(mVcdFile, sort_U0_ap_idle, "sort_U0_ap_idle");
    sc_trace(mVcdFile, sort_U0_ap_ready, "sort_U0_ap_ready");
    sc_trace(mVcdFile, sort_U0_in_value_V_address0, "sort_U0_in_value_V_address0");
    sc_trace(mVcdFile, sort_U0_in_value_V_ce0, "sort_U0_in_value_V_ce0");
    sc_trace(mVcdFile, sort_U0_in_frequency_V_address0, "sort_U0_in_frequency_V_address0");
    sc_trace(mVcdFile, sort_U0_in_frequency_V_ce0, "sort_U0_in_frequency_V_ce0");
    sc_trace(mVcdFile, sort_U0_out_value_V_address0, "sort_U0_out_value_V_address0");
    sc_trace(mVcdFile, sort_U0_out_value_V_ce0, "sort_U0_out_value_V_ce0");
    sc_trace(mVcdFile, sort_U0_out_value_V_we0, "sort_U0_out_value_V_we0");
    sc_trace(mVcdFile, sort_U0_out_value_V_d0, "sort_U0_out_value_V_d0");
    sc_trace(mVcdFile, sort_U0_out_frequency_V_address0, "sort_U0_out_frequency_V_address0");
    sc_trace(mVcdFile, sort_U0_out_frequency_V_ce0, "sort_U0_out_frequency_V_ce0");
    sc_trace(mVcdFile, sort_U0_out_frequency_V_we0, "sort_U0_out_frequency_V_we0");
    sc_trace(mVcdFile, sort_U0_out_frequency_V_d0, "sort_U0_out_frequency_V_d0");
    sc_trace(mVcdFile, ap_channel_done_sorted_1, "ap_channel_done_sorted_1");
    sc_trace(mVcdFile, sort_U0_out_frequency_V_full_n, "sort_U0_out_frequency_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_sorted_1, "ap_sync_reg_channel_write_sorted_1");
    sc_trace(mVcdFile, ap_sync_channel_write_sorted_1, "ap_sync_channel_write_sorted_1");
    sc_trace(mVcdFile, ap_channel_done_sorted_0, "ap_channel_done_sorted_0");
    sc_trace(mVcdFile, sort_U0_out_value_V_full_n, "sort_U0_out_value_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_sorted_0, "ap_sync_reg_channel_write_sorted_0");
    sc_trace(mVcdFile, ap_sync_channel_write_sorted_0, "ap_sync_channel_write_sorted_0");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_ap_start, "Loop_copy_sorted_pro_U0_ap_start");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_start_full_n, "Loop_copy_sorted_pro_U0_start_full_n");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_ap_done, "Loop_copy_sorted_pro_U0_ap_done");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_ap_continue, "Loop_copy_sorted_pro_U0_ap_continue");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_ap_idle, "Loop_copy_sorted_pro_U0_ap_idle");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_ap_ready, "Loop_copy_sorted_pro_U0_ap_ready");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_start_out, "Loop_copy_sorted_pro_U0_start_out");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_start_write, "Loop_copy_sorted_pro_U0_start_write");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_n_read, "Loop_copy_sorted_pro_U0_n_read");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_0_address0, "Loop_copy_sorted_pro_U0_sorted_0_address0");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_0_ce0, "Loop_copy_sorted_pro_U0_sorted_0_ce0");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_copy1_0_din, "Loop_copy_sorted_pro_U0_sorted_copy1_0_din");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_copy1_0_write, "Loop_copy_sorted_pro_U0_sorted_copy1_0_write");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_1_address0, "Loop_copy_sorted_pro_U0_sorted_1_address0");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_1_ce0, "Loop_copy_sorted_pro_U0_sorted_1_ce0");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_copy1_1_din, "Loop_copy_sorted_pro_U0_sorted_copy1_1_din");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_copy1_1_write, "Loop_copy_sorted_pro_U0_sorted_copy1_1_write");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_copy2_value_V_address0, "Loop_copy_sorted_pro_U0_sorted_copy2_value_V_address0");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_copy2_value_V_ce0, "Loop_copy_sorted_pro_U0_sorted_copy2_value_V_ce0");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_copy2_value_V_we0, "Loop_copy_sorted_pro_U0_sorted_copy2_value_V_we0");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_copy2_value_V_d0, "Loop_copy_sorted_pro_U0_sorted_copy2_value_V_d0");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_val_assign5_out_out_din, "Loop_copy_sorted_pro_U0_val_assign5_out_out_din");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_val_assign5_out_out_write, "Loop_copy_sorted_pro_U0_val_assign5_out_out_write");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_extLd_out_out_din, "Loop_copy_sorted_pro_U0_extLd_out_out_din");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_extLd_out_out_write, "Loop_copy_sorted_pro_U0_extLd_out_out_write");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_extLd_out_out1_din, "Loop_copy_sorted_pro_U0_extLd_out_out1_din");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_extLd_out_out1_write, "Loop_copy_sorted_pro_U0_extLd_out_out1_write");
    sc_trace(mVcdFile, ap_channel_done_sorted_copy2_value_V, "ap_channel_done_sorted_copy2_value_V");
    sc_trace(mVcdFile, Loop_copy_sorted_pro_U0_sorted_copy2_value_V_full_n, "Loop_copy_sorted_pro_U0_sorted_copy2_value_V_full_n");
    sc_trace(mVcdFile, create_tree_U0_ap_start, "create_tree_U0_ap_start");
    sc_trace(mVcdFile, create_tree_U0_ap_done, "create_tree_U0_ap_done");
    sc_trace(mVcdFile, create_tree_U0_ap_continue, "create_tree_U0_ap_continue");
    sc_trace(mVcdFile, create_tree_U0_ap_idle, "create_tree_U0_ap_idle");
    sc_trace(mVcdFile, create_tree_U0_ap_ready, "create_tree_U0_ap_ready");
    sc_trace(mVcdFile, create_tree_U0_in_value_V_read, "create_tree_U0_in_value_V_read");
    sc_trace(mVcdFile, create_tree_U0_in_frequency_V_read, "create_tree_U0_in_frequency_V_read");
    sc_trace(mVcdFile, create_tree_U0_extLd_loc_read, "create_tree_U0_extLd_loc_read");
    sc_trace(mVcdFile, create_tree_U0_parent_V_address0, "create_tree_U0_parent_V_address0");
    sc_trace(mVcdFile, create_tree_U0_parent_V_ce0, "create_tree_U0_parent_V_ce0");
    sc_trace(mVcdFile, create_tree_U0_parent_V_we0, "create_tree_U0_parent_V_we0");
    sc_trace(mVcdFile, create_tree_U0_parent_V_d0, "create_tree_U0_parent_V_d0");
    sc_trace(mVcdFile, create_tree_U0_left_V_address0, "create_tree_U0_left_V_address0");
    sc_trace(mVcdFile, create_tree_U0_left_V_ce0, "create_tree_U0_left_V_ce0");
    sc_trace(mVcdFile, create_tree_U0_left_V_we0, "create_tree_U0_left_V_we0");
    sc_trace(mVcdFile, create_tree_U0_left_V_d0, "create_tree_U0_left_V_d0");
    sc_trace(mVcdFile, create_tree_U0_right_V_address0, "create_tree_U0_right_V_address0");
    sc_trace(mVcdFile, create_tree_U0_right_V_ce0, "create_tree_U0_right_V_ce0");
    sc_trace(mVcdFile, create_tree_U0_right_V_we0, "create_tree_U0_right_V_we0");
    sc_trace(mVcdFile, create_tree_U0_right_V_d0, "create_tree_U0_right_V_d0");
    sc_trace(mVcdFile, create_tree_U0_extLd_loc_out_din, "create_tree_U0_extLd_loc_out_din");
    sc_trace(mVcdFile, create_tree_U0_extLd_loc_out_write, "create_tree_U0_extLd_loc_out_write");
    sc_trace(mVcdFile, ap_channel_done_right_V, "ap_channel_done_right_V");
    sc_trace(mVcdFile, create_tree_U0_right_V_full_n, "create_tree_U0_right_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_right_V, "ap_sync_reg_channel_write_right_V");
    sc_trace(mVcdFile, ap_sync_channel_write_right_V, "ap_sync_channel_write_right_V");
    sc_trace(mVcdFile, ap_channel_done_left_V, "ap_channel_done_left_V");
    sc_trace(mVcdFile, create_tree_U0_left_V_full_n, "create_tree_U0_left_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_left_V, "ap_sync_reg_channel_write_left_V");
    sc_trace(mVcdFile, ap_sync_channel_write_left_V, "ap_sync_channel_write_left_V");
    sc_trace(mVcdFile, ap_channel_done_parent_V, "ap_channel_done_parent_V");
    sc_trace(mVcdFile, create_tree_U0_parent_V_full_n, "create_tree_U0_parent_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_parent_V, "ap_sync_reg_channel_write_parent_V");
    sc_trace(mVcdFile, ap_sync_channel_write_parent_V, "ap_sync_channel_write_parent_V");
    sc_trace(mVcdFile, compute_bit_length_U0_ap_start, "compute_bit_length_U0_ap_start");
    sc_trace(mVcdFile, compute_bit_length_U0_ap_done, "compute_bit_length_U0_ap_done");
    sc_trace(mVcdFile, compute_bit_length_U0_ap_continue, "compute_bit_length_U0_ap_continue");
    sc_trace(mVcdFile, compute_bit_length_U0_ap_idle, "compute_bit_length_U0_ap_idle");
    sc_trace(mVcdFile, compute_bit_length_U0_ap_ready, "compute_bit_length_U0_ap_ready");
    sc_trace(mVcdFile, compute_bit_length_U0_parent_V_address0, "compute_bit_length_U0_parent_V_address0");
    sc_trace(mVcdFile, compute_bit_length_U0_parent_V_ce0, "compute_bit_length_U0_parent_V_ce0");
    sc_trace(mVcdFile, compute_bit_length_U0_parent_V_address1, "compute_bit_length_U0_parent_V_address1");
    sc_trace(mVcdFile, compute_bit_length_U0_parent_V_ce1, "compute_bit_length_U0_parent_V_ce1");
    sc_trace(mVcdFile, compute_bit_length_U0_left_V_address0, "compute_bit_length_U0_left_V_address0");
    sc_trace(mVcdFile, compute_bit_length_U0_left_V_ce0, "compute_bit_length_U0_left_V_ce0");
    sc_trace(mVcdFile, compute_bit_length_U0_left_V_address1, "compute_bit_length_U0_left_V_address1");
    sc_trace(mVcdFile, compute_bit_length_U0_left_V_ce1, "compute_bit_length_U0_left_V_ce1");
    sc_trace(mVcdFile, compute_bit_length_U0_right_V_address0, "compute_bit_length_U0_right_V_address0");
    sc_trace(mVcdFile, compute_bit_length_U0_right_V_ce0, "compute_bit_length_U0_right_V_ce0");
    sc_trace(mVcdFile, compute_bit_length_U0_right_V_address1, "compute_bit_length_U0_right_V_address1");
    sc_trace(mVcdFile, compute_bit_length_U0_right_V_ce1, "compute_bit_length_U0_right_V_ce1");
    sc_trace(mVcdFile, compute_bit_length_U0_extLd_loc_read, "compute_bit_length_U0_extLd_loc_read");
    sc_trace(mVcdFile, compute_bit_length_U0_length_histogram_V_address0, "compute_bit_length_U0_length_histogram_V_address0");
    sc_trace(mVcdFile, compute_bit_length_U0_length_histogram_V_ce0, "compute_bit_length_U0_length_histogram_V_ce0");
    sc_trace(mVcdFile, compute_bit_length_U0_length_histogram_V_we0, "compute_bit_length_U0_length_histogram_V_we0");
    sc_trace(mVcdFile, compute_bit_length_U0_length_histogram_V_d0, "compute_bit_length_U0_length_histogram_V_d0");
    sc_trace(mVcdFile, ap_channel_done_length_histogram_V, "ap_channel_done_length_histogram_V");
    sc_trace(mVcdFile, compute_bit_length_U0_length_histogram_V_full_n, "compute_bit_length_U0_length_histogram_V_full_n");
    sc_trace(mVcdFile, truncate_tree_U0_ap_start, "truncate_tree_U0_ap_start");
    sc_trace(mVcdFile, truncate_tree_U0_ap_done, "truncate_tree_U0_ap_done");
    sc_trace(mVcdFile, truncate_tree_U0_ap_continue, "truncate_tree_U0_ap_continue");
    sc_trace(mVcdFile, truncate_tree_U0_ap_idle, "truncate_tree_U0_ap_idle");
    sc_trace(mVcdFile, truncate_tree_U0_ap_ready, "truncate_tree_U0_ap_ready");
    sc_trace(mVcdFile, truncate_tree_U0_input_length_histogram_V_address0, "truncate_tree_U0_input_length_histogram_V_address0");
    sc_trace(mVcdFile, truncate_tree_U0_input_length_histogram_V_ce0, "truncate_tree_U0_input_length_histogram_V_ce0");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram1_V_address0, "truncate_tree_U0_output_length_histogram1_V_address0");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram1_V_ce0, "truncate_tree_U0_output_length_histogram1_V_ce0");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram1_V_we0, "truncate_tree_U0_output_length_histogram1_V_we0");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram1_V_d0, "truncate_tree_U0_output_length_histogram1_V_d0");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram1_V_address1, "truncate_tree_U0_output_length_histogram1_V_address1");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram1_V_ce1, "truncate_tree_U0_output_length_histogram1_V_ce1");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram1_V_we1, "truncate_tree_U0_output_length_histogram1_V_we1");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram1_V_d1, "truncate_tree_U0_output_length_histogram1_V_d1");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram2_V_address0, "truncate_tree_U0_output_length_histogram2_V_address0");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram2_V_ce0, "truncate_tree_U0_output_length_histogram2_V_ce0");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram2_V_we0, "truncate_tree_U0_output_length_histogram2_V_we0");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram2_V_d0, "truncate_tree_U0_output_length_histogram2_V_d0");
    sc_trace(mVcdFile, ap_channel_done_truncated_length_his_1, "ap_channel_done_truncated_length_his_1");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram2_V_full_n, "truncate_tree_U0_output_length_histogram2_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_truncated_length_his_1, "ap_sync_reg_channel_write_truncated_length_his_1");
    sc_trace(mVcdFile, ap_sync_channel_write_truncated_length_his_1, "ap_sync_channel_write_truncated_length_his_1");
    sc_trace(mVcdFile, ap_channel_done_truncated_length_his, "ap_channel_done_truncated_length_his");
    sc_trace(mVcdFile, truncate_tree_U0_output_length_histogram1_V_full_n, "truncate_tree_U0_output_length_histogram1_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_truncated_length_his, "ap_sync_reg_channel_write_truncated_length_his");
    sc_trace(mVcdFile, ap_sync_channel_write_truncated_length_his, "ap_sync_channel_write_truncated_length_his");
    sc_trace(mVcdFile, canonize_tree_U0_ap_start, "canonize_tree_U0_ap_start");
    sc_trace(mVcdFile, canonize_tree_U0_ap_done, "canonize_tree_U0_ap_done");
    sc_trace(mVcdFile, canonize_tree_U0_ap_continue, "canonize_tree_U0_ap_continue");
    sc_trace(mVcdFile, canonize_tree_U0_ap_idle, "canonize_tree_U0_ap_idle");
    sc_trace(mVcdFile, canonize_tree_U0_ap_ready, "canonize_tree_U0_ap_ready");
    sc_trace(mVcdFile, canonize_tree_U0_sorted_value_V_address0, "canonize_tree_U0_sorted_value_V_address0");
    sc_trace(mVcdFile, canonize_tree_U0_sorted_value_V_ce0, "canonize_tree_U0_sorted_value_V_ce0");
    sc_trace(mVcdFile, canonize_tree_U0_val_assign5_loc_read, "canonize_tree_U0_val_assign5_loc_read");
    sc_trace(mVcdFile, canonize_tree_U0_codeword_length_histogram_V_address0, "canonize_tree_U0_codeword_length_histogram_V_address0");
    sc_trace(mVcdFile, canonize_tree_U0_codeword_length_histogram_V_ce0, "canonize_tree_U0_codeword_length_histogram_V_ce0");
    sc_trace(mVcdFile, canonize_tree_U0_symbol_bits_V_address0, "canonize_tree_U0_symbol_bits_V_address0");
    sc_trace(mVcdFile, canonize_tree_U0_symbol_bits_V_ce0, "canonize_tree_U0_symbol_bits_V_ce0");
    sc_trace(mVcdFile, canonize_tree_U0_symbol_bits_V_we0, "canonize_tree_U0_symbol_bits_V_we0");
    sc_trace(mVcdFile, canonize_tree_U0_symbol_bits_V_d0, "canonize_tree_U0_symbol_bits_V_d0");
    sc_trace(mVcdFile, ap_channel_done_symbol_bits_V, "ap_channel_done_symbol_bits_V");
    sc_trace(mVcdFile, canonize_tree_U0_symbol_bits_V_full_n, "canonize_tree_U0_symbol_bits_V_full_n");
    sc_trace(mVcdFile, create_codeword_U0_ap_start, "create_codeword_U0_ap_start");
    sc_trace(mVcdFile, create_codeword_U0_ap_done, "create_codeword_U0_ap_done");
    sc_trace(mVcdFile, create_codeword_U0_ap_continue, "create_codeword_U0_ap_continue");
    sc_trace(mVcdFile, create_codeword_U0_ap_idle, "create_codeword_U0_ap_idle");
    sc_trace(mVcdFile, create_codeword_U0_ap_ready, "create_codeword_U0_ap_ready");
    sc_trace(mVcdFile, create_codeword_U0_symbol_bits_V_address0, "create_codeword_U0_symbol_bits_V_address0");
    sc_trace(mVcdFile, create_codeword_U0_symbol_bits_V_ce0, "create_codeword_U0_symbol_bits_V_ce0");
    sc_trace(mVcdFile, create_codeword_U0_codeword_length_histogram_V_address0, "create_codeword_U0_codeword_length_histogram_V_address0");
    sc_trace(mVcdFile, create_codeword_U0_codeword_length_histogram_V_ce0, "create_codeword_U0_codeword_length_histogram_V_ce0");
    sc_trace(mVcdFile, create_codeword_U0_encoding_TDATA, "create_codeword_U0_encoding_TDATA");
    sc_trace(mVcdFile, create_codeword_U0_encoding_TVALID, "create_codeword_U0_encoding_TVALID");
    sc_trace(mVcdFile, create_codeword_U0_encoding_TKEEP, "create_codeword_U0_encoding_TKEEP");
    sc_trace(mVcdFile, create_codeword_U0_encoding_TSTRB, "create_codeword_U0_encoding_TSTRB");
    sc_trace(mVcdFile, create_codeword_U0_encoding_TUSER, "create_codeword_U0_encoding_TUSER");
    sc_trace(mVcdFile, create_codeword_U0_encoding_TLAST, "create_codeword_U0_encoding_TLAST");
    sc_trace(mVcdFile, create_codeword_U0_encoding_TID, "create_codeword_U0_encoding_TID");
    sc_trace(mVcdFile, create_codeword_U0_encoding_TDEST, "create_codeword_U0_encoding_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, Block_proc_U0_ap_start, "Block_proc_U0_ap_start");
    sc_trace(mVcdFile, Block_proc_U0_ap_done, "Block_proc_U0_ap_done");
    sc_trace(mVcdFile, Block_proc_U0_ap_continue, "Block_proc_U0_ap_continue");
    sc_trace(mVcdFile, Block_proc_U0_ap_idle, "Block_proc_U0_ap_idle");
    sc_trace(mVcdFile, Block_proc_U0_ap_ready, "Block_proc_U0_ap_ready");
    sc_trace(mVcdFile, Block_proc_U0_extLd_loc_read, "Block_proc_U0_extLd_loc_read");
    sc_trace(mVcdFile, Block_proc_U0_num_nonzero_symbols, "Block_proc_U0_num_nonzero_symbols");
    sc_trace(mVcdFile, Block_proc_U0_num_nonzero_symbols_ap_vld, "Block_proc_U0_num_nonzero_symbols_ap_vld");
    sc_trace(mVcdFile, filtered_value_V_i_full_n, "filtered_value_V_i_full_n");
    sc_trace(mVcdFile, filtered_value_V_t_empty_n, "filtered_value_V_t_empty_n");
    sc_trace(mVcdFile, filtered_frequency_V_i_full_n, "filtered_frequency_V_i_full_n");
    sc_trace(mVcdFile, filtered_frequency_V_t_empty_n, "filtered_frequency_V_t_empty_n");
    sc_trace(mVcdFile, sorted_0_i_full_n, "sorted_0_i_full_n");
    sc_trace(mVcdFile, sorted_0_t_empty_n, "sorted_0_t_empty_n");
    sc_trace(mVcdFile, sorted_1_i_full_n, "sorted_1_i_full_n");
    sc_trace(mVcdFile, sorted_1_t_empty_n, "sorted_1_t_empty_n");
    sc_trace(mVcdFile, sorted_copy2_value_V_i_full_n, "sorted_copy2_value_V_i_full_n");
    sc_trace(mVcdFile, sorted_copy2_value_V_t_empty_n, "sorted_copy2_value_V_t_empty_n");
    sc_trace(mVcdFile, parent_V_i_full_n, "parent_V_i_full_n");
    sc_trace(mVcdFile, parent_V_t_empty_n, "parent_V_t_empty_n");
    sc_trace(mVcdFile, parent_V_t_d1, "parent_V_t_d1");
    sc_trace(mVcdFile, parent_V_t_we1, "parent_V_t_we1");
    sc_trace(mVcdFile, left_V_i_full_n, "left_V_i_full_n");
    sc_trace(mVcdFile, left_V_t_empty_n, "left_V_t_empty_n");
    sc_trace(mVcdFile, left_V_t_d1, "left_V_t_d1");
    sc_trace(mVcdFile, left_V_t_we1, "left_V_t_we1");
    sc_trace(mVcdFile, right_V_i_full_n, "right_V_i_full_n");
    sc_trace(mVcdFile, right_V_t_empty_n, "right_V_t_empty_n");
    sc_trace(mVcdFile, right_V_t_d1, "right_V_t_d1");
    sc_trace(mVcdFile, right_V_t_we1, "right_V_t_we1");
    sc_trace(mVcdFile, length_histogram_V_i_full_n, "length_histogram_V_i_full_n");
    sc_trace(mVcdFile, length_histogram_V_t_empty_n, "length_histogram_V_t_empty_n");
    sc_trace(mVcdFile, truncated_length_his_i_full_n, "truncated_length_his_i_full_n");
    sc_trace(mVcdFile, truncated_length_his_t_empty_n, "truncated_length_his_t_empty_n");
    sc_trace(mVcdFile, truncated_length_his_1_i_full_n, "truncated_length_his_1_i_full_n");
    sc_trace(mVcdFile, truncated_length_his_1_t_empty_n, "truncated_length_his_1_t_empty_n");
    sc_trace(mVcdFile, symbol_bits_V_i_full_n, "symbol_bits_V_i_full_n");
    sc_trace(mVcdFile, symbol_bits_V_t_empty_n, "symbol_bits_V_t_empty_n");
    sc_trace(mVcdFile, n_c_full_n, "n_c_full_n");
    sc_trace(mVcdFile, n_c_dout, "n_c_dout");
    sc_trace(mVcdFile, n_c_empty_n, "n_c_empty_n");
    sc_trace(mVcdFile, n_c18_full_n, "n_c18_full_n");
    sc_trace(mVcdFile, n_c18_dout, "n_c18_dout");
    sc_trace(mVcdFile, n_c18_empty_n, "n_c18_empty_n");
    sc_trace(mVcdFile, extLd7_loc_channel_dout, "extLd7_loc_channel_dout");
    sc_trace(mVcdFile, extLd7_loc_channel_empty_n, "extLd7_loc_channel_empty_n");
    sc_trace(mVcdFile, sorted_copy1_0_chann_full_n, "sorted_copy1_0_chann_full_n");
    sc_trace(mVcdFile, sorted_copy1_0_chann_dout, "sorted_copy1_0_chann_dout");
    sc_trace(mVcdFile, sorted_copy1_0_chann_empty_n, "sorted_copy1_0_chann_empty_n");
    sc_trace(mVcdFile, sorted_copy1_1_chann_full_n, "sorted_copy1_1_chann_full_n");
    sc_trace(mVcdFile, sorted_copy1_1_chann_dout, "sorted_copy1_1_chann_dout");
    sc_trace(mVcdFile, sorted_copy1_1_chann_empty_n, "sorted_copy1_1_chann_empty_n");
    sc_trace(mVcdFile, val_assign5_loc_c_full_n, "val_assign5_loc_c_full_n");
    sc_trace(mVcdFile, val_assign5_loc_c_dout, "val_assign5_loc_c_dout");
    sc_trace(mVcdFile, val_assign5_loc_c_empty_n, "val_assign5_loc_c_empty_n");
    sc_trace(mVcdFile, extLd_loc_c_full_n, "extLd_loc_c_full_n");
    sc_trace(mVcdFile, extLd_loc_c_dout, "extLd_loc_c_dout");
    sc_trace(mVcdFile, extLd_loc_c_empty_n, "extLd_loc_c_empty_n");
    sc_trace(mVcdFile, extLd_loc_c19_full_n, "extLd_loc_c19_full_n");
    sc_trace(mVcdFile, extLd_loc_c19_dout, "extLd_loc_c19_dout");
    sc_trace(mVcdFile, extLd_loc_c19_empty_n, "extLd_loc_c19_empty_n");
    sc_trace(mVcdFile, extLd_loc_c20_full_n, "extLd_loc_c20_full_n");
    sc_trace(mVcdFile, extLd_loc_c20_dout, "extLd_loc_c20_dout");
    sc_trace(mVcdFile, extLd_loc_c20_empty_n, "extLd_loc_c20_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_Block_codeRepl810_pr_U0_din, "start_for_Block_codeRepl810_pr_U0_din");
    sc_trace(mVcdFile, start_for_Block_codeRepl810_pr_U0_full_n, "start_for_Block_codeRepl810_pr_U0_full_n");
    sc_trace(mVcdFile, start_for_Block_codeRepl810_pr_U0_dout, "start_for_Block_codeRepl810_pr_U0_dout");
    sc_trace(mVcdFile, start_for_Block_codeRepl810_pr_U0_empty_n, "start_for_Block_codeRepl810_pr_U0_empty_n");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_start_full_n, "Block_codeRepl810_pr_U0_start_full_n");
    sc_trace(mVcdFile, Block_codeRepl810_pr_U0_start_write, "Block_codeRepl810_pr_U0_start_write");
    sc_trace(mVcdFile, sort_U0_start_full_n, "sort_U0_start_full_n");
    sc_trace(mVcdFile, sort_U0_start_write, "sort_U0_start_write");
    sc_trace(mVcdFile, start_for_create_tree_U0_din, "start_for_create_tree_U0_din");
    sc_trace(mVcdFile, start_for_create_tree_U0_full_n, "start_for_create_tree_U0_full_n");
    sc_trace(mVcdFile, start_for_create_tree_U0_dout, "start_for_create_tree_U0_dout");
    sc_trace(mVcdFile, start_for_create_tree_U0_empty_n, "start_for_create_tree_U0_empty_n");
    sc_trace(mVcdFile, start_for_Block_proc_U0_din, "start_for_Block_proc_U0_din");
    sc_trace(mVcdFile, start_for_Block_proc_U0_full_n, "start_for_Block_proc_U0_full_n");
    sc_trace(mVcdFile, start_for_Block_proc_U0_dout, "start_for_Block_proc_U0_dout");
    sc_trace(mVcdFile, start_for_Block_proc_U0_empty_n, "start_for_Block_proc_U0_empty_n");
    sc_trace(mVcdFile, create_tree_U0_start_full_n, "create_tree_U0_start_full_n");
    sc_trace(mVcdFile, create_tree_U0_start_write, "create_tree_U0_start_write");
    sc_trace(mVcdFile, compute_bit_length_U0_start_full_n, "compute_bit_length_U0_start_full_n");
    sc_trace(mVcdFile, compute_bit_length_U0_start_write, "compute_bit_length_U0_start_write");
    sc_trace(mVcdFile, truncate_tree_U0_start_full_n, "truncate_tree_U0_start_full_n");
    sc_trace(mVcdFile, truncate_tree_U0_start_write, "truncate_tree_U0_start_write");
    sc_trace(mVcdFile, canonize_tree_U0_start_full_n, "canonize_tree_U0_start_full_n");
    sc_trace(mVcdFile, canonize_tree_U0_start_write, "canonize_tree_U0_start_write");
    sc_trace(mVcdFile, create_codeword_U0_start_full_n, "create_codeword_U0_start_full_n");
    sc_trace(mVcdFile, create_codeword_U0_start_write, "create_codeword_U0_start_write");
    sc_trace(mVcdFile, Block_proc_U0_start_full_n, "Block_proc_U0_start_full_n");
    sc_trace(mVcdFile, Block_proc_U0_start_write, "Block_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("huffman_encoding.hdltvin.dat");
    mHdltvoutHandle.open("huffman_encoding.hdltvout.dat");
}

huffman_encoding::~huffman_encoding() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete huffman_encoding_AXILiteS_s_axi_U;
    delete filtered_value_V_U;
    delete filtered_frequency_V_U;
    delete sorted_0_U;
    delete sorted_1_U;
    delete sorted_copy2_value_V_U;
    delete parent_V_U;
    delete left_V_U;
    delete right_V_U;
    delete length_histogram_V_U;
    delete truncated_length_his_U;
    delete truncated_length_his_1_U;
    delete symbol_bits_V_U;
    delete filter_U0;
    delete Block_codeRepl810_pr_U0;
    delete sort_U0;
    delete Loop_copy_sorted_pro_U0;
    delete create_tree_U0;
    delete compute_bit_length_U0;
    delete truncate_tree_U0;
    delete canonize_tree_U0;
    delete create_codeword_U0;
    delete Block_proc_U0;
    delete n_c_U;
    delete n_c18_U;
    delete extLd7_loc_channel_U;
    delete sorted_copy1_0_chann_U;
    delete sorted_copy1_1_chann_U;
    delete val_assign5_loc_c_U;
    delete extLd_loc_c_U;
    delete extLd_loc_c19_U;
    delete extLd_loc_c20_U;
    delete start_for_Block_czec_U;
    delete start_for_create_Aem_U;
    delete start_for_Block_pBew_U;
}

void huffman_encoding::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void huffman_encoding::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv32_0;
}

void huffman_encoding::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void huffman_encoding::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv9_0;
}

void huffman_encoding::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv5_0;
}

void huffman_encoding::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv8_0;
}

void huffman_encoding::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv6_0;
}

void huffman_encoding::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_filtered_frequency_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (filter_U0_ap_done.read() & 
             filter_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_filtered_frequency_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_filtered_frequency_V = ap_sync_channel_write_filtered_frequency_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_filtered_value_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (filter_U0_ap_done.read() & 
             filter_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_filtered_value_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_filtered_value_V = ap_sync_channel_write_filtered_value_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_left_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (create_tree_U0_ap_done.read() & 
             create_tree_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_left_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_left_V = ap_sync_channel_write_left_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_parent_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (create_tree_U0_ap_done.read() & 
             create_tree_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_parent_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_parent_V = ap_sync_channel_write_parent_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_right_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (create_tree_U0_ap_done.read() & 
             create_tree_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_right_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_right_V = ap_sync_channel_write_right_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_sorted_0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (sort_U0_ap_done.read() & 
             sort_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_sorted_0 = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_sorted_0 = ap_sync_channel_write_sorted_0.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_sorted_1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (sort_U0_ap_done.read() & 
             sort_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_sorted_1 = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_sorted_1 = ap_sync_channel_write_sorted_1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_truncated_length_his = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (truncate_tree_U0_ap_done.read() & 
             truncate_tree_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_truncated_length_his = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_truncated_length_his = ap_sync_channel_write_truncated_length_his.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_truncated_length_his_1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (truncate_tree_U0_ap_done.read() & 
             truncate_tree_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_truncated_length_his_1 = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_truncated_length_his_1 = ap_sync_channel_write_truncated_length_his_1.read();
        }
    }
}

void huffman_encoding::thread_Block_codeRepl810_pr_U0_ap_continue() {
    Block_codeRepl810_pr_U0_ap_continue = extLd7_loc_channel_full_n.read();
}

void huffman_encoding::thread_Block_codeRepl810_pr_U0_ap_start() {
    Block_codeRepl810_pr_U0_ap_start = start_for_Block_codeRepl810_pr_U0_empty_n.read();
}

void huffman_encoding::thread_Block_codeRepl810_pr_U0_start_full_n() {
    Block_codeRepl810_pr_U0_start_full_n = ap_const_logic_1;
}

void huffman_encoding::thread_Block_codeRepl810_pr_U0_start_write() {
    Block_codeRepl810_pr_U0_start_write = ap_const_logic_0;
}

void huffman_encoding::thread_Block_proc_U0_ap_continue() {
    Block_proc_U0_ap_continue = ap_sync_done.read();
}

void huffman_encoding::thread_Block_proc_U0_ap_start() {
    Block_proc_U0_ap_start = start_for_Block_proc_U0_empty_n.read();
}

void huffman_encoding::thread_Block_proc_U0_start_full_n() {
    Block_proc_U0_start_full_n = ap_const_logic_1;
}

void huffman_encoding::thread_Block_proc_U0_start_write() {
    Block_proc_U0_start_write = ap_const_logic_0;
}

void huffman_encoding::thread_Loop_copy_sorted_pro_U0_ap_continue() {
    Loop_copy_sorted_pro_U0_ap_continue = sorted_copy2_value_V_i_full_n.read();
}

void huffman_encoding::thread_Loop_copy_sorted_pro_U0_ap_start() {
    Loop_copy_sorted_pro_U0_ap_start = (sorted_0_t_empty_n.read() & sorted_1_t_empty_n.read());
}

void huffman_encoding::thread_Loop_copy_sorted_pro_U0_sorted_copy2_value_V_full_n() {
    Loop_copy_sorted_pro_U0_sorted_copy2_value_V_full_n = sorted_copy2_value_V_i_full_n.read();
}

void huffman_encoding::thread_Loop_copy_sorted_pro_U0_start_full_n() {
    Loop_copy_sorted_pro_U0_start_full_n = (start_for_create_tree_U0_full_n.read() & start_for_Block_proc_U0_full_n.read());
}

void huffman_encoding::thread_ap_channel_done_extLd7_loc_channel() {
    ap_channel_done_extLd7_loc_channel = Block_codeRepl810_pr_U0_ap_done.read();
}

void huffman_encoding::thread_ap_channel_done_filtered_frequency_V() {
    ap_channel_done_filtered_frequency_V = (filter_U0_ap_done.read() & (ap_sync_reg_channel_write_filtered_frequency_V.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_channel_done_filtered_value_V() {
    ap_channel_done_filtered_value_V = (filter_U0_ap_done.read() & (ap_sync_reg_channel_write_filtered_value_V.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_channel_done_left_V() {
    ap_channel_done_left_V = (create_tree_U0_ap_done.read() & (ap_sync_reg_channel_write_left_V.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_channel_done_length_histogram_V() {
    ap_channel_done_length_histogram_V = compute_bit_length_U0_ap_done.read();
}

void huffman_encoding::thread_ap_channel_done_parent_V() {
    ap_channel_done_parent_V = (create_tree_U0_ap_done.read() & (ap_sync_reg_channel_write_parent_V.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_channel_done_right_V() {
    ap_channel_done_right_V = (create_tree_U0_ap_done.read() & (ap_sync_reg_channel_write_right_V.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_channel_done_sorted_0() {
    ap_channel_done_sorted_0 = (sort_U0_ap_done.read() & (ap_sync_reg_channel_write_sorted_0.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_channel_done_sorted_1() {
    ap_channel_done_sorted_1 = (sort_U0_ap_done.read() & (ap_sync_reg_channel_write_sorted_1.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_channel_done_sorted_copy2_value_V() {
    ap_channel_done_sorted_copy2_value_V = Loop_copy_sorted_pro_U0_ap_done.read();
}

void huffman_encoding::thread_ap_channel_done_symbol_bits_V() {
    ap_channel_done_symbol_bits_V = canonize_tree_U0_ap_done.read();
}

void huffman_encoding::thread_ap_channel_done_truncated_length_his() {
    ap_channel_done_truncated_length_his = (truncate_tree_U0_ap_done.read() & (ap_sync_reg_channel_write_truncated_length_his.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_channel_done_truncated_length_his_1() {
    ap_channel_done_truncated_length_his_1 = (truncate_tree_U0_ap_done.read() & (ap_sync_reg_channel_write_truncated_length_his_1.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_done() {
    ap_done = ap_sync_done.read();
}

void huffman_encoding::thread_ap_idle() {
    ap_idle = (filter_U0_ap_idle.read() & Block_codeRepl810_pr_U0_ap_idle.read() & sort_U0_ap_idle.read() & Loop_copy_sorted_pro_U0_ap_idle.read() & create_tree_U0_ap_idle.read() & compute_bit_length_U0_ap_idle.read() & truncate_tree_U0_ap_idle.read() & canonize_tree_U0_ap_idle.read() & create_codeword_U0_ap_idle.read() & Block_proc_U0_ap_idle.read() & (filtered_value_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (filtered_frequency_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (extLd7_loc_channel_empty_n.read() ^ 
  ap_const_logic_1) & (sorted_0_t_empty_n.read() ^ 
  ap_const_logic_1) & (sorted_1_t_empty_n.read() ^ 
  ap_const_logic_1) & (sorted_copy2_value_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (parent_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (left_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (right_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (length_histogram_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (truncated_length_his_t_empty_n.read() ^ 
  ap_const_logic_1) & (truncated_length_his_1_t_empty_n.read() ^ 
  ap_const_logic_1) & (symbol_bits_V_t_empty_n.read() ^ 
  ap_const_logic_1));
}

void huffman_encoding::thread_ap_ready() {
    ap_ready = filter_U0_ap_ready.read();
}

void huffman_encoding::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void huffman_encoding::thread_ap_sync_channel_write_filtered_frequency_V() {
    ap_sync_channel_write_filtered_frequency_V = ((ap_channel_done_filtered_frequency_V.read() & 
  filter_U0_out_frequency_V_full_n.read()) | ap_sync_reg_channel_write_filtered_frequency_V.read());
}

void huffman_encoding::thread_ap_sync_channel_write_filtered_value_V() {
    ap_sync_channel_write_filtered_value_V = ((ap_channel_done_filtered_value_V.read() & 
  filter_U0_out_value_V_full_n.read()) | ap_sync_reg_channel_write_filtered_value_V.read());
}

void huffman_encoding::thread_ap_sync_channel_write_left_V() {
    ap_sync_channel_write_left_V = ((ap_channel_done_left_V.read() & 
  create_tree_U0_left_V_full_n.read()) | ap_sync_reg_channel_write_left_V.read());
}

void huffman_encoding::thread_ap_sync_channel_write_parent_V() {
    ap_sync_channel_write_parent_V = ((ap_channel_done_parent_V.read() & 
  create_tree_U0_parent_V_full_n.read()) | ap_sync_reg_channel_write_parent_V.read());
}

void huffman_encoding::thread_ap_sync_channel_write_right_V() {
    ap_sync_channel_write_right_V = ((ap_channel_done_right_V.read() & 
  create_tree_U0_right_V_full_n.read()) | ap_sync_reg_channel_write_right_V.read());
}

void huffman_encoding::thread_ap_sync_channel_write_sorted_0() {
    ap_sync_channel_write_sorted_0 = ((ap_channel_done_sorted_0.read() & 
  sort_U0_out_value_V_full_n.read()) | ap_sync_reg_channel_write_sorted_0.read());
}

void huffman_encoding::thread_ap_sync_channel_write_sorted_1() {
    ap_sync_channel_write_sorted_1 = ((ap_channel_done_sorted_1.read() & 
  sort_U0_out_frequency_V_full_n.read()) | ap_sync_reg_channel_write_sorted_1.read());
}

void huffman_encoding::thread_ap_sync_channel_write_truncated_length_his() {
    ap_sync_channel_write_truncated_length_his = ((ap_channel_done_truncated_length_his.read() & 
  truncate_tree_U0_output_length_histogram1_V_full_n.read()) | ap_sync_reg_channel_write_truncated_length_his.read());
}

void huffman_encoding::thread_ap_sync_channel_write_truncated_length_his_1() {
    ap_sync_channel_write_truncated_length_his_1 = ((ap_channel_done_truncated_length_his_1.read() & 
  truncate_tree_U0_output_length_histogram2_V_full_n.read()) | ap_sync_reg_channel_write_truncated_length_his_1.read());
}

void huffman_encoding::thread_ap_sync_continue() {
    ap_sync_continue = ap_sync_done.read();
}

void huffman_encoding::thread_ap_sync_done() {
    ap_sync_done = (create_codeword_U0_ap_done.read() & Block_proc_U0_ap_done.read());
}

void huffman_encoding::thread_ap_sync_ready() {
    ap_sync_ready = filter_U0_ap_ready.read();
}

void huffman_encoding::thread_canonize_tree_U0_ap_continue() {
    canonize_tree_U0_ap_continue = symbol_bits_V_i_full_n.read();
}

void huffman_encoding::thread_canonize_tree_U0_ap_start() {
    canonize_tree_U0_ap_start = (sorted_copy2_value_V_t_empty_n.read() & truncated_length_his_t_empty_n.read());
}

void huffman_encoding::thread_canonize_tree_U0_start_full_n() {
    canonize_tree_U0_start_full_n = ap_const_logic_1;
}

void huffman_encoding::thread_canonize_tree_U0_start_write() {
    canonize_tree_U0_start_write = ap_const_logic_0;
}

void huffman_encoding::thread_canonize_tree_U0_symbol_bits_V_full_n() {
    canonize_tree_U0_symbol_bits_V_full_n = symbol_bits_V_i_full_n.read();
}

void huffman_encoding::thread_compute_bit_length_U0_ap_continue() {
    compute_bit_length_U0_ap_continue = length_histogram_V_i_full_n.read();
}

void huffman_encoding::thread_compute_bit_length_U0_ap_start() {
    compute_bit_length_U0_ap_start = (parent_V_t_empty_n.read() & left_V_t_empty_n.read() & right_V_t_empty_n.read());
}

void huffman_encoding::thread_compute_bit_length_U0_length_histogram_V_full_n() {
    compute_bit_length_U0_length_histogram_V_full_n = length_histogram_V_i_full_n.read();
}

void huffman_encoding::thread_compute_bit_length_U0_start_full_n() {
    compute_bit_length_U0_start_full_n = ap_const_logic_1;
}

void huffman_encoding::thread_compute_bit_length_U0_start_write() {
    compute_bit_length_U0_start_write = ap_const_logic_0;
}

void huffman_encoding::thread_create_codeword_U0_ap_continue() {
    create_codeword_U0_ap_continue = ap_sync_done.read();
}

void huffman_encoding::thread_create_codeword_U0_ap_start() {
    create_codeword_U0_ap_start = (truncated_length_his_1_t_empty_n.read() & symbol_bits_V_t_empty_n.read());
}

void huffman_encoding::thread_create_codeword_U0_start_full_n() {
    create_codeword_U0_start_full_n = ap_const_logic_1;
}

void huffman_encoding::thread_create_codeword_U0_start_write() {
    create_codeword_U0_start_write = ap_const_logic_0;
}

void huffman_encoding::thread_create_tree_U0_ap_continue() {
    create_tree_U0_ap_continue = (ap_sync_channel_write_right_V.read() & ap_sync_channel_write_left_V.read() & ap_sync_channel_write_parent_V.read());
}

void huffman_encoding::thread_create_tree_U0_ap_start() {
    create_tree_U0_ap_start = start_for_create_tree_U0_empty_n.read();
}

void huffman_encoding::thread_create_tree_U0_left_V_full_n() {
    create_tree_U0_left_V_full_n = left_V_i_full_n.read();
}

void huffman_encoding::thread_create_tree_U0_parent_V_full_n() {
    create_tree_U0_parent_V_full_n = parent_V_i_full_n.read();
}

void huffman_encoding::thread_create_tree_U0_right_V_full_n() {
    create_tree_U0_right_V_full_n = right_V_i_full_n.read();
}

void huffman_encoding::thread_create_tree_U0_start_full_n() {
    create_tree_U0_start_full_n = ap_const_logic_1;
}

void huffman_encoding::thread_create_tree_U0_start_write() {
    create_tree_U0_start_write = ap_const_logic_0;
}

void huffman_encoding::thread_encoding_TDATA() {
    encoding_TDATA = create_codeword_U0_encoding_TDATA.read();
}

void huffman_encoding::thread_encoding_TDEST() {
    encoding_TDEST = create_codeword_U0_encoding_TDEST.read();
}

void huffman_encoding::thread_encoding_TID() {
    encoding_TID = create_codeword_U0_encoding_TID.read();
}

void huffman_encoding::thread_encoding_TKEEP() {
    encoding_TKEEP = create_codeword_U0_encoding_TKEEP.read();
}

void huffman_encoding::thread_encoding_TLAST() {
    encoding_TLAST = create_codeword_U0_encoding_TLAST.read();
}

void huffman_encoding::thread_encoding_TSTRB() {
    encoding_TSTRB = create_codeword_U0_encoding_TSTRB.read();
}

void huffman_encoding::thread_encoding_TUSER() {
    encoding_TUSER = create_codeword_U0_encoding_TUSER.read();
}

void huffman_encoding::thread_encoding_TVALID() {
    encoding_TVALID = create_codeword_U0_encoding_TVALID.read();
}

void huffman_encoding::thread_filter_U0_ap_continue() {
    filter_U0_ap_continue = (ap_sync_channel_write_filtered_frequency_V.read() & ap_sync_channel_write_filtered_value_V.read());
}

void huffman_encoding::thread_filter_U0_ap_start() {
    filter_U0_ap_start = ap_start.read();
}

void huffman_encoding::thread_filter_U0_out_frequency_V_full_n() {
    filter_U0_out_frequency_V_full_n = filtered_frequency_V_i_full_n.read();
}

void huffman_encoding::thread_filter_U0_out_value_V_full_n() {
    filter_U0_out_value_V_full_n = filtered_value_V_i_full_n.read();
}

void huffman_encoding::thread_left_V_t_d1() {
    left_V_t_d1 = ap_const_lv9_0;
}

void huffman_encoding::thread_left_V_t_we1() {
    left_V_t_we1 = ap_const_logic_0;
}

void huffman_encoding::thread_parent_V_t_d1() {
    parent_V_t_d1 = ap_const_lv9_0;
}

void huffman_encoding::thread_parent_V_t_we1() {
    parent_V_t_we1 = ap_const_logic_0;
}

void huffman_encoding::thread_right_V_t_d1() {
    right_V_t_d1 = ap_const_lv9_0;
}

void huffman_encoding::thread_right_V_t_we1() {
    right_V_t_we1 = ap_const_logic_0;
}

void huffman_encoding::thread_sort_U0_ap_continue() {
    sort_U0_ap_continue = (ap_sync_channel_write_sorted_1.read() & ap_sync_channel_write_sorted_0.read());
}

void huffman_encoding::thread_sort_U0_ap_start() {
    sort_U0_ap_start = (filtered_value_V_t_empty_n.read() & filtered_frequency_V_t_empty_n.read() & extLd7_loc_channel_empty_n.read());
}

void huffman_encoding::thread_sort_U0_out_frequency_V_full_n() {
    sort_U0_out_frequency_V_full_n = sorted_1_i_full_n.read();
}

void huffman_encoding::thread_sort_U0_out_value_V_full_n() {
    sort_U0_out_value_V_full_n = sorted_0_i_full_n.read();
}

void huffman_encoding::thread_sort_U0_start_full_n() {
    sort_U0_start_full_n = ap_const_logic_1;
}

void huffman_encoding::thread_sort_U0_start_write() {
    sort_U0_start_write = ap_const_logic_0;
}

void huffman_encoding::thread_start_for_Block_codeRepl810_pr_U0_din() {
    start_for_Block_codeRepl810_pr_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void huffman_encoding::thread_start_for_Block_proc_U0_din() {
    start_for_Block_proc_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void huffman_encoding::thread_start_for_create_tree_U0_din() {
    start_for_create_tree_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void huffman_encoding::thread_symbol_histogram_TREADY() {
    symbol_histogram_TREADY = filter_U0_symbol_histogram_TREADY.read();
}

void huffman_encoding::thread_truncate_tree_U0_ap_continue() {
    truncate_tree_U0_ap_continue = (ap_sync_channel_write_truncated_length_his_1.read() & ap_sync_channel_write_truncated_length_his.read());
}

void huffman_encoding::thread_truncate_tree_U0_ap_start() {
    truncate_tree_U0_ap_start = length_histogram_V_t_empty_n.read();
}

void huffman_encoding::thread_truncate_tree_U0_output_length_histogram1_V_full_n() {
    truncate_tree_U0_output_length_histogram1_V_full_n = truncated_length_his_i_full_n.read();
}

void huffman_encoding::thread_truncate_tree_U0_output_length_histogram2_V_full_n() {
    truncate_tree_U0_output_length_histogram2_V_full_n = truncated_length_his_1_i_full_n.read();
}

void huffman_encoding::thread_truncate_tree_U0_start_full_n() {
    truncate_tree_U0_start_full_n = ap_const_logic_1;
}

void huffman_encoding::thread_truncate_tree_U0_start_write() {
    truncate_tree_U0_start_write = ap_const_logic_0;
}

void huffman_encoding::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"symbol_histogram_TDATA\" :  \"" << symbol_histogram_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"symbol_histogram_TKEEP\" :  \"" << symbol_histogram_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"symbol_histogram_TSTRB\" :  \"" << symbol_histogram_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"symbol_histogram_TUSER\" :  \"" << symbol_histogram_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"symbol_histogram_TLAST\" :  \"" << symbol_histogram_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"symbol_histogram_TID\" :  \"" << symbol_histogram_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"symbol_histogram_TDEST\" :  \"" << symbol_histogram_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encoding_TDATA\" :  \"" << encoding_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encoding_TKEEP\" :  \"" << encoding_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encoding_TSTRB\" :  \"" << encoding_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encoding_TUSER\" :  \"" << encoding_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encoding_TLAST\" :  \"" << encoding_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encoding_TID\" :  \"" << encoding_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encoding_TDEST\" :  \"" << encoding_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"symbol_histogram_TVALID\" :  \"" << symbol_histogram_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"symbol_histogram_TREADY\" :  \"" << symbol_histogram_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encoding_TVALID\" :  \"" << encoding_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"encoding_TREADY\" :  \"" << encoding_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

