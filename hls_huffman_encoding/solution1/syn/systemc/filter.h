// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _filter_HH_
#define _filter_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct filter : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<16> > in_value_V_TDATA;
    sc_in< sc_logic > in_value_V_TVALID;
    sc_out< sc_logic > in_value_V_TREADY;
    sc_in< sc_lv<32> > in_frequency_V_TDATA;
    sc_in< sc_logic > in_frequency_V_TVALID;
    sc_out< sc_logic > in_frequency_V_TREADY;
    sc_out< sc_lv<8> > out_value_V_address0;
    sc_out< sc_logic > out_value_V_ce0;
    sc_out< sc_logic > out_value_V_we0;
    sc_out< sc_lv<9> > out_value_V_d0;
    sc_out< sc_lv<8> > out_frequency_V_address0;
    sc_out< sc_logic > out_frequency_V_ce0;
    sc_out< sc_logic > out_frequency_V_we0;
    sc_out< sc_lv<32> > out_frequency_V_d0;
    sc_out< sc_lv<9> > n_out_din;
    sc_in< sc_logic > n_out_full_n;
    sc_out< sc_logic > n_out_write;


    // Module declarations
    filter(sc_module_name name);
    SC_HAS_PROCESS(filter);

    ~filter();

    sc_trace_file* mVcdFile;

    regslice_both<16>* regslice_both_in_value_V_U;
    regslice_both<32>* regslice_both_in_frequency_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > in_value_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln11_fu_138_p2;
    sc_signal< sc_lv<1> > icmp_ln883_fu_150_p2;
    sc_signal< sc_logic > in_frequency_V_TDATA_blk_n;
    sc_signal< sc_logic > n_out_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<9> > i_fu_144_p2;
    sc_signal< bool > ap_predicate_op24_read_state2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<9> > i_0_i_reg_118;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > zext_ln544_fu_156_p1;
    sc_signal< sc_lv<9> > t_V_fu_68;
    sc_signal< sc_lv<9> > j_V_fu_167_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > regslice_both_in_value_V_U_apdone_blk;
    sc_signal< sc_lv<16> > in_value_V_TDATA_int;
    sc_signal< sc_logic > in_value_V_TVALID_int;
    sc_signal< sc_logic > in_value_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_in_value_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_in_frequency_V_U_apdone_blk;
    sc_signal< sc_lv<32> > in_frequency_V_TDATA_int;
    sc_signal< sc_logic > in_frequency_V_TVALID_int;
    sc_signal< sc_logic > in_frequency_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_in_frequency_V_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<1> ap_const_lv1_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op24_read_state2();
    void thread_ap_ready();
    void thread_i_fu_144_p2();
    void thread_icmp_ln11_fu_138_p2();
    void thread_icmp_ln883_fu_150_p2();
    void thread_in_frequency_V_TDATA_blk_n();
    void thread_in_frequency_V_TREADY();
    void thread_in_frequency_V_TREADY_int();
    void thread_in_value_V_TDATA_blk_n();
    void thread_in_value_V_TREADY();
    void thread_in_value_V_TREADY_int();
    void thread_internal_ap_ready();
    void thread_j_V_fu_167_p2();
    void thread_n_out_blk_n();
    void thread_n_out_din();
    void thread_n_out_write();
    void thread_out_frequency_V_address0();
    void thread_out_frequency_V_ce0();
    void thread_out_frequency_V_d0();
    void thread_out_frequency_V_we0();
    void thread_out_value_V_address0();
    void thread_out_value_V_ce0();
    void thread_out_value_V_d0();
    void thread_out_value_V_we0();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_zext_ln544_fu_156_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
