// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _create_codeword_HH_
#define _create_codeword_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "create_codeword_fmb6.h"

namespace ap_rtl {

struct create_codeword : public sc_module {
    // Port declarations 40
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > symbol_bits_V_address0;
    sc_out< sc_logic > symbol_bits_V_ce0;
    sc_in< sc_lv<5> > symbol_bits_V_q0;
    sc_out< sc_lv<6> > codeword_length_histogram_V_address0;
    sc_out< sc_logic > codeword_length_histogram_V_ce0;
    sc_in< sc_lv<9> > codeword_length_histogram_V_q0;
    sc_out< sc_lv<8> > stream_buffer_keep_V_address0;
    sc_out< sc_logic > stream_buffer_keep_V_ce0;
    sc_in< sc_lv<6> > stream_buffer_keep_V_q0;
    sc_out< sc_lv<8> > stream_buffer_strb_V_address0;
    sc_out< sc_logic > stream_buffer_strb_V_ce0;
    sc_in< sc_lv<6> > stream_buffer_strb_V_q0;
    sc_out< sc_lv<8> > stream_buffer_user_V_address0;
    sc_out< sc_logic > stream_buffer_user_V_ce0;
    sc_in< sc_lv<1> > stream_buffer_user_V_q0;
    sc_out< sc_lv<8> > stream_buffer_last_V_address0;
    sc_out< sc_logic > stream_buffer_last_V_ce0;
    sc_in< sc_lv<1> > stream_buffer_last_V_q0;
    sc_out< sc_lv<8> > stream_buffer_id_V_address0;
    sc_out< sc_logic > stream_buffer_id_V_ce0;
    sc_in< sc_lv<1> > stream_buffer_id_V_q0;
    sc_out< sc_lv<8> > stream_buffer_dest_V_address0;
    sc_out< sc_logic > stream_buffer_dest_V_ce0;
    sc_in< sc_lv<1> > stream_buffer_dest_V_q0;
    sc_out< sc_lv<32> > encoding_TDATA;
    sc_out< sc_logic > encoding_TVALID;
    sc_in< sc_logic > encoding_TREADY;
    sc_out< sc_lv<4> > encoding_TKEEP;
    sc_out< sc_lv<4> > encoding_TSTRB;
    sc_out< sc_lv<1> > encoding_TUSER;
    sc_out< sc_lv<1> > encoding_TLAST;
    sc_out< sc_lv<1> > encoding_TID;
    sc_out< sc_lv<1> > encoding_TDEST;


    // Module declarations
    create_codeword(sc_module_name name);
    SC_HAS_PROCESS(create_codeword);

    ~create_codeword();

    sc_trace_file* mVcdFile;

    create_codeword_fmb6* first_codeword_V_U;
    regslice_both<32>* regslice_both_encoding_V_data_V_U;
    regslice_both<4>* regslice_both_encoding_V_keep_V_U;
    regslice_both<4>* regslice_both_encoding_V_strb_V_U;
    regslice_both<1>* regslice_both_encoding_V_user_V_U;
    regslice_both<1>* regslice_both_encoding_V_last_V_U;
    regslice_both<1>* regslice_both_encoding_V_id_V_U;
    regslice_both<1>* regslice_both_encoding_V_dest_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > encoding_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln26_reg_497;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage1;
    sc_signal< bool > ap_block_pp1_stage1;
    sc_signal< sc_lv<1> > icmp_ln26_reg_497_pp1_iter1_reg;
    sc_signal< sc_lv<27> > p_0199_0_reg_256;
    sc_signal< sc_lv<5> > i_0_reg_269;
    sc_signal< sc_lv<9> > i1_0_reg_280;
    sc_signal< sc_lv<1> > icmp_ln18_fu_291_p2;
    sc_signal< sc_lv<1> > icmp_ln18_reg_462;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln18_reg_462_pp0_iter1_reg;
    sc_signal< sc_lv<5> > i_fu_297_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln21_fu_303_p1;
    sc_signal< sc_lv<64> > zext_ln21_reg_471;
    sc_signal< sc_lv<64> > zext_ln21_reg_471_pp0_iter1_reg;
    sc_signal< sc_lv<9> > codeword_length_hist_1_reg_481;
    sc_signal< sc_lv<27> > temp_V_fu_321_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln26_fu_329_p2;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state11_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state11_io;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<9> > i_4_fu_335_p2;
    sc_signal< sc_lv<9> > i_4_reg_501;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<5> > length_V_reg_541;
    sc_signal< bool > ap_block_state7_pp1_stage1_iter0;
    sc_signal< bool > ap_block_state12_pp1_stage1_iter1;
    sc_signal< bool > ap_block_state12_io;
    sc_signal< bool > ap_block_pp1_stage1_11001;
    sc_signal< sc_lv<4> > result_keep_V_fu_352_p1;
    sc_signal< sc_lv<4> > result_keep_V_reg_549;
    sc_signal< sc_lv<4> > result_strb_V_fu_356_p1;
    sc_signal< sc_lv<4> > result_strb_V_reg_554;
    sc_signal< sc_lv<1> > result_user_V_reg_559;
    sc_signal< sc_lv<1> > result_last_V_reg_564;
    sc_signal< sc_lv<1> > result_id_V_reg_569;
    sc_signal< sc_lv<1> > result_dest_V_reg_574;
    sc_signal< sc_lv<1> > icmp_ln883_fu_360_p2;
    sc_signal< sc_lv<1> > icmp_ln883_reg_579;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage2;
    sc_signal< bool > ap_block_state8_pp1_stage2_iter0;
    sc_signal< bool > ap_block_pp1_stage2_11001;
    sc_signal< sc_lv<5> > first_codeword_V_add_1_reg_583;
    sc_signal< sc_lv<27> > first_codeword_V_q0;
    sc_signal< sc_lv<27> > out_reversed_V_1_reg_588;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage3;
    sc_signal< bool > ap_block_state9_pp1_stage3_iter0;
    sc_signal< bool > ap_block_pp1_stage3_11001;
    sc_signal< sc_lv<27> > p_Result_s_fu_369_p4;
    sc_signal< sc_lv<27> > p_Result_s_reg_593;
    sc_signal< sc_lv<6> > ret_V_fu_382_p2;
    sc_signal< sc_lv<6> > ret_V_reg_599;
    sc_signal< sc_lv<3> > sub_ln556_fu_392_p2;
    sc_signal< sc_lv<3> > sub_ln556_reg_605;
    sc_signal< sc_lv<27> > add_ln700_fu_448_p2;
    sc_signal< sc_lv<27> > add_ln700_reg_610;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage4;
    sc_signal< bool > ap_block_state10_pp1_stage4_iter0;
    sc_signal< bool > ap_block_pp1_stage4_11001;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state6;
    sc_signal< bool > ap_block_pp1_stage4_subdone;
    sc_signal< bool > ap_block_pp1_stage1_subdone;
    sc_signal< sc_lv<5> > first_codeword_V_address0;
    sc_signal< sc_logic > first_codeword_V_ce0;
    sc_signal< sc_logic > first_codeword_V_we0;
    sc_signal< sc_lv<27> > first_codeword_V_d0;
    sc_signal< sc_lv<9> > ap_phi_mux_i1_0_phi_fu_284_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln28_fu_341_p1;
    sc_signal< sc_lv<64> > zext_ln544_fu_365_p1;
    sc_signal< bool > ap_block_pp1_stage2;
    sc_signal< sc_lv<32> > tmp_data_V_fu_104;
    sc_signal< sc_lv<32> > result_data_V_fu_444_p1;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<26> > trunc_ln1503_fu_311_p1;
    sc_signal< sc_lv<26> > zext_ln1503_fu_308_p1;
    sc_signal< sc_lv<26> > add_ln1503_fu_315_p2;
    sc_signal< bool > ap_block_pp1_stage3;
    sc_signal< sc_lv<6> > zext_ln215_fu_379_p1;
    sc_signal< sc_lv<3> > trunc_ln790_fu_388_p1;
    sc_signal< bool > ap_block_pp1_stage4;
    sc_signal< sc_lv<27> > zext_ln556_fu_405_p1;
    sc_signal< sc_lv<27> > zext_ln808_fu_413_p1;
    sc_signal< sc_lv<27> > r_V_fu_408_p2;
    sc_signal< sc_lv<27> > lshr_ln808_fu_416_p2;
    sc_signal< sc_lv<1> > p_Result_1_fu_398_p3;
    sc_signal< sc_lv<22> > trunc_ln796_fu_421_p1;
    sc_signal< sc_lv<22> > trunc_ln796_1_fu_425_p1;
    sc_signal< sc_lv<22> > select_ln796_fu_429_p3;
    sc_signal< sc_lv<27> > tmp_2_fu_437_p3;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > regslice_both_encoding_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp1_stage2_subdone;
    sc_signal< bool > ap_block_pp1_stage3_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > encoding_TVALID_int;
    sc_signal< sc_logic > encoding_TREADY_int;
    sc_signal< sc_logic > regslice_both_encoding_V_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_encoding_V_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_encoding_V_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_encoding_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_encoding_V_strb_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_encoding_V_strb_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_encoding_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_encoding_V_user_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_encoding_V_user_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_encoding_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_encoding_V_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_encoding_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_encoding_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_encoding_V_id_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_encoding_V_id_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_encoding_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_encoding_V_dest_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_encoding_V_dest_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_encoding_V_dest_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_pp0_stage0;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_pp1_stage0;
    static const sc_lv<9> ap_ST_fsm_pp1_stage1;
    static const sc_lv<9> ap_ST_fsm_pp1_stage2;
    static const sc_lv<9> ap_ST_fsm_pp1_stage3;
    static const sc_lv<9> ap_ST_fsm_pp1_stage4;
    static const sc_lv<9> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<27> ap_const_lv27_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<5> ap_const_lv5_1B;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<6> ap_const_lv6_1B;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<27> ap_const_lv27_1;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1503_fu_315_p2();
    void thread_add_ln700_fu_448_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp1_stage1();
    void thread_ap_CS_fsm_pp1_stage2();
    void thread_ap_CS_fsm_pp1_stage3();
    void thread_ap_CS_fsm_pp1_stage4();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp1_stage1();
    void thread_ap_block_pp1_stage1_11001();
    void thread_ap_block_pp1_stage1_subdone();
    void thread_ap_block_pp1_stage2();
    void thread_ap_block_pp1_stage2_11001();
    void thread_ap_block_pp1_stage2_subdone();
    void thread_ap_block_pp1_stage3();
    void thread_ap_block_pp1_stage3_11001();
    void thread_ap_block_pp1_stage3_subdone();
    void thread_ap_block_pp1_stage4();
    void thread_ap_block_pp1_stage4_11001();
    void thread_ap_block_pp1_stage4_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp1_stage4_iter0();
    void thread_ap_block_state11_io();
    void thread_ap_block_state11_pp1_stage0_iter1();
    void thread_ap_block_state12_io();
    void thread_ap_block_state12_pp1_stage1_iter1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state6_pp1_stage0_iter0();
    void thread_ap_block_state7_pp1_stage1_iter0();
    void thread_ap_block_state8_pp1_stage2_iter0();
    void thread_ap_block_state9_pp1_stage3_iter0();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state6();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_i1_0_phi_fu_284_p4();
    void thread_ap_ready();
    void thread_codeword_length_histogram_V_address0();
    void thread_codeword_length_histogram_V_ce0();
    void thread_encoding_TDATA_blk_n();
    void thread_encoding_TVALID();
    void thread_encoding_TVALID_int();
    void thread_first_codeword_V_address0();
    void thread_first_codeword_V_ce0();
    void thread_first_codeword_V_d0();
    void thread_first_codeword_V_we0();
    void thread_i_4_fu_335_p2();
    void thread_i_fu_297_p2();
    void thread_icmp_ln18_fu_291_p2();
    void thread_icmp_ln26_fu_329_p2();
    void thread_icmp_ln883_fu_360_p2();
    void thread_lshr_ln808_fu_416_p2();
    void thread_p_Result_1_fu_398_p3();
    void thread_p_Result_s_fu_369_p4();
    void thread_r_V_fu_408_p2();
    void thread_result_data_V_fu_444_p1();
    void thread_result_keep_V_fu_352_p1();
    void thread_result_strb_V_fu_356_p1();
    void thread_ret_V_fu_382_p2();
    void thread_select_ln796_fu_429_p3();
    void thread_stream_buffer_dest_V_address0();
    void thread_stream_buffer_dest_V_ce0();
    void thread_stream_buffer_id_V_address0();
    void thread_stream_buffer_id_V_ce0();
    void thread_stream_buffer_keep_V_address0();
    void thread_stream_buffer_keep_V_ce0();
    void thread_stream_buffer_last_V_address0();
    void thread_stream_buffer_last_V_ce0();
    void thread_stream_buffer_strb_V_address0();
    void thread_stream_buffer_strb_V_ce0();
    void thread_stream_buffer_user_V_address0();
    void thread_stream_buffer_user_V_ce0();
    void thread_sub_ln556_fu_392_p2();
    void thread_symbol_bits_V_address0();
    void thread_symbol_bits_V_ce0();
    void thread_temp_V_fu_321_p3();
    void thread_tmp_2_fu_437_p3();
    void thread_trunc_ln1503_fu_311_p1();
    void thread_trunc_ln790_fu_388_p1();
    void thread_trunc_ln796_1_fu_425_p1();
    void thread_trunc_ln796_fu_421_p1();
    void thread_zext_ln1503_fu_308_p1();
    void thread_zext_ln215_fu_379_p1();
    void thread_zext_ln21_fu_303_p1();
    void thread_zext_ln28_fu_341_p1();
    void thread_zext_ln544_fu_365_p1();
    void thread_zext_ln556_fu_405_p1();
    void thread_zext_ln808_fu_413_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
