// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module create_codeword (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        symbol_bits_V_address0,
        symbol_bits_V_ce0,
        symbol_bits_V_q0,
        codeword_length_histogram_V_address0,
        codeword_length_histogram_V_ce0,
        codeword_length_histogram_V_q0,
        encoding_V_address0,
        encoding_V_ce0,
        encoding_V_we0,
        encoding_V_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_pp1_stage1 = 10'd32;
parameter    ap_ST_fsm_pp1_stage2 = 10'd64;
parameter    ap_ST_fsm_pp1_stage3 = 10'd128;
parameter    ap_ST_fsm_pp1_stage4 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] symbol_bits_V_address0;
output   symbol_bits_V_ce0;
input  [4:0] symbol_bits_V_q0;
output  [5:0] codeword_length_histogram_V_address0;
output   codeword_length_histogram_V_ce0;
input  [9:0] codeword_length_histogram_V_q0;
output  [7:0] encoding_V_address0;
output   encoding_V_ce0;
output   encoding_V_we0;
output  [31:0] encoding_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg symbol_bits_V_ce0;
reg codeword_length_histogram_V_ce0;
reg[7:0] encoding_V_address0;
reg encoding_V_ce0;
reg encoding_V_we0;
reg[31:0] encoding_V_d0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] i1_0_reg_170;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln14_fu_181_p2;
wire   [4:0] i_fu_227_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln22_fu_233_p2;
reg   [0:0] icmp_ln22_reg_361;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [8:0] i_4_fu_239_p2;
reg   [8:0] i_4_reg_365;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln24_fu_245_p1;
reg   [63:0] zext_ln24_reg_370;
reg   [4:0] length_V_reg_381;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state6_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
wire   [0:0] icmp_ln883_fu_250_p2;
reg   [0:0] icmp_ln883_reg_389;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state7_pp1_stage2_iter0;
wire    ap_block_pp1_stage2_11001;
reg   [4:0] first_codeword_V_add_3_reg_393;
wire   [26:0] first_codeword_V_q0;
reg   [26:0] out_reversed_V_1_reg_398;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state8_pp1_stage3_iter0;
wire    ap_block_pp1_stage3_11001;
reg   [26:0] p_Result_s_fu_259_p4;
reg   [26:0] p_Result_s_reg_403;
wire   [5:0] ret_V_fu_272_p2;
reg   [5:0] ret_V_reg_409;
wire   [2:0] sub_ln556_fu_282_p2;
reg   [2:0] sub_ln556_reg_415;
wire   [21:0] select_ln796_fu_319_p3;
reg   [21:0] select_ln796_reg_420;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_state9_pp1_stage4_iter0;
wire    ap_block_pp1_stage4_11001;
wire   [26:0] add_ln700_fu_327_p2;
reg   [26:0] add_ln700_reg_425;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage4_subdone;
reg   [4:0] first_codeword_V_address0;
reg    first_codeword_V_ce0;
reg    first_codeword_V_we0;
reg   [26:0] first_codeword_V_d0;
reg   [4:0] i_0_reg_158;
reg    ap_block_state1;
reg   [8:0] ap_phi_mux_i1_0_phi_fu_174_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln16_1_fu_193_p1;
wire   [63:0] zext_ln16_fu_199_p1;
wire   [63:0] zext_ln544_fu_255_p1;
wire    ap_block_pp1_stage2;
wire   [7:0] encoding_V_addr_1_gep_fu_150_p3;
wire   [26:0] shl_ln_fu_218_p3;
wire   [31:0] zext_ln209_fu_338_p1;
wire   [4:0] add_ln16_fu_187_p2;
wire   [25:0] trunc_ln1503_fu_208_p1;
wire   [25:0] zext_ln1503_fu_204_p1;
wire   [25:0] add_ln1503_fu_212_p2;
wire    ap_block_pp1_stage3;
wire   [5:0] zext_ln215_fu_269_p1;
wire   [2:0] trunc_ln790_fu_278_p1;
wire    ap_block_pp1_stage4;
wire   [26:0] zext_ln556_fu_295_p1;
wire   [26:0] zext_ln808_fu_303_p1;
wire   [26:0] r_V_fu_298_p2;
wire   [26:0] lshr_ln808_fu_306_p2;
wire   [0:0] p_Result_1_fu_288_p3;
wire   [21:0] trunc_ln796_fu_311_p1;
wire   [21:0] trunc_ln796_1_fu_315_p1;
wire   [26:0] tmp_2_fu_332_p3;
wire    ap_CS_fsm_state11;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage3_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

create_codeword_flbW #(
    .DataWidth( 27 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
first_codeword_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(first_codeword_V_address0),
    .ce0(first_codeword_V_ce0),
    .we0(first_codeword_V_we0),
    .d0(first_codeword_V_d0),
    .q0(first_codeword_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_subdone)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_170 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln22_reg_361 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        i1_0_reg_170 <= i_4_reg_365;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_158 <= i_fu_227_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_158 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_361 == 1'd0) & (icmp_ln883_reg_389 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001))) begin
        add_ln700_reg_425 <= add_ln700_fu_327_p2;
        select_ln796_reg_420 <= select_ln796_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_361 == 1'd0) & (icmp_ln883_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001))) begin
        first_codeword_V_add_3_reg_393 <= zext_ln544_fu_255_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_4_reg_365 <= i_4_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln22_reg_361 <= icmp_ln22_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_361 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001))) begin
        icmp_ln883_reg_389 <= icmp_ln883_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_361 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        length_V_reg_381 <= symbol_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_361 == 1'd0) & (icmp_ln883_reg_389 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001))) begin
        out_reversed_V_1_reg_398 <= first_codeword_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_361 == 1'd0) & (icmp_ln883_reg_389 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001))) begin
        p_Result_s_reg_403 <= p_Result_s_fu_259_p4;
        ret_V_reg_409 <= ret_V_fu_272_p2;
        sub_ln556_reg_415 <= sub_ln556_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln22_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        zext_ln24_reg_370[8 : 0] <= zext_ln24_fu_245_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln22_fu_233_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_361 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i1_0_phi_fu_174_p4 = i_4_reg_365;
    end else begin
        ap_phi_mux_i1_0_phi_fu_174_p4 = i1_0_reg_170;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        codeword_length_histogram_V_ce0 = 1'b1;
    end else begin
        codeword_length_histogram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        encoding_V_address0 = encoding_V_addr_1_gep_fu_150_p3;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        encoding_V_address0 = zext_ln24_reg_370;
    end else begin
        encoding_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        encoding_V_ce0 = 1'b1;
    end else begin
        encoding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        encoding_V_d0 = zext_ln209_fu_338_p1;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        encoding_V_d0 = 32'd0;
    end else begin
        encoding_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln22_reg_361 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (icmp_ln883_fu_250_p2 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln883_reg_389 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        encoding_V_we0 = 1'b1;
    end else begin
        encoding_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        first_codeword_V_address0 = first_codeword_V_add_3_reg_393;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        first_codeword_V_address0 = zext_ln544_fu_255_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        first_codeword_V_address0 = zext_ln16_fu_199_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        first_codeword_V_address0 = zext_ln16_1_fu_193_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        first_codeword_V_address0 = 64'd0;
    end else begin
        first_codeword_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        first_codeword_V_ce0 = 1'b1;
    end else begin
        first_codeword_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        first_codeword_V_d0 = add_ln700_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        first_codeword_V_d0 = shl_ln_fu_218_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        first_codeword_V_d0 = 27'd0;
    end else begin
        first_codeword_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln883_reg_389 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        first_codeword_V_we0 = 1'b1;
    end else begin
        first_codeword_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        symbol_bits_V_ce0 = 1'b1;
    end else begin
        symbol_bits_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln14_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln22_fu_233_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((icmp_ln22_fu_233_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1503_fu_212_p2 = (trunc_ln1503_fu_208_p1 + zext_ln1503_fu_204_p1);

assign add_ln16_fu_187_p2 = ($signed(5'd31) + $signed(i_0_reg_158));

assign add_ln700_fu_327_p2 = (27'd1 + out_reversed_V_1_reg_398);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign codeword_length_histogram_V_address0 = zext_ln16_1_fu_193_p1;

assign encoding_V_addr_1_gep_fu_150_p3 = zext_ln24_reg_370;

assign i_4_fu_239_p2 = (ap_phi_mux_i1_0_phi_fu_174_p4 + 9'd1);

assign i_fu_227_p2 = (5'd1 + i_0_reg_158);

assign icmp_ln14_fu_181_p2 = ((i_0_reg_158 == 5'd27) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_233_p2 = ((ap_phi_mux_i1_0_phi_fu_174_p4 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_250_p2 = ((length_V_reg_381 == 5'd0) ? 1'b1 : 1'b0);

assign lshr_ln808_fu_306_p2 = p_Result_s_reg_403 >> zext_ln808_fu_303_p1;

assign p_Result_1_fu_288_p3 = ret_V_reg_409[32'd5];

integer ap_tvar_int_0;

always @ (first_codeword_V_q0) begin
    for (ap_tvar_int_0 = 27 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 26 - 0) begin
            p_Result_s_fu_259_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_259_p4[ap_tvar_int_0] = first_codeword_V_q0[26 - ap_tvar_int_0];
        end
    end
end

assign r_V_fu_298_p2 = p_Result_s_reg_403 << zext_ln556_fu_295_p1;

assign ret_V_fu_272_p2 = (6'd27 - zext_ln215_fu_269_p1);

assign select_ln796_fu_319_p3 = ((p_Result_1_fu_288_p3[0:0] === 1'b1) ? trunc_ln796_fu_311_p1 : trunc_ln796_1_fu_315_p1);

assign shl_ln_fu_218_p3 = {{add_ln1503_fu_212_p2}, {1'd0}};

assign sub_ln556_fu_282_p2 = (3'd0 - trunc_ln790_fu_278_p1);

assign symbol_bits_V_address0 = zext_ln24_fu_245_p1;

assign tmp_2_fu_332_p3 = {{select_ln796_reg_420}, {length_V_reg_381}};

assign trunc_ln1503_fu_208_p1 = first_codeword_V_q0[25:0];

assign trunc_ln790_fu_278_p1 = ret_V_fu_272_p2[2:0];

assign trunc_ln796_1_fu_315_p1 = lshr_ln808_fu_306_p2[21:0];

assign trunc_ln796_fu_311_p1 = r_V_fu_298_p2[21:0];

assign zext_ln1503_fu_204_p1 = codeword_length_histogram_V_q0;

assign zext_ln16_1_fu_193_p1 = add_ln16_fu_187_p2;

assign zext_ln16_fu_199_p1 = i_0_reg_158;

assign zext_ln209_fu_338_p1 = tmp_2_fu_332_p3;

assign zext_ln215_fu_269_p1 = length_V_reg_381;

assign zext_ln24_fu_245_p1 = ap_phi_mux_i1_0_phi_fu_174_p4;

assign zext_ln544_fu_255_p1 = length_V_reg_381;

assign zext_ln556_fu_295_p1 = sub_ln556_reg_415;

assign zext_ln808_fu_303_p1 = ret_V_reg_409;

always @ (posedge ap_clk) begin
    zext_ln24_reg_370[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //create_codeword
