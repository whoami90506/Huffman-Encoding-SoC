// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_bit_length (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        parent_V_address0,
        parent_V_ce0,
        parent_V_q0,
        parent_V_address1,
        parent_V_ce1,
        parent_V_q1,
        left_V_address0,
        left_V_ce0,
        left_V_q0,
        left_V_address1,
        left_V_ce1,
        left_V_q1,
        right_V_address0,
        right_V_ce0,
        right_V_q0,
        right_V_address1,
        right_V_ce1,
        right_V_q1,
        extLd_loc_dout,
        extLd_loc_empty_n,
        extLd_loc_read,
        length_histogram_V_address0,
        length_histogram_V_ce0,
        length_histogram_V_we0,
        length_histogram_V_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] parent_V_address0;
output   parent_V_ce0;
input  [8:0] parent_V_q0;
output  [7:0] parent_V_address1;
output   parent_V_ce1;
input  [8:0] parent_V_q1;
output  [7:0] left_V_address0;
output   left_V_ce0;
input  [8:0] left_V_q0;
output  [7:0] left_V_address1;
output   left_V_ce1;
input  [8:0] left_V_q1;
output  [7:0] right_V_address0;
output   right_V_ce0;
input  [8:0] right_V_q0;
output  [7:0] right_V_address1;
output   right_V_ce1;
input  [8:0] right_V_q1;
input  [8:0] extLd_loc_dout;
input   extLd_loc_empty_n;
output   extLd_loc_read;
output  [5:0] length_histogram_V_address0;
output   length_histogram_V_ce0;
output   length_histogram_V_we0;
output  [8:0] length_histogram_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] parent_V_address0;
reg parent_V_ce0;
reg parent_V_ce1;
reg[7:0] left_V_address0;
reg left_V_ce0;
reg left_V_ce1;
reg[7:0] right_V_address0;
reg right_V_ce0;
reg right_V_ce1;
reg extLd_loc_read;
reg[5:0] length_histogram_V_address0;
reg length_histogram_V_ce0;
reg length_histogram_V_we0;
reg[8:0] length_histogram_V_d0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    extLd_loc_blk_n;
wire   [9:0] zext_ln13_fu_383_p1;
reg   [9:0] zext_ln13_reg_543;
reg    ap_block_state1;
wire   [6:0] i_5_fu_393_p2;
wire    ap_CS_fsm_state2;
wire  signed [9:0] i_fu_415_p2;
reg  signed [9:0] i_reg_558;
wire    ap_CS_fsm_state3;
reg   [8:0] parent_next_V_reg_593;
wire    ap_CS_fsm_state4;
reg   [8:0] left_curr_V_reg_598;
reg   [8:0] left_next_V_reg_603;
reg   [8:0] right_curr_V_reg_608;
reg   [8:0] right_next_V_reg_613;
wire  signed [31:0] sext_ln25_1_fu_449_p1;
wire    ap_CS_fsm_state5;
wire   [5:0] child_depth_V_q0;
wire   [5:0] child_depth_V_q1;
wire   [0:0] tmp_fu_452_p3;
reg   [0:0] tmp_reg_643;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln883_fu_472_p2;
reg   [0:0] icmp_ln883_reg_647;
wire   [0:0] icmp_ln883_1_fu_478_p2;
reg   [0:0] icmp_ln883_1_reg_651;
wire   [63:0] zext_ln544_7_fu_484_p1;
reg   [63:0] zext_ln544_7_reg_655;
reg   [5:0] internal_length_hist_2_reg_660;
wire   [5:0] child_depth_curr_V_1_fu_499_p3;
reg   [5:0] child_depth_curr_V_1_reg_665;
reg   [8:0] parent_next_V_1_reg_685;
wire    ap_CS_fsm_state7;
reg   [8:0] left_next_V_1_reg_690;
reg   [8:0] right_next_V_1_reg_695;
wire    ap_CS_fsm_state8;
wire   [31:0] i_6_fu_537_p2;
reg   [7:0] child_depth_V_address0;
reg    child_depth_V_ce0;
reg    child_depth_V_we0;
reg   [7:0] child_depth_V_address1;
reg    child_depth_V_ce1;
reg    child_depth_V_we1;
reg   [5:0] internal_length_hist_address0;
reg    internal_length_hist_ce0;
reg    internal_length_hist_we0;
reg   [8:0] internal_length_hist_d0;
wire   [8:0] internal_length_hist_q0;
reg   [6:0] i_0_i_i_reg_282;
wire   [0:0] icmp_ln17_fu_387_p2;
reg   [5:0] p_097_0_i_i_reg_293;
reg   [8:0] p_0104_0_i_i_reg_302;
reg   [8:0] p_09_0_i_i_reg_311;
reg   [8:0] left_curr_V_1_reg_320;
reg   [8:0] p_07_0_i_i_reg_331;
reg   [8:0] right_curr_V_1_reg_340;
reg   [5:0] p_0106_0_i_i_reg_351;
reg   [31:0] op2_assign_reg_360;
reg   [1:0] phi_ln700_i_i_reg_370;
wire   [63:0] zext_ln19_fu_399_p1;
wire  signed [63:0] sext_ln23_fu_410_p1;
wire  signed [63:0] sext_ln25_fu_420_p1;
wire  signed [63:0] sext_ln26_fu_432_p1;
wire   [63:0] zext_ln544_fu_439_p1;
wire   [63:0] zext_ln544_5_fu_444_p1;
wire   [63:0] zext_ln40_fu_467_p1;
wire  signed [63:0] sext_ln61_fu_513_p1;
wire   [63:0] zext_ln544_8_fu_532_p1;
wire   [8:0] count_V_1_fu_524_p2;
wire   [5:0] length_V_fu_460_p2;
wire   [9:0] add_ln23_fu_405_p2;
wire   [9:0] add_ln26_fu_427_p2;
wire   [31:0] zext_ln879_fu_489_p1;
wire   [0:0] icmp_ln879_fu_493_p2;
wire   [31:0] add_ln61_fu_507_p2;
wire   [8:0] zext_ln544_6_fu_520_p1;
wire    ap_CS_fsm_state9;
reg   [8:0] ap_NS_fsm;
reg    ap_condition_239;
reg    ap_condition_242;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
end

compute_bit_lengtjbC #(
    .DataWidth( 6 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
child_depth_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(child_depth_V_address0),
    .ce0(child_depth_V_ce0),
    .we0(child_depth_V_we0),
    .d0(6'd1),
    .q0(child_depth_V_q0),
    .address1(child_depth_V_address1),
    .ce1(child_depth_V_ce1),
    .we1(child_depth_V_we1),
    .d1(length_V_fu_460_p2),
    .q1(child_depth_V_q1)
);

compute_bit_lengtkbM #(
    .DataWidth( 9 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
internal_length_hist_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(internal_length_hist_address0),
    .ce0(internal_length_hist_ce0),
    .we0(internal_length_hist_we0),
    .d0(internal_length_hist_d0),
    .q0(internal_length_hist_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((extLd_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_282 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln17_fu_387_p2 == 1'd0))) begin
        i_0_i_i_reg_282 <= i_5_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_reg_643 == 1'd0))) begin
        left_curr_V_1_reg_320 <= left_next_V_1_reg_690;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        left_curr_V_1_reg_320 <= left_next_V_reg_603;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_reg_643 == 1'd0))) begin
        op2_assign_reg_360 <= i_6_fu_537_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        op2_assign_reg_360 <= sext_ln25_1_fu_449_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_reg_643 == 1'd0))) begin
        p_0104_0_i_i_reg_302 <= parent_next_V_1_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_0104_0_i_i_reg_302 <= parent_next_V_reg_593;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_reg_643 == 1'd0))) begin
        p_0106_0_i_i_reg_351 <= child_depth_curr_V_1_reg_665;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_0106_0_i_i_reg_351 <= child_depth_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_reg_643 == 1'd0))) begin
        p_07_0_i_i_reg_331 <= right_curr_V_1_reg_340;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_07_0_i_i_reg_331 <= right_curr_V_reg_608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_reg_643 == 1'd0))) begin
        p_097_0_i_i_reg_293 <= child_depth_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_097_0_i_i_reg_293 <= child_depth_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_reg_643 == 1'd0))) begin
        p_09_0_i_i_reg_311 <= left_curr_V_1_reg_320;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_09_0_i_i_reg_311 <= left_curr_V_reg_598;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((1'b1 == ap_condition_242)) begin
            phi_ln700_i_i_reg_370 <= 2'd2;
        end else if ((1'b1 == ap_condition_239)) begin
            phi_ln700_i_i_reg_370 <= 2'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_reg_643 == 1'd0))) begin
        right_curr_V_1_reg_340 <= right_next_V_1_reg_695;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        right_curr_V_1_reg_340 <= right_next_V_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_fu_452_p3 == 1'd0))) begin
        child_depth_curr_V_1_reg_665 <= child_depth_curr_V_1_fu_499_p3;
        icmp_ln883_1_reg_651 <= icmp_ln883_1_fu_478_p2;
        icmp_ln883_reg_647 <= icmp_ln883_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_558 <= i_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln883_fu_472_p2 == 1'd0) & (tmp_fu_452_p3 == 1'd0)) | ((icmp_ln883_1_fu_478_p2 == 1'd0) & (tmp_fu_452_p3 == 1'd0))))) begin
        internal_length_hist_2_reg_660 <= zext_ln544_7_fu_484_p1;
        zext_ln544_7_reg_655[5 : 0] <= zext_ln544_7_fu_484_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_curr_V_reg_598 <= left_V_q0;
        left_next_V_reg_603 <= left_V_q1;
        parent_next_V_reg_593 <= parent_V_q1;
        right_curr_V_reg_608 <= right_V_q0;
        right_next_V_reg_613 <= right_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_reg_643 == 1'd0))) begin
        left_next_V_1_reg_690 <= left_V_q0;
        parent_next_V_1_reg_685 <= parent_V_q0;
        right_next_V_1_reg_695 <= right_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_643 <= op2_assign_reg_360[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((~((extLd_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln13_reg_543[8 : 0] <= zext_ln13_fu_383_p1[8 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        child_depth_V_address0 = zext_ln544_8_fu_532_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        child_depth_V_address0 = zext_ln544_fu_439_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        child_depth_V_address0 = sext_ln23_fu_410_p1;
    end else begin
        child_depth_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        child_depth_V_address1 = zext_ln40_fu_467_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        child_depth_V_address1 = zext_ln544_5_fu_444_p1;
    end else begin
        child_depth_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        child_depth_V_ce0 = 1'b1;
    end else begin
        child_depth_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        child_depth_V_ce1 = 1'b1;
    end else begin
        child_depth_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        child_depth_V_we0 = 1'b1;
    end else begin
        child_depth_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_fu_452_p3 == 1'd0))) begin
        child_depth_V_we1 = 1'b1;
    end else begin
        child_depth_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        extLd_loc_blk_n = extLd_loc_empty_n;
    end else begin
        extLd_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((extLd_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        extLd_loc_read = 1'b1;
    end else begin
        extLd_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_length_hist_address0 = internal_length_hist_2_reg_660;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_length_hist_address0 = zext_ln544_7_fu_484_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        internal_length_hist_address0 = zext_ln19_fu_399_p1;
    end else begin
        internal_length_hist_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        internal_length_hist_ce0 = 1'b1;
    end else begin
        internal_length_hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_length_hist_d0 = count_V_1_fu_524_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        internal_length_hist_d0 = 9'd0;
    end else begin
        internal_length_hist_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln17_fu_387_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (((icmp_ln883_reg_647 == 1'd0) & (tmp_reg_643 == 1'd0)) | ((icmp_ln883_1_reg_651 == 1'd0) & (tmp_reg_643 == 1'd0)))))) begin
        internal_length_hist_we0 = 1'b1;
    end else begin
        internal_length_hist_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        left_V_address0 = sext_ln61_fu_513_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        left_V_address0 = sext_ln25_fu_420_p1;
    end else begin
        left_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        left_V_ce1 = 1'b1;
    end else begin
        left_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        length_histogram_V_address0 = zext_ln544_7_reg_655;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        length_histogram_V_address0 = zext_ln19_fu_399_p1;
    end else begin
        length_histogram_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        length_histogram_V_ce0 = 1'b1;
    end else begin
        length_histogram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        length_histogram_V_d0 = count_V_1_fu_524_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        length_histogram_V_d0 = 9'd0;
    end else begin
        length_histogram_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln17_fu_387_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (((icmp_ln883_reg_647 == 1'd0) & (tmp_reg_643 == 1'd0)) | ((icmp_ln883_1_reg_651 == 1'd0) & (tmp_reg_643 == 1'd0)))))) begin
        length_histogram_V_we0 = 1'b1;
    end else begin
        length_histogram_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        parent_V_address0 = sext_ln61_fu_513_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        parent_V_address0 = sext_ln25_fu_420_p1;
    end else begin
        parent_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        parent_V_ce0 = 1'b1;
    end else begin
        parent_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        parent_V_ce1 = 1'b1;
    end else begin
        parent_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        right_V_address0 = sext_ln61_fu_513_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        right_V_address0 = sext_ln25_fu_420_p1;
    end else begin
        right_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        right_V_ce0 = 1'b1;
    end else begin
        right_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        right_V_ce1 = 1'b1;
    end else begin
        right_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((extLd_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln17_fu_387_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_fu_452_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_405_p2 = ($signed(zext_ln13_reg_543) + $signed(10'd1022));

assign add_ln26_fu_427_p2 = ($signed(zext_ln13_reg_543) + $signed(10'd1020));

assign add_ln61_fu_507_p2 = ($signed(op2_assign_reg_360) + $signed(32'd4294967294));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((extLd_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_condition_239 = (((icmp_ln883_1_fu_478_p2 == 1'd1) & (icmp_ln883_fu_472_p2 == 1'd0) & (tmp_fu_452_p3 == 1'd0)) | ((icmp_ln883_1_fu_478_p2 == 1'd0) & (icmp_ln883_fu_472_p2 == 1'd1) & (tmp_fu_452_p3 == 1'd0)));
end

always @ (*) begin
    ap_condition_242 = ((icmp_ln883_1_fu_478_p2 == 1'd0) & (icmp_ln883_fu_472_p2 == 1'd0) & (tmp_fu_452_p3 == 1'd0));
end

assign child_depth_curr_V_1_fu_499_p3 = ((icmp_ln879_fu_493_p2[0:0] === 1'b1) ? length_V_fu_460_p2 : p_097_0_i_i_reg_293);

assign count_V_1_fu_524_p2 = (internal_length_hist_q0 + zext_ln544_6_fu_520_p1);

assign i_5_fu_393_p2 = (i_0_i_i_reg_282 + 7'd1);

assign i_6_fu_537_p2 = ($signed(op2_assign_reg_360) + $signed(32'd4294967295));

assign i_fu_415_p2 = ($signed(zext_ln13_reg_543) + $signed(10'd1021));

assign icmp_ln17_fu_387_p2 = ((i_0_i_i_reg_282 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_493_p2 = ((zext_ln879_fu_489_p1 == op2_assign_reg_360) ? 1'b1 : 1'b0);

assign icmp_ln883_1_fu_478_p2 = ((p_07_0_i_i_reg_331 == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_472_p2 = ((p_09_0_i_i_reg_311 == 9'd511) ? 1'b1 : 1'b0);

assign left_V_address1 = sext_ln26_fu_432_p1;

assign length_V_fu_460_p2 = (p_0106_0_i_i_reg_351 + 6'd1);

assign parent_V_address1 = sext_ln26_fu_432_p1;

assign right_V_address1 = sext_ln26_fu_432_p1;

assign sext_ln23_fu_410_p1 = $signed(add_ln23_fu_405_p2);

assign sext_ln25_1_fu_449_p1 = i_reg_558;

assign sext_ln25_fu_420_p1 = i_fu_415_p2;

assign sext_ln26_fu_432_p1 = $signed(add_ln26_fu_427_p2);

assign sext_ln61_fu_513_p1 = $signed(add_ln61_fu_507_p2);

assign tmp_fu_452_p3 = op2_assign_reg_360[32'd31];

assign zext_ln13_fu_383_p1 = extLd_loc_dout;

assign zext_ln19_fu_399_p1 = i_0_i_i_reg_282;

assign zext_ln40_fu_467_p1 = op2_assign_reg_360;

assign zext_ln544_5_fu_444_p1 = parent_V_q1;

assign zext_ln544_6_fu_520_p1 = phi_ln700_i_i_reg_370;

assign zext_ln544_7_fu_484_p1 = length_V_fu_460_p2;

assign zext_ln544_8_fu_532_p1 = parent_V_q0;

assign zext_ln544_fu_439_p1 = parent_V_q0;

assign zext_ln879_fu_489_p1 = p_0104_0_i_i_reg_302;

always @ (posedge ap_clk) begin
    zext_ln13_reg_543[9] <= 1'b0;
    zext_ln544_7_reg_655[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //compute_bit_length
