// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module create_codeword (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        symbol_bits_V_address0,
        symbol_bits_V_ce0,
        symbol_bits_V_q0,
        codeword_length_histogram_V_address0,
        codeword_length_histogram_V_ce0,
        codeword_length_histogram_V_q0,
        stream_buffer_keep_V_address0,
        stream_buffer_keep_V_ce0,
        stream_buffer_keep_V_q0,
        stream_buffer_strb_V_address0,
        stream_buffer_strb_V_ce0,
        stream_buffer_strb_V_q0,
        stream_buffer_user_V_address0,
        stream_buffer_user_V_ce0,
        stream_buffer_user_V_q0,
        stream_buffer_last_V_address0,
        stream_buffer_last_V_ce0,
        stream_buffer_last_V_q0,
        stream_buffer_id_V_address0,
        stream_buffer_id_V_ce0,
        stream_buffer_id_V_q0,
        stream_buffer_dest_V_address0,
        stream_buffer_dest_V_ce0,
        stream_buffer_dest_V_q0,
        encoding_TDATA,
        encoding_TVALID,
        encoding_TREADY,
        encoding_TKEEP,
        encoding_TSTRB,
        encoding_TUSER,
        encoding_TLAST,
        encoding_TID,
        encoding_TDEST
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_state4 = 9'd4;
parameter    ap_ST_fsm_state5 = 9'd8;
parameter    ap_ST_fsm_state6 = 9'd16;
parameter    ap_ST_fsm_state7 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] symbol_bits_V_address0;
output   symbol_bits_V_ce0;
input  [4:0] symbol_bits_V_q0;
output  [5:0] codeword_length_histogram_V_address0;
output   codeword_length_histogram_V_ce0;
input  [8:0] codeword_length_histogram_V_q0;
output  [7:0] stream_buffer_keep_V_address0;
output   stream_buffer_keep_V_ce0;
input  [5:0] stream_buffer_keep_V_q0;
output  [7:0] stream_buffer_strb_V_address0;
output   stream_buffer_strb_V_ce0;
input  [5:0] stream_buffer_strb_V_q0;
output  [7:0] stream_buffer_user_V_address0;
output   stream_buffer_user_V_ce0;
input  [0:0] stream_buffer_user_V_q0;
output  [7:0] stream_buffer_last_V_address0;
output   stream_buffer_last_V_ce0;
input  [0:0] stream_buffer_last_V_q0;
output  [7:0] stream_buffer_id_V_address0;
output   stream_buffer_id_V_ce0;
input  [0:0] stream_buffer_id_V_q0;
output  [7:0] stream_buffer_dest_V_address0;
output   stream_buffer_dest_V_ce0;
input  [0:0] stream_buffer_dest_V_q0;
output  [31:0] encoding_TDATA;
output   encoding_TVALID;
input   encoding_TREADY;
output  [3:0] encoding_TKEEP;
output  [3:0] encoding_TSTRB;
output  [0:0] encoding_TUSER;
output  [0:0] encoding_TLAST;
output  [0:0] encoding_TID;
output  [0:0] encoding_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg symbol_bits_V_ce0;
reg codeword_length_histogram_V_ce0;
reg stream_buffer_keep_V_ce0;
reg stream_buffer_strb_V_ce0;
reg stream_buffer_user_V_ce0;
reg stream_buffer_last_V_ce0;
reg stream_buffer_id_V_ce0;
reg stream_buffer_dest_V_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    encoding_TDATA_blk_n;
wire    ap_CS_fsm_state8;
reg   [0:0] icmp_ln26_reg_502;
wire    ap_CS_fsm_state9;
reg   [26:0] p_0199_0_reg_256;
reg   [4:0] i_0_reg_269;
wire   [0:0] icmp_ln18_fu_291_p2;
reg   [0:0] icmp_ln18_reg_472;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] i_fu_297_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln21_fu_303_p1;
reg   [63:0] zext_ln21_reg_481;
wire   [26:0] temp_V_fu_322_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] icmp_ln26_fu_330_p2;
wire    ap_CS_fsm_state5;
wire   [8:0] i_4_fu_336_p2;
reg   [8:0] i_4_reg_506;
reg   [4:0] length_V_reg_546;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln883_fu_353_p2;
reg   [0:0] icmp_ln883_reg_552;
reg   [4:0] first_codeword_V_add_1_reg_556;
wire   [3:0] result_keep_V_fu_364_p1;
reg   [3:0] result_keep_V_reg_561;
wire   [3:0] result_strb_V_fu_368_p1;
reg   [3:0] result_strb_V_reg_566;
reg   [0:0] result_user_V_reg_571;
reg   [0:0] result_last_V_reg_576;
reg   [0:0] result_id_V_reg_581;
reg   [0:0] result_dest_V_reg_586;
reg    ap_block_state8_io;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [4:0] first_codeword_V_address0;
reg    first_codeword_V_ce0;
reg    first_codeword_V_we0;
reg   [26:0] first_codeword_V_d0;
wire   [26:0] first_codeword_V_q0;
reg   [8:0] i1_0_reg_280;
reg    ap_block_state9_io;
wire    ap_CS_fsm_state4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_fu_342_p1;
wire   [63:0] zext_ln544_fu_359_p1;
reg   [31:0] tmp_data_V_fu_104;
wire   [31:0] result_data_V_fu_452_p1;
wire    ap_CS_fsm_state7;
wire   [26:0] add_ln700_fu_456_p2;
wire   [25:0] trunc_ln1503_fu_312_p1;
wire   [25:0] zext_ln1503_fu_308_p1;
wire   [25:0] add_ln1503_fu_316_p2;
wire   [5:0] zext_ln215_fu_382_p1;
wire   [5:0] ret_V_fu_385_p2;
wire   [2:0] trunc_ln790_fu_399_p1;
wire   [2:0] sub_ln556_fu_403_p2;
reg   [26:0] p_Result_s_fu_372_p4;
wire   [26:0] zext_ln556_fu_409_p1;
wire   [26:0] zext_ln808_fu_419_p1;
wire   [26:0] r_V_fu_413_p2;
wire   [26:0] lshr_ln808_fu_423_p2;
wire   [0:0] p_Result_1_fu_391_p3;
wire   [21:0] trunc_ln796_fu_429_p1;
wire   [21:0] trunc_ln796_1_fu_433_p1;
wire   [21:0] select_ln796_fu_437_p3;
wire   [26:0] tmp_2_fu_445_p3;
wire    ap_CS_fsm_state10;
wire    regslice_both_encoding_V_data_V_U_apdone_blk;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    encoding_TVALID_int;
wire    encoding_TREADY_int;
wire    regslice_both_encoding_V_data_V_U_vld_out;
wire    regslice_both_encoding_V_keep_V_U_apdone_blk;
wire    regslice_both_encoding_V_keep_V_U_ack_in_dummy;
wire    regslice_both_encoding_V_keep_V_U_vld_out;
wire    regslice_both_encoding_V_strb_V_U_apdone_blk;
wire    regslice_both_encoding_V_strb_V_U_ack_in_dummy;
wire    regslice_both_encoding_V_strb_V_U_vld_out;
wire    regslice_both_encoding_V_user_V_U_apdone_blk;
wire    regslice_both_encoding_V_user_V_U_ack_in_dummy;
wire    regslice_both_encoding_V_user_V_U_vld_out;
wire    regslice_both_encoding_V_last_V_U_apdone_blk;
wire    regslice_both_encoding_V_last_V_U_ack_in_dummy;
wire    regslice_both_encoding_V_last_V_U_vld_out;
wire    regslice_both_encoding_V_id_V_U_apdone_blk;
wire    regslice_both_encoding_V_id_V_U_ack_in_dummy;
wire    regslice_both_encoding_V_id_V_U_vld_out;
wire    regslice_both_encoding_V_dest_V_U_apdone_blk;
wire    regslice_both_encoding_V_dest_V_U_ack_in_dummy;
wire    regslice_both_encoding_V_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

create_codeword_flbW #(
    .DataWidth( 27 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
first_codeword_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(first_codeword_V_address0),
    .ce0(first_codeword_V_ce0),
    .we0(first_codeword_V_we0),
    .d0(first_codeword_V_d0),
    .q0(first_codeword_V_q0)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_encoding_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_V_fu_104),
    .vld_in(encoding_TVALID_int),
    .ack_in(encoding_TREADY_int),
    .data_out(encoding_TDATA),
    .vld_out(regslice_both_encoding_V_data_V_U_vld_out),
    .ack_out(encoding_TREADY),
    .apdone_blk(regslice_both_encoding_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_encoding_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(result_keep_V_reg_561),
    .vld_in(encoding_TVALID_int),
    .ack_in(regslice_both_encoding_V_keep_V_U_ack_in_dummy),
    .data_out(encoding_TKEEP),
    .vld_out(regslice_both_encoding_V_keep_V_U_vld_out),
    .ack_out(encoding_TREADY),
    .apdone_blk(regslice_both_encoding_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_encoding_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(result_strb_V_reg_566),
    .vld_in(encoding_TVALID_int),
    .ack_in(regslice_both_encoding_V_strb_V_U_ack_in_dummy),
    .data_out(encoding_TSTRB),
    .vld_out(regslice_both_encoding_V_strb_V_U_vld_out),
    .ack_out(encoding_TREADY),
    .apdone_blk(regslice_both_encoding_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_encoding_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(result_user_V_reg_571),
    .vld_in(encoding_TVALID_int),
    .ack_in(regslice_both_encoding_V_user_V_U_ack_in_dummy),
    .data_out(encoding_TUSER),
    .vld_out(regslice_both_encoding_V_user_V_U_vld_out),
    .ack_out(encoding_TREADY),
    .apdone_blk(regslice_both_encoding_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_encoding_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(result_last_V_reg_576),
    .vld_in(encoding_TVALID_int),
    .ack_in(regslice_both_encoding_V_last_V_U_ack_in_dummy),
    .data_out(encoding_TLAST),
    .vld_out(regslice_both_encoding_V_last_V_U_vld_out),
    .ack_out(encoding_TREADY),
    .apdone_blk(regslice_both_encoding_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_encoding_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(result_id_V_reg_581),
    .vld_in(encoding_TVALID_int),
    .ack_in(regslice_both_encoding_V_id_V_U_ack_in_dummy),
    .data_out(encoding_TID),
    .vld_out(regslice_both_encoding_V_id_V_U_vld_out),
    .ack_out(encoding_TREADY),
    .apdone_blk(regslice_both_encoding_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_encoding_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(result_dest_V_reg_586),
    .vld_in(encoding_TVALID_int),
    .ack_in(regslice_both_encoding_V_dest_V_U_ack_in_dummy),
    .data_out(encoding_TDEST),
    .vld_out(regslice_both_encoding_V_dest_V_U_vld_out),
    .ack_out(encoding_TREADY),
    .apdone_blk(regslice_both_encoding_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_encoding_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_280 <= 9'd0;
    end else if (((icmp_ln26_reg_502 == 1'd0) & (1'b0 == ap_block_state9_io) & (1'b1 == ap_CS_fsm_state9))) begin
        i1_0_reg_280 <= i_4_reg_506;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_269 <= 5'd0;
    end else if (((icmp_ln18_fu_291_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_269 <= i_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                p_0199_0_reg_256[1] <= 1'b0;
        p_0199_0_reg_256[2] <= 1'b0;
        p_0199_0_reg_256[3] <= 1'b0;
        p_0199_0_reg_256[4] <= 1'b0;
        p_0199_0_reg_256[5] <= 1'b0;
        p_0199_0_reg_256[6] <= 1'b0;
        p_0199_0_reg_256[7] <= 1'b0;
        p_0199_0_reg_256[8] <= 1'b0;
        p_0199_0_reg_256[9] <= 1'b0;
        p_0199_0_reg_256[10] <= 1'b0;
        p_0199_0_reg_256[11] <= 1'b0;
        p_0199_0_reg_256[12] <= 1'b0;
        p_0199_0_reg_256[13] <= 1'b0;
        p_0199_0_reg_256[14] <= 1'b0;
        p_0199_0_reg_256[15] <= 1'b0;
        p_0199_0_reg_256[16] <= 1'b0;
        p_0199_0_reg_256[17] <= 1'b0;
        p_0199_0_reg_256[18] <= 1'b0;
        p_0199_0_reg_256[19] <= 1'b0;
        p_0199_0_reg_256[20] <= 1'b0;
        p_0199_0_reg_256[21] <= 1'b0;
        p_0199_0_reg_256[22] <= 1'b0;
        p_0199_0_reg_256[23] <= 1'b0;
        p_0199_0_reg_256[24] <= 1'b0;
        p_0199_0_reg_256[25] <= 1'b0;
        p_0199_0_reg_256[26] <= 1'b0;
    end else if (((icmp_ln18_reg_472 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
                p_0199_0_reg_256[26 : 1] <= temp_V_fu_322_p3[26 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_fu_353_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        first_codeword_V_add_1_reg_556 <= zext_ln544_fu_359_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_4_reg_506 <= i_4_fu_336_p2;
        icmp_ln26_reg_502 <= icmp_ln26_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln18_reg_472 <= icmp_ln18_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln883_reg_552 <= icmp_ln883_fu_353_p2;
        length_V_reg_546 <= symbol_bits_V_q0;
        result_dest_V_reg_586 <= stream_buffer_dest_V_q0;
        result_id_V_reg_581 <= stream_buffer_id_V_q0;
        result_keep_V_reg_561 <= result_keep_V_fu_364_p1;
        result_last_V_reg_576 <= stream_buffer_last_V_q0;
        result_strb_V_reg_566 <= result_strb_V_fu_368_p1;
        result_user_V_reg_571 <= stream_buffer_user_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_reg_552 == 1'd0) & (icmp_ln26_reg_502 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_data_V_fu_104[26 : 0] <= result_data_V_fu_452_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_291_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln21_reg_481[4 : 0] <= zext_ln21_fu_303_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_291_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_encoding_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_encoding_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        codeword_length_histogram_V_ce0 = 1'b1;
    end else begin
        codeword_length_histogram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln26_reg_502 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln26_reg_502 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        encoding_TDATA_blk_n = encoding_TREADY_int;
    end else begin
        encoding_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_502 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_io))) begin
        encoding_TVALID_int = 1'b1;
    end else begin
        encoding_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        first_codeword_V_address0 = first_codeword_V_add_1_reg_556;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        first_codeword_V_address0 = zext_ln544_fu_359_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_codeword_V_address0 = zext_ln21_reg_481;
    end else begin
        first_codeword_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        first_codeword_V_ce0 = 1'b1;
    end else begin
        first_codeword_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        first_codeword_V_d0 = add_ln700_fu_456_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_codeword_V_d0 = p_0199_0_reg_256;
    end else begin
        first_codeword_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln883_reg_552 == 1'd0) & (icmp_ln26_reg_502 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln18_reg_472 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        first_codeword_V_we0 = 1'b1;
    end else begin
        first_codeword_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        stream_buffer_dest_V_ce0 = 1'b1;
    end else begin
        stream_buffer_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        stream_buffer_id_V_ce0 = 1'b1;
    end else begin
        stream_buffer_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        stream_buffer_keep_V_ce0 = 1'b1;
    end else begin
        stream_buffer_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        stream_buffer_last_V_ce0 = 1'b1;
    end else begin
        stream_buffer_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        stream_buffer_strb_V_ce0 = 1'b1;
    end else begin
        stream_buffer_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        stream_buffer_user_V_ce0 = 1'b1;
    end else begin
        stream_buffer_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        symbol_bits_V_ce0 = 1'b1;
    end else begin
        symbol_bits_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_291_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_291_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln26_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_io))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b0 == ap_block_state9_io) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((regslice_both_encoding_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1503_fu_316_p2 = (trunc_ln1503_fu_312_p1 + zext_ln1503_fu_308_p1);

assign add_ln700_fu_456_p2 = (27'd1 + first_codeword_V_q0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln26_reg_502 == 1'd0) & (encoding_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state9_io = ((icmp_ln26_reg_502 == 1'd0) & (encoding_TREADY_int == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign codeword_length_histogram_V_address0 = zext_ln21_fu_303_p1;

assign encoding_TVALID = regslice_both_encoding_V_data_V_U_vld_out;

assign i_4_fu_336_p2 = (i1_0_reg_280 + 9'd1);

assign i_fu_297_p2 = (i_0_reg_269 + 5'd1);

assign icmp_ln18_fu_291_p2 = ((i_0_reg_269 == 5'd27) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_330_p2 = ((i1_0_reg_280 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_353_p2 = ((symbol_bits_V_q0 == 5'd0) ? 1'b1 : 1'b0);

assign lshr_ln808_fu_423_p2 = p_Result_s_fu_372_p4 >> zext_ln808_fu_419_p1;

assign p_Result_1_fu_391_p3 = ret_V_fu_385_p2[32'd5];

integer ap_tvar_int_0;

always @ (first_codeword_V_q0) begin
    for (ap_tvar_int_0 = 27 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 26 - 0) begin
            p_Result_s_fu_372_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_372_p4[ap_tvar_int_0] = first_codeword_V_q0[26 - ap_tvar_int_0];
        end
    end
end

assign r_V_fu_413_p2 = p_Result_s_fu_372_p4 << zext_ln556_fu_409_p1;

assign result_data_V_fu_452_p1 = tmp_2_fu_445_p3;

assign result_keep_V_fu_364_p1 = stream_buffer_keep_V_q0[3:0];

assign result_strb_V_fu_368_p1 = stream_buffer_strb_V_q0[3:0];

assign ret_V_fu_385_p2 = (6'd27 - zext_ln215_fu_382_p1);

assign select_ln796_fu_437_p3 = ((p_Result_1_fu_391_p3[0:0] === 1'b1) ? trunc_ln796_fu_429_p1 : trunc_ln796_1_fu_433_p1);

assign stream_buffer_dest_V_address0 = zext_ln28_fu_342_p1;

assign stream_buffer_id_V_address0 = zext_ln28_fu_342_p1;

assign stream_buffer_keep_V_address0 = zext_ln28_fu_342_p1;

assign stream_buffer_last_V_address0 = zext_ln28_fu_342_p1;

assign stream_buffer_strb_V_address0 = zext_ln28_fu_342_p1;

assign stream_buffer_user_V_address0 = zext_ln28_fu_342_p1;

assign sub_ln556_fu_403_p2 = (3'd0 - trunc_ln790_fu_399_p1);

assign symbol_bits_V_address0 = zext_ln28_fu_342_p1;

assign temp_V_fu_322_p3 = {{add_ln1503_fu_316_p2}, {1'd0}};

assign tmp_2_fu_445_p3 = {{select_ln796_fu_437_p3}, {length_V_reg_546}};

assign trunc_ln1503_fu_312_p1 = p_0199_0_reg_256[25:0];

assign trunc_ln790_fu_399_p1 = ret_V_fu_385_p2[2:0];

assign trunc_ln796_1_fu_433_p1 = lshr_ln808_fu_423_p2[21:0];

assign trunc_ln796_fu_429_p1 = r_V_fu_413_p2[21:0];

assign zext_ln1503_fu_308_p1 = codeword_length_histogram_V_q0;

assign zext_ln215_fu_382_p1 = length_V_reg_546;

assign zext_ln21_fu_303_p1 = i_0_reg_269;

assign zext_ln28_fu_342_p1 = i1_0_reg_280;

assign zext_ln544_fu_359_p1 = symbol_bits_V_q0;

assign zext_ln556_fu_409_p1 = sub_ln556_fu_403_p2;

assign zext_ln808_fu_419_p1 = ret_V_fu_385_p2;

always @ (posedge ap_clk) begin
    p_0199_0_reg_256[0] <= 1'b0;
    zext_ln21_reg_481[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_data_V_fu_104[31:27] <= 5'b00000;
end

endmodule //create_codeword
