// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_read_stream_pro (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        symbol_histogram_TDATA,
        symbol_histogram_TVALID,
        symbol_histogram_TREADY,
        symbol_histogram_TKEEP,
        symbol_histogram_TSTRB,
        symbol_histogram_TUSER,
        symbol_histogram_TLAST,
        symbol_histogram_TID,
        symbol_histogram_TDEST,
        stream_buffer_0_din,
        stream_buffer_0_full_n,
        stream_buffer_0_write,
        stream_buffer_1_address0,
        stream_buffer_1_ce0,
        stream_buffer_1_we0,
        stream_buffer_1_d0,
        stream_buffer_2_address0,
        stream_buffer_2_ce0,
        stream_buffer_2_we0,
        stream_buffer_2_d0,
        stream_buffer_3_address0,
        stream_buffer_3_ce0,
        stream_buffer_3_we0,
        stream_buffer_3_d0,
        stream_buffer_4_address0,
        stream_buffer_4_ce0,
        stream_buffer_4_we0,
        stream_buffer_4_d0,
        stream_buffer_5_address0,
        stream_buffer_5_ce0,
        stream_buffer_5_we0,
        stream_buffer_5_d0,
        stream_buffer_6_address0,
        stream_buffer_6_ce0,
        stream_buffer_6_we0,
        stream_buffer_6_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [47:0] symbol_histogram_TDATA;
input   symbol_histogram_TVALID;
output   symbol_histogram_TREADY;
input  [5:0] symbol_histogram_TKEEP;
input  [5:0] symbol_histogram_TSTRB;
input  [0:0] symbol_histogram_TUSER;
input  [0:0] symbol_histogram_TLAST;
input  [0:0] symbol_histogram_TID;
input  [0:0] symbol_histogram_TDEST;
output  [40:0] stream_buffer_0_din;
input   stream_buffer_0_full_n;
output   stream_buffer_0_write;
output  [7:0] stream_buffer_1_address0;
output   stream_buffer_1_ce0;
output   stream_buffer_1_we0;
output  [5:0] stream_buffer_1_d0;
output  [7:0] stream_buffer_2_address0;
output   stream_buffer_2_ce0;
output   stream_buffer_2_we0;
output  [5:0] stream_buffer_2_d0;
output  [7:0] stream_buffer_3_address0;
output   stream_buffer_3_ce0;
output   stream_buffer_3_we0;
output  [0:0] stream_buffer_3_d0;
output  [7:0] stream_buffer_4_address0;
output   stream_buffer_4_ce0;
output   stream_buffer_4_we0;
output  [0:0] stream_buffer_4_d0;
output  [7:0] stream_buffer_5_address0;
output   stream_buffer_5_ce0;
output   stream_buffer_5_we0;
output  [0:0] stream_buffer_5_d0;
output  [7:0] stream_buffer_6_address0;
output   stream_buffer_6_ce0;
output   stream_buffer_6_we0;
output  [0:0] stream_buffer_6_d0;

reg ap_done;
reg ap_idle;
reg start_write;
reg symbol_histogram_TREADY;
reg stream_buffer_0_write;
reg stream_buffer_1_ce0;
reg stream_buffer_1_we0;
reg stream_buffer_2_ce0;
reg stream_buffer_2_we0;
reg stream_buffer_3_ce0;
reg stream_buffer_3_we0;
reg stream_buffer_4_ce0;
reg stream_buffer_4_we0;
reg stream_buffer_5_ce0;
reg stream_buffer_5_we0;
reg stream_buffer_6_ce0;
reg stream_buffer_6_we0;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    symbol_histogram_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln25_fu_188_p2;
reg    stream_buffer_0_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln25_reg_248;
reg   [8:0] i_0_i_reg_177;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] i_fu_194_p2;
wire   [40:0] tmp_data_V_fu_244_p1;
reg   [40:0] tmp_data_V_reg_257;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [63:0] zext_ln27_fu_200_p1;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_symbol_histogram_V_data_V_U_apdone_blk;
wire   [47:0] symbol_histogram_TDATA_int;
wire    symbol_histogram_TVALID_int;
reg    symbol_histogram_TREADY_int;
wire    regslice_both_symbol_histogram_V_data_V_U_ack_in;
wire    regslice_both_symbol_histogram_V_keep_V_U_apdone_blk;
wire   [5:0] symbol_histogram_TKEEP_int;
wire    regslice_both_symbol_histogram_V_keep_V_U_vld_out;
wire    regslice_both_symbol_histogram_V_keep_V_U_ack_in;
wire    regslice_both_symbol_histogram_V_strb_V_U_apdone_blk;
wire   [5:0] symbol_histogram_TSTRB_int;
wire    regslice_both_symbol_histogram_V_strb_V_U_vld_out;
wire    regslice_both_symbol_histogram_V_strb_V_U_ack_in;
wire    regslice_both_symbol_histogram_V_user_V_U_apdone_blk;
wire   [0:0] symbol_histogram_TUSER_int;
wire    regslice_both_symbol_histogram_V_user_V_U_vld_out;
wire    regslice_both_symbol_histogram_V_user_V_U_ack_in;
wire    regslice_both_symbol_histogram_V_last_V_U_apdone_blk;
wire   [0:0] symbol_histogram_TLAST_int;
wire    regslice_both_symbol_histogram_V_last_V_U_vld_out;
wire    regslice_both_symbol_histogram_V_last_V_U_ack_in;
wire    regslice_both_symbol_histogram_V_id_V_U_apdone_blk;
wire   [0:0] symbol_histogram_TID_int;
wire    regslice_both_symbol_histogram_V_id_V_U_vld_out;
wire    regslice_both_symbol_histogram_V_id_V_U_ack_in;
wire    regslice_both_symbol_histogram_V_dest_V_U_apdone_blk;
wire   [0:0] symbol_histogram_TDEST_int;
wire    regslice_both_symbol_histogram_V_dest_V_U_vld_out;
wire    regslice_both_symbol_histogram_V_dest_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 48 ))
regslice_both_symbol_histogram_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(symbol_histogram_TDATA),
    .vld_in(symbol_histogram_TVALID),
    .ack_in(regslice_both_symbol_histogram_V_data_V_U_ack_in),
    .data_out(symbol_histogram_TDATA_int),
    .vld_out(symbol_histogram_TVALID_int),
    .ack_out(symbol_histogram_TREADY_int),
    .apdone_blk(regslice_both_symbol_histogram_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 6 ))
regslice_both_symbol_histogram_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(symbol_histogram_TKEEP),
    .vld_in(symbol_histogram_TVALID),
    .ack_in(regslice_both_symbol_histogram_V_keep_V_U_ack_in),
    .data_out(symbol_histogram_TKEEP_int),
    .vld_out(regslice_both_symbol_histogram_V_keep_V_U_vld_out),
    .ack_out(symbol_histogram_TREADY_int),
    .apdone_blk(regslice_both_symbol_histogram_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 6 ))
regslice_both_symbol_histogram_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(symbol_histogram_TSTRB),
    .vld_in(symbol_histogram_TVALID),
    .ack_in(regslice_both_symbol_histogram_V_strb_V_U_ack_in),
    .data_out(symbol_histogram_TSTRB_int),
    .vld_out(regslice_both_symbol_histogram_V_strb_V_U_vld_out),
    .ack_out(symbol_histogram_TREADY_int),
    .apdone_blk(regslice_both_symbol_histogram_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_symbol_histogram_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(symbol_histogram_TUSER),
    .vld_in(symbol_histogram_TVALID),
    .ack_in(regslice_both_symbol_histogram_V_user_V_U_ack_in),
    .data_out(symbol_histogram_TUSER_int),
    .vld_out(regslice_both_symbol_histogram_V_user_V_U_vld_out),
    .ack_out(symbol_histogram_TREADY_int),
    .apdone_blk(regslice_both_symbol_histogram_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_symbol_histogram_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(symbol_histogram_TLAST),
    .vld_in(symbol_histogram_TVALID),
    .ack_in(regslice_both_symbol_histogram_V_last_V_U_ack_in),
    .data_out(symbol_histogram_TLAST_int),
    .vld_out(regslice_both_symbol_histogram_V_last_V_U_vld_out),
    .ack_out(symbol_histogram_TREADY_int),
    .apdone_blk(regslice_both_symbol_histogram_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_symbol_histogram_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(symbol_histogram_TID),
    .vld_in(symbol_histogram_TVALID),
    .ack_in(regslice_both_symbol_histogram_V_id_V_U_ack_in),
    .data_out(symbol_histogram_TID_int),
    .vld_out(regslice_both_symbol_histogram_V_id_V_U_vld_out),
    .ack_out(symbol_histogram_TREADY_int),
    .apdone_blk(regslice_both_symbol_histogram_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_symbol_histogram_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(symbol_histogram_TDEST),
    .vld_in(symbol_histogram_TVALID),
    .ack_in(regslice_both_symbol_histogram_V_dest_V_U_ack_in),
    .data_out(symbol_histogram_TDEST_int),
    .vld_out(regslice_both_symbol_histogram_V_dest_V_U_vld_out),
    .ack_out(symbol_histogram_TREADY_int),
    .apdone_blk(regslice_both_symbol_histogram_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_177 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_188_p2 == 1'd0))) begin
        i_0_i_reg_177 <= i_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_248 <= icmp_ln25_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_188_p2 == 1'd0))) begin
        tmp_data_V_reg_257 <= tmp_data_V_fu_244_p1;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_188_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln25_reg_248 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        stream_buffer_0_blk_n = stream_buffer_0_full_n;
    end else begin
        stream_buffer_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_248 == 1'd0))) begin
        stream_buffer_0_write = 1'b1;
    end else begin
        stream_buffer_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_buffer_1_ce0 = 1'b1;
    end else begin
        stream_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_188_p2 == 1'd0))) begin
        stream_buffer_1_we0 = 1'b1;
    end else begin
        stream_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_buffer_2_ce0 = 1'b1;
    end else begin
        stream_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_188_p2 == 1'd0))) begin
        stream_buffer_2_we0 = 1'b1;
    end else begin
        stream_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_buffer_3_ce0 = 1'b1;
    end else begin
        stream_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_188_p2 == 1'd0))) begin
        stream_buffer_3_we0 = 1'b1;
    end else begin
        stream_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_buffer_4_ce0 = 1'b1;
    end else begin
        stream_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_188_p2 == 1'd0))) begin
        stream_buffer_4_we0 = 1'b1;
    end else begin
        stream_buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_buffer_5_ce0 = 1'b1;
    end else begin
        stream_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_188_p2 == 1'd0))) begin
        stream_buffer_5_we0 = 1'b1;
    end else begin
        stream_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_buffer_6_ce0 = 1'b1;
    end else begin
        stream_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_188_p2 == 1'd0))) begin
        stream_buffer_6_we0 = 1'b1;
    end else begin
        stream_buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln25_fu_188_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        symbol_histogram_TDATA_blk_n = symbol_histogram_TVALID_int;
    end else begin
        symbol_histogram_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((symbol_histogram_TVALID == 1'b1) & (regslice_both_symbol_histogram_V_data_V_U_ack_in == 1'b1))) begin
        symbol_histogram_TREADY = 1'b1;
    end else begin
        symbol_histogram_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_188_p2 == 1'd0))) begin
        symbol_histogram_TREADY_int = 1'b1;
    end else begin
        symbol_histogram_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((stream_buffer_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln25_reg_248 == 1'd0)) | ((symbol_histogram_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln25_fu_188_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((stream_buffer_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln25_reg_248 == 1'd0)) | ((symbol_histogram_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln25_fu_188_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((stream_buffer_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln25_reg_248 == 1'd0)) | ((symbol_histogram_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln25_fu_188_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((symbol_histogram_TVALID_int == 1'b0) & (icmp_ln25_fu_188_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((stream_buffer_0_full_n == 1'b0) & (icmp_ln25_reg_248 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_194_p2 = (i_0_i_reg_177 + 9'd1);

assign icmp_ln25_fu_188_p2 = ((i_0_i_reg_177 == 9'd256) ? 1'b1 : 1'b0);

assign start_out = real_start;

assign stream_buffer_0_din = tmp_data_V_reg_257;

assign stream_buffer_1_address0 = zext_ln27_fu_200_p1;

assign stream_buffer_1_d0 = symbol_histogram_TKEEP_int;

assign stream_buffer_2_address0 = zext_ln27_fu_200_p1;

assign stream_buffer_2_d0 = symbol_histogram_TSTRB_int;

assign stream_buffer_3_address0 = zext_ln27_fu_200_p1;

assign stream_buffer_3_d0 = symbol_histogram_TUSER_int;

assign stream_buffer_4_address0 = zext_ln27_fu_200_p1;

assign stream_buffer_4_d0 = symbol_histogram_TLAST_int;

assign stream_buffer_5_address0 = zext_ln27_fu_200_p1;

assign stream_buffer_5_d0 = symbol_histogram_TID_int;

assign stream_buffer_6_address0 = zext_ln27_fu_200_p1;

assign stream_buffer_6_d0 = symbol_histogram_TDEST_int;

assign tmp_data_V_fu_244_p1 = symbol_histogram_TDATA_int[40:0];

assign zext_ln27_fu_200_p1 = i_0_i_reg_177;

endmodule //Loop_read_stream_pro
